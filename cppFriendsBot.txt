やめるのだフェネック! テストはソフトウェアの完全性を保証するものではないのだ! ソフトウェアの品質が十分でないという帰無仮説をテストで支持しようとして、テストが全部通ったので、帰無仮説を棄却して品質が十分高いとみなすことなのだ。 #やめるのだフェネックで学ぶCPP
やめるのだフェネック! 配列や構造体はどんなに大きくしてもいいという訳ではないのだ! ARMコンパイラは4GBまでできても、MinGW-32bit GCCは0x7fffffffBより大きくできないのだ! ユニットテストの妨げになるのだ! #やめるのだフェネックで学ぶCPP
Rでf<-function(x){x*x}のことを「関数fを定義する」と説明することがありますが、厳密にはある環境で無名関数オブジェクトを作成して変数fに代入すると言えばよいでしょうか。それよりも重要なのは、統計処理を自動化する方に、意図が伝わることですよね。
WindowsのUIはある時期から「フォルダー」のようにーが付くようになりましたが、コマンド(command)とコマンドー(commando)は別の単語だということを、辞書を引くまで知りませんでした。そういえばロボコップはcommand.comを実行していますよね。
やめるのだフェネック! Gitの公式ガイドラインに従うなら、コミットメッセージは命令形(imperative mood)で書いて欲しいのだ! 他のプロジェクトもこうしておけば、英語で迷うことは減るのだ! #やめるのだフェネックで学ぶCPP
Makefileに "$(RM) $(OUTPUT)/*" と書くと、変数OUTPUTが未定義のときにルートディレクトリ直下の*が消されて怖いことになります。 "$(RM) ./$(OUTPUT)/*" などと書く方が安全でしょうか?
やめるのだフェネック! __PRETTY_FUNCTION__の長さを決め打ちするのはやめるのだ! 引数にboost::multiprecisionとか取るテンプレートは、数百文字になることがあるのだ! #やめるのだフェネックで学ぶCPP
とある会社では、車のエンジンを分解させて組み立てさせ、モノづくりの苦労を学ばせると聞きます。私の場合は、わざと不具合が混入した疑似コードを渡されてコードを書いたことがあります。仕込まれた問題点をすべて指摘した上で、出題者が意図しない改善点まで挙げればしめたものでしょう。
やめるのだフェネック! 二つのファイル名が違っているからと言って、異なるファイルとは限らないのだ! それらはシンボリックリンクやハードリンクかもしれないのだ! boost::filesystem::equivalentで確認するのだ! #やめるのだフェネックで学ぶCPP
なぜ隣の席同士で直接会話せずチャットするのですか? というのにはいろいろ理由があるのでしょうけど、実用的な理由は長いURLを口頭では伝えられないからです。
コードジェネレータでenumメンバを生成するときに、join(",")で結合して最後のメンバの後には,をつけないのと、全メンバを"メンバ名,"で結合して最後のメンバの後にも,をつけるのと、どちらにするか訊かれたことはありますか? 実は後者はC99/C++11で合法なのです。
やめるのだフェネック! 製品コードの中に直接#ifdef UNITTEST ... #endifと書くのは極力避けたいのだ! そこはdependency injectionを使いたいのだ! #やめるのだフェネックで学ぶCPP
行動経済学でサンクコストの誤謬とは、今後取る行動を決める当たって、回収不可能な費用を気にする意味がないのに考慮してしまうことです。自然科学ではマルコフ性、つまり将来のことは現在の状態だけに基づいて決まり、現状にどうたどり着いたかは影響しない、と表現できます。
すごーい! boost::io::ios_flags_saver は入出力ストリームの設定を後で戻すフレンズなんだね
やめるのだフェネック! インデントとか括弧の字下げとか一行は100文字以内とかいう規則を、プログラマに手作業で守らせるのは無理なのだ! どうしても守らせたければ、IDEやindentにさせるのだ! #やめるのだフェネックで学ぶCPP
関数のreturnは末尾に限るべきかと訊かれて、異常が発生して処理を下に継続する意味がなければ早くreturnしたいですが、特に動的型付け言語ではすべてのreturnの返り値の型をそろえるのは大変ですし、でもそうするとif()のインデントが深くなってしまい、どうしましょう...
プログラマの三大美徳は、怠惰(ライオン)、短気(アライグマ)、傲慢(アフリカオオコノハズク)なのだ!
Rのdplyrは、bind_rows(df,NULL)で列を結合するとdfがそのまま返りますが、left_join(df,NULL)はエラーになります。dfがそのまま返って欲しい気がしますが、データフレームに共通の列がないとエラーになることと動作をあわせたのでしょうか。
社会に出るまでOfficeとWordを使ったことがない、と不安になる方がいるかもしれませんが、心配要りません。ACMやIEEEなどの主要学会はLaTeXが使えます。
やめるのだフェネック! リークするのはメモリだけじゃないのだ! TCP/UDP受信ポートがリークしたら、プロセス終了まで同じ番号のポートが開けなくなるのだ! #やめるのだフェネックで学ぶCPP
"Mademoiselle: Coco Chanel Summer 62"という、マドモアゼル シャネルの仕事風景を写した写真集があります。ひたすら仕事に没頭するその姿は、プログラマの理想的な作業環境でもあると思います。
Pythonのlist comprehensionを見たときにHaskell的だなあと思いましたが、実際そのようです(下記)。普段使っているのと異なるプログラミング言語を使うと、思わぬ出会いがあります。{\n}https://docs.python.jp/3/whatsnew/2.0.html
やめるのだフェネック! 「符号付きと符号無しの整数式の間での比較です」という警告は、文字通りの意味とは限らないのだ! 同じデータ構造を、異なるファイルで、異なる基本型で扱っているのが原因かもしれないのだ! #やめるのだフェネックで学ぶCPP
int変数の名前はiで始めるべきだという方は、boost::multi_index_container<Element,boost::multi_index::indexed_by<boost::multi_index::ordered_unique<略はどうするのでしょうか?
やめるのだフェネック! classはstructのsyntactic sugarにすぎないのだ! デフォルトの公開範囲が違うだけで、できることに変わりはないのだ! #やめるのだフェネックで学ぶCPP
やめるのだフェネック! XOR r,rは単にレジスタrを0にするだけじゃないんだ! レジスタrとフラグの依存関係を絶って、実行効率を改善するためのイディオムなのだ! フラグを変えたくなければMOV r,0にするのだ! #やめるのだフェネックで学ぶCPP
「UTF-8テキストのBOMを取り除きたいのですが」{\n}「ddにする? sedにする? それともvim?」
「スタックって何?」{\n}「銭湯で最初に脱いだものをコインロッカーの一番奥に、次に脱いだものをその手前に...という順番でしまっておくと、風呂から上がった後に着るものを手前から順番に取り出すことができる」
ETCが普及した理由は、料金所渋滞を無くすことで有料道路の利用者が得をしたからでしょう。私の行きつけの店は電子マネーを導入していないところが多数ありますが、そのような店にとって「導入すると明らかにいいこと」は何でしょうか。{\n}https://www.e-nexco.co.jp/activity/safety/detail_07.html
メタプログラミングというと何だか難しく聞こえますが、アニメの「メタ発言」というのは割とよく知られているので、メタというのは分かってしまえば怖くないと思います。
文字列をキーとした連想配列を作る{\n}→数字を格納したいので、文字列表現で格納しよう{\n}→99999まではテスト通るのに、100000は通らない、なぜ?{\n}→変数を表示してみる{\n}[1] "1e+05"{\n}あ゛
コンパイラを壊す方法{\n}C++テンプレートメタプログラミングでアッカーマン関数を計算する。テンプレートの再帰深度の限度に達してエラーになってくれるとよいのですが...{\n}https://github.com/zettsu-t/cPlusPlusFriend/blob/master/huge_number/ackermann_function.cpp
(前略)"許可を得るより謝るがずっと簡単だ" by Grace Murray Hopper という言葉があります。プロジェクトに新しいツールや方法を導入するために許可を得るより、GitHubでコードを公開してうまくいくことを実証する方がずっと簡単ですね。
やめるのだフェネック! ユニットテストが書きにくいからって、#defineでprivateをpublicに置き換えちゃいけないのだ! アクセス指定子を超えたメンバ変数の順序は入れ替わることがあるのだ! friendを使うのだ! #やめるのだフェネックで学ぶCPP
やめるのだフェネック! 整数に対するlog2がライブラリにないからって、ループを回すのはイケてないのだ! BSR命令か__builtin_clz()を使うのだ #やめるのだフェネックで学ぶCPP
何かがランダムに発生するなら粗密があるのです。等間隔ならランダムとは言わないのです(対偶)。よってしばしば待たされるのは当然なのです。
ディレクトリへのシンボリックリンクを作成しようとして、ln -sの引数を逆にしてしまう。{\n}$ ln -s TaraiMawashi dir/{\n}$ cd dir{\n}$ ls -l{\n}lrwxrwxrwx TaraiMawashi -> TaraiMawashi{\n}#プログラマあるある
やめるのだフェネック! strict aliasing rule警告の意味が分からないからって無視してはいけないのだ! 正しく直すのだ! #やめるのだフェネックで学ぶCPP
やめるのだフェネック! ポインタの差を、intに入れるのは嫌なのだ! ptrdiff_tを使うのだ! 符号ありだから、printf書式は"%td"を使うのだ! #やめるのだフェネックで学ぶCPP
何かを習得するのに、徐々に(linear)ではなくある日突然まとめていっぺんに(by stages)分かる、ということがあります。語学の学習曲線はそのようだと聞きます。C++も言語なのですが、どうだったでしょうか。
やめるのだフェネック! if constexprはコンパイル可能でなければならないのだ! PEXCEPTION_POINTERS->ContextRecord->{Rip|Eip} はコンパイルエラーを避けるために#ifdefにするのだ! #やめるのだフェネックで学ぶCPP
プログラマにとって怠惰、短気、傲慢は美徳なので、「あなたのコードは正しく動くのですか」と訊かれたら、その場でmake test(改行)ッターン!と入力するのです。
SHRX/SHLX/SHRX命令は、フラグを書き換えないフレンズなんだね。x86命令の依存関係は、レジスタだけでなくフラグにもあるんだね。
L1距離のことをマンハッタン距離とも言いますが、碁盤の目のような街並みと言えば、ワシントンD.C.もそうですよね。マンハッタンが代表的な地名として選ばれたのは、なぜでしょうか。
ベストエフォートとはいわば「状況次第、成り行き」です。成り行きと訳さなかったのは、一見高度な技術に見えないと思ったからかもしれませんが、成り行きには安くて便利という長所があります。お抱えシェフを雇うより、ランチを好きな時間に好きな店で食べられる方が多くの人にとって幸せでしょう。
やめるのだフェネック! unionを使ってstructをuint8_t[]に読み替えるのは、実行時にはできても、constexprでコンパイル時にできるとは限らないのだ! #やめるのだフェネックで学ぶCPP
思いついたことは実装することができる、の対偶は、実装できないことは思いつかない、です。思いついた解答を制限時間内に実装できるプログラマって強いですよね。 (元の言葉は"If you can dream it, you can do it." by Walt Disney)
やめるのだフェネック! pthread_t型の変数を、pthread_createを呼び出す前に初期化はできないのだ! pthread_tの型はopaqueだから、ユーザが設定できる初期値などないのだ! #やめるのだフェネックで学ぶCPP
RStudioで複数のスクリプトを連続実行すると、前のスクリプトでlibrary()したのがそのまま残るので、後のスクリプトで必要なlibrary()を忘れていても実行できてしまうことがあります。リリース前にスクリプトをRscriptで単独実行して動作確認するのは重要ですね。
「デジタルマネー」という言葉を聞いたのですが、そもそもお金のやり取りは1円以上の整数なので、マネーの取引はデジタル(量子化、離散化)ではありませんか? 消費税が1円未満になっても買い物は1円単位ですし、株式インデックスが小数でも、インデックスファンドの売買は1円単位ですよね。
CD-DAが世に出て40年近く経った今になっても、デジタル=かっこいい、アナログ=ださい、と同義語に扱うのを見かけるのはなぜなのでしょう。短歌も小説も文字の集合ですが、文字集合は離散集合で無限の世界を表現しているので、人類は昔からデジタルな世界を生きてきたと思うのです。
失敗学が社会に浸透するよりも、失敗の原因より失敗した人を責める習慣が深まったのは、いったいなぜなのでしょうね。おそらく福知山線脱線事故あたりが転機だったと思います(日比谷線脱線事故の頃は、まだ事故の原因を探ろうという気運が社会全体にあったと思います)。わけが分からないのです。
東海道/山陽/九州新幹線の新車がN700->N700A->N700Sと名付けられるのは、N700が新幹線の最終形態という意味なのかもしれません。MPEG-4 Visual->AVC->HEVCとか、最後のファンタジー15とかと同じでしょうか(中の人はFFを知らないのですが)。
人は何かを危険だというがどう危険なのかは深く考えないことがある、という例としてDHMOが有名です。ところで「中島らもの明るい悩み相談室」の「じゃがいもを焼いて味噌をつけて食べる」件は、行動経済学のケーススタディとしてよいと思うのですが、海外では知られているのでしょうか?
仮想アドレスというと何か難しく聞こえますが、近畿自動車道名古屋神戸線という物理道路(法定路線名)に、伊勢湾岸自動車道(の一部)と新名神高速道路という論理道路(営業路線名)を名付けた、と言えばなんとなく分かりませんか。
やめるのだフェネック! 演算子の優先度を覚えるのは無理なのだ! expr ? 2 : 3 + 4; 4 + expr ? 2 : 3; 4 + (expr ? 2 : 3); は違うのだ! 括弧をつけるのだ! #やめるのだフェネックで学ぶCPP
後知恵にすぎないことを承知で書くのですが、IPv4アドレスが32ビットということは、IPv4が発明された時点で1人1アドレス以下だったのでしょうか(世界の人口を40-50億人だったとして)。一人で何台もネットワーク接続機器を持つ世界が想定されたのはもっと後だったのでしょうね。
std::dequeは「デキュー」ではなく「デック」と呼んで欲しいのです～
やめるのだフェネック! タイピングが大変だからって、using namespace std って書いちゃいけないのだ! C++17でstd::anyとstd::optionalがきたから名前がかぶるのだ! #やめるのだフェネックで学ぶCPP
プログラムという言葉は、コンピュータが実行するコード以外にもいろいろ意味があります。テレビ番組(TV program)、マイレージサービス(frequent flyer program)、査証免除措置(visa waiver program)などがあります。
PageRankの名称は発明者の名前に由来しますが、web pageという一般名詞と思っている方もいらっしゃるかもしれません(掛詞だとは思いますが)。Bloom Filterも考案者の名前に由来しますね。
やめるのだフェネック! ROT13はとても暗号とは呼べないのだ! 一文字の単語がaで三文字の単語がtheなのはバレバレなのだ!
Stable isotopeは安定同位体ですが、stable sortは同順位の要素は元の並び順を維持するソートのことです。同位体でtraceといえば放射性トレーサーと痕跡量(trace amount)がありますが、ソフトウェアにはstraceがありますね。
C++17の新機能にstd::hardware_{destructive|constructive}_interference_sizeがあります。マルチスレッドで極限の性能を追い求めるC++erは待っていたのではないでしょうか。
～がうまくいかないのは、やり方が不十分だからで、もっとリソースをつぎ込めばできるはずだ、という誤謬はよくあることです。人が空を飛ぶために必要だったのは、大きな羽根で力強くはばたくことではなく、揚力について知ることではありませんでしたか?
よい要求(requirement)が満たす性質として、correct, consistent, complete などがありますが、資料によって挙がっている項目が異なるようです。いずれにせよ、これらは要求に限らず、一般的によい技術文書が満たす性質だと思います。
PCパーツでノーブランドという表現を、私はあまり聞かなくなりました。たまに飲み屋でメニューに冷酒とか燗酒とだけ書かれていて銘柄が書いてないお酒があるが、他の日本酒は銘柄が書いてある、という状況がそれに近いでしょうか。
「服を買いに行く服がない」という言葉があります。PCもスマホもないと、各社料金プランの比較も、店までの地図を入手するのも大変なので、「スマホを買いに行くスマホがない」のではないかと思いました。
optionalとは値が「ないかもしれない」オブジェクトのことですが、金融の世界にもオプションがあります。以前読んだ本によれば、コールを買う=強奪する権利、プットを買う=押し売りする権利を手に入れることだそうです。権利というのは「行使しなくてもよい」という意味です。
やめるのだフェネック! 配列の要素数を #define arraySizeof(a) (sizeof(a)/sizeof(a[0])) で数えるのはやめるのだ! aにポインタを渡すと、変な値が返ってくるのだ! テンプレートを使うのだ! #やめるのだフェネックで学ぶCPP
午後21時という表現は変なのですが、言いたいことは分かります。Rubyなら以下の意味ですね。timestamp.sub(/(\D*)(\d+)/){t=$2.to_i;(t+((!$1.include?("午後")||(t>12))?0:12)).to_s}.to_i
Rでmatrixを転置する関数を探していたのですが、transposeでもtransでもなく、なんとt一文字でした。NumPyもv.Tなので同じく一文字です。そういえばRubyのpも一文字の関数ですね。
やめるのだフェネック! constメンバ関数からメンバ変数を書き換えたくなったからといって、いきなりmutableとかconst_cast<T*>(this)とかしちゃいけないのだ! 呼び出し側はスレッドセーフを期待しているのだ! #やめるのだフェネックで学ぶCPP
手戻りなく掃除するには、部屋掃除は高いところから順に低いところを拭きますし、その後水回りを、台所、トイレ、風呂の順に掃除し、そのまま体を洗うとすっきりします。レイテンシを減らすためには実行順序は重要ですよね。
以下のサイトは、volatileとstd::memory_order_seq_cstは違うという啓蒙だと思いますが、{\n}https://isocpp.org/blog/2018/06/is-volatile-useful-with-threads-isvolatileusefulwiththreads.com{\n}元ネタはこれでしょうか?{\n}http://dailynewsagency.com/2013/01/07/istodaythedaymartymcflyarriveswhenhetravelstothef
やめるのだフェネック! 変数名をtimeと書いて時間と読ませるのは、点(時刻)なのか幅(狭義の時間)なのか分からないのだ! timestampかdurationと書いてほしいのだ! #やめるのだフェネックで学ぶCPP
通信におけるinterleavingとは、書類の全ページの端っこが破れてなくなったときは、書いてあった内容を察することができるかもしれませんが、1ページ丸々紛失したらそこに何が書いてあったかは分からないということです。
かな漢字の予測変換は、ある単語/文節に対して後続する確率の高い単語を挙げることです。ところで画竜点睛に「を欠く」以外が続くことはまずありませんし、枕詞には続く単語が限定されるのですが、皆さんの環境ではどうなっていますか?
Rのdplyr::distinctの説明に、"considerably faster"と書いてあります。この表現を覚えておいて、いざ速いアルゴリズムを書いたときに言ってみたいですね。{\n}https://dplyr.tidyverse.org/reference/distinct.html
映画のオープニングやスタッフロールに出てくる、役と俳優の名前は、"役 俳優"と"俳優 as 役"の両方の表記方法があるのですね。変数宣言と同じですね。
BOMがあるかもしれないし、ないかもしれないUTF-8なCSVファイルをRで読むのは、fread(filename, encoding="UTF-8")に統一するのが幸せな気がします。
C++のclass Outerの中でT型を定義したとき、メンバ関数定義 T Outer::Foo(T&) {...} の引数はOuter::Tを指しますが、返り値はOuterの外で定義されたTを指すのは不思議ですね。
C++で明示的にthisと書くことはあまりありませんが、例えば{\n}std::bind(&T::MemberFunction, this, std::placeholders::_1){\n}とかがありますね。
今更ですが{\n}for(auto i = decltype(size){0}; i < size; ++i) for(i = 0; i < size; ++i){\n}の内ループをjと書くつもりでうっかりiにしてしまうのを、コンパイラは警告してくれないのでしょうか?
シューティングゲームの当たり判定は、ナイーブな方法ではすべての敵N機に対する座標比較になります。モートン順序を用いた空間分割によって、自機の近くの敵とだけ比較することで高速化できるようです。{\n}http://marupeke296.com/COL_2D_No8_QuadTree.html
C++14では、整数の桁区切り記号として、'を使えるようになりました。C++14以前との互換性を考慮して選ばれた記号ですが、スイスでは似たような記号(U+2396)で桁を区切るので、実社会と無縁でもないのです。
Register renamingとは、「そのレジスタのデータはこれ以上使わないのです。おかわりをよこすのです。」
やめるのだフェネック! std::unique_ptrが持つ素のポインタを渡して所有権を手放したらreleaseするのだ。resetしたり持ったままだと二回解放されてしまうのだ! std::localeにfacetを渡すときは気を付けるのだ! #やめるのだフェネックで学ぶCPP
ソースコードに潜む不具合は、プログラミング言語やイディオムが改善されても、コンパイラや静的解析ツールを強化しても、発見できないものがどうしても残ります。これをpesticide bugと言いますが、元の意味は薬剤耐性ですよね。
std::mapのvalue_typeはstd::pair<Key, T>ではなく、std::pair<const Key, T>です。
やめるのだフェネック! オブジェクト指向を「もの指向」と呼ぶのは嫌なのだ! 「目的語指向」と呼んで欲しいのだ! #やめるのだフェネックで学ぶCPP
やめるのだフェネック! 成果物のビルドはmake一発でできて欲しいのだ! それより複雑な手順は、間違った成果物をリリースする元凶なのだ! スモークテストも併せて実行して、結果を報告して欲しいのだ! #やめるのだフェネックで学ぶCPP
平面のディスプレイに3Dグラフィックスを表示して奥行きが感じられる、というのは不思議ですが、絵画もそうですし、よくよく考えたら片目をつぶって観た景色にも奥行きは感じられますね。
数学が得意な方にとって冪等性とは、固有値が1と0しかない行列にベクトルを掛けると、ベクトルに行列を一度掛けても二度掛けても同じベクトルが得られる、ということでしょうか。これを使って表現できるアルゴリズムは何がありますか。
「WSJで学ぶ経済英語」は実務に役立つ英語の文法用例集です。いまどきの高校生はこういう教材で学んでいるのですから、なんとも頼もしい限りです。ネット以前の優良な教材は、「やさしいビジネス英語」などに限られていましたから。{\n}http://jp.wsj.com/news/types/j-economy-english
やめるのだフェネック! free(p);をif(p){}で囲む必要はないのだ! freeにNULLを渡しても無害なのだ! こういうインタフェースはnull object patternにして欲しいのだ! アライさんはその辺ばっちりなのだ! #やめるのだフェネックで学ぶCPP
例外は、コンストラクタが失敗したことを教えてくれるフレンズなんだね
ある場所で、"サーバレンタル料が..."と聞こえてきたのでどんなサービスを立ち上げるのかと思ったら、続いて"リットル当たり"と聞こえてきました。
MinとMaxが双対だと感じるのは、最大10行のときの行数を min(n_lines, 10) で求めるときです。最大と言っておきながらminなのは不思議ではありませんか。
やめるのだフェネック! コンテナの要素の型をソースコードにべた書きしたら、型を変えた時に修正が大変なのだ! std::vector::value_typeとautoとdecltypeを使うのだ! #やめるのだフェネックで学ぶCPP
Leakageという言葉は、半導体ではリーク電流(leakage current)を思い出しますが、データサイエンスの世界では、知りえない情報が訓練データに漏れてしまうこと、のようです。{\n}https://www.kaggle.com/dansbecker/data-leakage
RStudioでRスクリプトを先頭から実行していて、png()とdev.off()の間でエラーが発生し、エラーの発生箇所を直して再実行すると、前のpng()がPNGファイルを開きっぱなしなのでPNGファイルを消せなくなりませんか。まあdev.off()を連打すれば直りますが。
Rのdata.frameはデフォルトでstringsAsFactors=TRUEですが、data.tableのデフォルトはstringsAsFactors=FALSEです。文字列処理をしたいなら後者の方が幸せでしょう(factorが必要なときはas.factorするので)。
やめるのだフェネック! ビルド中のエラーメッセージを英語で出したいからといって、シェルでexport LC_ALL=Cとすると、svnで日本語ファイル名が扱えなくてエラーになるのだ! LC_ALLはMakefileの中で設定するのだ!  #やめるのだフェネックで学ぶCPP
不確かということばには、サイコロの目のように確率分布は分かっているが結果を予想できないことと(risk)、確率分布がそもそも分からないこと(uncertainty)があります。例えば起業が成功する確率について、統計はあるのでしょうか。
やめるのだフェネック! thread_localを使う前によく考えるのだ! 特定のスレッドしか参照しない値は、スレッド起動時の引数で渡して参照できるのだ! アライさんはその辺ばっちりなのだ! #やめるのだフェネックで学ぶCPP
std::swapは例外を投げずに変数を交換できるフレンズなんだね。おもしろーい!
やめるのだフェネック! diffコマンドは-uprNオプションをつけて起動して欲しいのだ! Working copyがbranchから一行でもずれたらパッチが当たらないのは困るのだ! git diffに形式をあわせるのだ! #やめるのだフェネックで学ぶCPP
やめるのだフェネック! 長さNの配列を、for(int i=0; i<N; ++i)で回すのはやめるのだ! 配列の長さを増やしたとき、for文を変え忘れるのだ! インデックスiが必要なら、Nをsize()かconstexpr式とかで調べるのだ! #やめるのだフェネックで学ぶCPP
やめるのだフェネック! メンバ変数を増やしたとき、複数あるコンストラクタすべてに、そのメンバ変数の初期化を加えるのを忘れちゃ嫌なのだ! 予防とDRYを兼ねて、メンバ変数の定義に初期化を置くのだ! #やめるのだフェネックで学ぶCPP
「ゼロ the man of the creation」という漫画の主人公がしばしば言うことに、「本物は一つでいい」があります。std::moveした後の抜け殻のオブジェクトに対するアクセスはまずいことがあります。{\n}https://en.cppreference.com/w/cpp/utility/move
やめるのだフェネック! キーボードに落ちた髪の毛を取るときはスクリーンロックを掛けるのだ。髪の毛を追いまわしている間に、変な文字列がターミナルに入力されているのだ!
Intel 64のマニュアルには、IMULは符号無し整数の乗算にも使える(演算結果の下位ビットは符号ありと同じになる)と書いてあります。これがMULとIMULでオペランド数が異なる理由でしょう。{\n}https://software.intel.com/sites/default/files/managed/39/c5/325462-sdm-vol-1-2abcd-3abcd.pdf
やめるのだフェネック! バージョン管理システムにはソースコード以外入れてはならない、という規則はないのだ! テストやドキュメントも登録してタグを打てばよいのだ! #やめるのだフェネックで学ぶCPP
同期と言えばsynchronizeという意味であって、誰かが私とたまたま同じ時期に～という組織に入った、いう意味で使うことが私にはほとんどありません。相手が同期かどうかで態度を変えるという発想が私にはないのですが、前者の反対語がasyncなら後者の反対語は何でしょうか。
やめるのだフェネック! uint32_t = 1を一度に35回シフトして0になったのは、LTOが有効だからだ! LTOがないと8なのだ! Nビット整数を一度にN回以上シフトするのは未定義動作だから直すのだ! #やめるのだフェネックで学ぶCPP
PDCAサイクルとは、Program-Debug-Commit-Announce、つまりコードを書いてデバッグして公開したら、ツイッターで通知することです。
檀ふみ著"ありがとうございません"から重引しますが、曾野綾子さんが"ワープロで書く原稿は「油絵」だ、言葉を幾重にも重ねて仕上げていく"とおっしゃったそうです。確かにウォータフォールではなく、テスト駆動でインクリメンタルにソフトウェアを開発するのはこういうことだと思います。
やめるのだフェネック! RGuiで無関係なスクリプトを連続実行すると、後のスクリプトで未定義変数を使ってエラーになるはずが、前のスクリプトで定義した値を拾ってしまうのだ。rm(list=ls())できれいにするのだ!
やめるのだフェネック! 変数がintだからといって、変数名の先頭にiをつけてiVarにするのはやめるのだ! 後で64ビット化したときにlong longに変えても、保守プログラマはllVarにはしてくれないのだ! #やめるのだフェネックで学ぶCPP
ABA問題と言えば、ロックフリーアルゴリズムにまつわる厄介な問題です。ところで、ルービックキューブを解くときの手順で、A-B-Aの逆とひねることをABA'と表記するようですね。'をprimeと読むかdashと読むかは以下にあります。{\n}https://english.stackexchange.com/questions/26530/how-is-a-in-mathematics-pronounced
やめるのだフェネック! thisと引数が同じオブジェクトかどうか(二つの引数が同じオブジェクトかどうか)確かめずに、片方から他方にメンバをコピーするのは危ないのだ! memcpyのように要素が消失することがあるのだ! #やめるのだフェネックで学ぶCPP
狭い通路で他人と鉢合わせして、左右に進路を振ったら相手も同じ方向に変えてきた、というのはよくあることです。相手より早く大きな幅で左右にずれればお互いうまくいくはずなのですが、うまい説明はないでしょうか。トリガー戦略とは違うようですし。
株式指標の多くは時価総額加重平均ですが、これはすべての人が保有している株式の合計価値を近似しているように見えます。それに対して修正平均株価であるダウ平均株価(DJIA)と日経平均株価(N225)は何を近似しているのでしょうか。私には分からないのです。
やめるのだフェネック! 長さNの配列を、for(int i=0; i<N; ++i)で回すのはやめるのだ! 配列の長さを増やしたとき、for文を変え忘れるのだ! iが不要ならrange-based forかstd::for_eachを使うのだ! #やめるのだフェネックで学ぶCPP
吊橋は昔からあったが、斜長橋はコンピュータで構造解析ができるようになって実現した、と読んだことがあります。アイデアを形にするには計算機のパワーとアルゴリズムが必要だった、ということはたくさんありそうですね。
やめるのだフェネック! コレクションの最大要素と最小要素を別々に求めるのは二度手間なのだ! std::minmax_elementを使うのだ! #やめるのだフェネックで学ぶCPP
やめるのだフェネック! Zipでダウンロードしたソースコードを展開してそのままコピーすると、時差のせいで、現在時刻より古いためにmakeでリコンパイルされないことがあるのだ! そのときはmake rebuildかtouchするのだ! #やめるのだフェネックで学ぶCPP
~(tilde)というと、C言語の単項演算子が思い浮かぶのですが、~が二項演算子の言語といえば、DとKuinとRとRStanを思いつきます。他にもいろいろあるでしょう。
統計でCovarianceと言えば共分散ですが、C++にはCovarianceだけでなくContravarianceもあります。
命題A⇒Bにおいて、Aが偽ならBは真とされます。要求を完璧に獲得しかつ開発が完了するまでそれが変わらなければ、ウォーターフォール型ソフトウェア開発はうまくいく、が該当するでしょう。開発中に要求が変わるのは、ソフトウェアを使う社会経済や競合他社の状況が変わるからですけど。
やめるのだフェネック! ユニットテストを書くときは、いきなりテストを成功させてはいけないのだ! まず失敗させないと、テストに成功したのか、そのテストを実行していないのか、区別がつかないのだ! #やめるのだフェネックで学ぶCPP
やめるのだフェネック! アセンブリの細かい処理を高速化するときは、何マイクロ秒経ったかだけでなく、何クロック掛かったも測るのだ! 今どきのCPUは可変クロック周波数なのだ! #やめるのだフェネックで学ぶCPP
フェネックにやめて欲しいことは原則として検証コードを書いているのですが、意図的に発生させようとしてなかなか発生しないのが、スレッド間でデータを共有するときにメモリフェンスが抜けていると意図しない動作をすることです。これは起きてしまうと再現が難しいので厄介です。
フランス語ではHを発音しませんが、そのことに初めて気づいたのは、エルメス(Hermès)ですか? それともエルミート行列(Hermitian matrix: Charles Hermiteに由来)ですか?
やめるのだフェネック! sizeofにリテラルを渡すのはやめるのだ! sizeof('a')はCとC++で違うのだ! #やめるのだフェネックで学ぶCPP
Rのvarは不偏分散なのです。{\n}v <- c(-3,-1,-1,-1,1,1,1,1,1,1){\n}length(v){\n}[1] 10{\n}sum(v){\n}[1] 0{\n}sum(v*v){\n}[1] 18{\n}mean(v){\n}[1] 0{\n}var(v){\n}[1] 2  # 1.8ではないです
化学の先生が言ったことに、「真空って何気圧だと思いますか」というのがあります。完全な真空はないので、どれくらい気圧を下げるためにどのような装置を選ぶかということです。コンピュータだと、一次キャッシュから大陸間通信までのレイテンシの階層図がありましたね。
やめるのだフェネック! volatile T*へのキャストをどう書く分からないからって、Cキャストを使っちゃいけないのだ! const_castを使うのだ! #やめるのだフェネックで学ぶCPP
長文を書くときの問題は一貫性の確保です。何日も掛けて文章を書いていると、同じ概念を異なる言葉で書いてしまって、校閲中に後から統一しなければならないことがあります。ですので連続して文章を書く時間を確保して、集中力をぶつけることが重要だと思います。つまり集中工事ですね。
やめるのだフェネック! コレクションの先頭要素が0か1か区別して欲しいのだ! 0時はあっても、0日や0月や平成0年はないのだ! #やめるのだフェネックで学ぶCPP
米子空港の愛称が米子鬼太郎空港で、出雲空港の愛称が出雲縁結び空港なら、島根県松江市美保関町にある七類港の愛称は七類Ruby港になるのでは、とふと思いました。
セマフォ(semaphore)は鉄道由来の用語です。Mutexの可視化なら、高知の路面電車(とさでん交通伊野線)でタブレット交換をみることができます。
やめるのだフェネック! 配列の要素を0から数えるのは、C言語が初めてじゃないのだ! イギリスやフランスでは、日本やアメリカの1階が0階(ground floor)なのだ! エレベーターに0とかGとか表示するのだ! #やめるのだフェネックで学ぶCPP
横浜駅が完成する前にC++標準が完成することはありえますが、横浜駅が完成する前に私がC++を完全に理解することはなさそうな気がします。
やめるのだフェネック! コンストラクタでm_(m_)としているのは、メンバ変数をメンバ変数で初期化しているから、初期化していないのと同じなのだ! m_がstd::vectorへの参照だと、コンパイラは教えてくれないことがあるのだ! #やめるのだフェネックで学ぶCPP
自分の分野外の文章を読むと分からないことがあって、その分からない用語の説明を読むとまた分からないことがあって、こうして分からないことが増殖するが、ある点を境に減っていく、という現象を何と呼ぶのか分からないのですが、要するに不具合曲線またはシグモイド曲線ですよね。
やめるのだフェネック! インラインアセンブリのシフト命令でCLレジスタを使ったら、破壊レジスタに書かないとダメなのだ! RCXレジスタに第一引数のポインタが入っていると、Segmentation faultの危機なのだ! #やめるのだフェネックで学ぶCPP
仕様設計書の書き方の例というのは、どうにも味気ないものになりがちなので、もっと実用的な例として、家事の段取りを書かせてはいかがでしょうか。例えば掃除しながら洗濯機を回し、洗濯が終わったら掃除を中断して干す、というはイベントドリブンですよね。
やめるのだフェネック! f(uint8_t)とf(BYTE)とf(unsigned char)を同時には定義できないのだ! 関数を再定義してますと言われてしまうのだ! プログラマには違う型に見えてもコンパイラには区別がつかないのだ! #やめるのだフェネックで学ぶCPP
やめるのだフェネック! メンバ変数名の目印のアンダースコアは、名前の先頭につけちゃいけないのだ! _で始まり次が英大文字の名前はC++処理系の予約語なのだ! #やめるのだフェネックで学ぶCPP
Oxymoronとは矛盾する単語を並べる語法のことで、例えばact naturallyがあります。Oxymoronの例を挙げよと言われたら、"UD2(0Fh 0Bh)という未定義命令"と答えればよいのですね。
やめるのだフェネック! ビットフィールドを設定/取得するのに、マスクしてシフトするのは唯一の方法ではないのだ! 最近のx86はPEXT/PDEP命令が使えるのだ! #やめるのだフェネックで学ぶCPP
オークションを2nd price auctionにすることの考察は興味深いです。試しに、給湯室のポットに水をいっぱい入れて沸かすのを、最初に出社した人ではなく二番目に出社した人にさせると、皆早起きを嫌がらなくなるのではないかと思いました。
やめるのだフェネック! grep -v pat は「patに合わない行がある」であって「patに合う行がない」ではないのだ! 後者は grep pat ; test $? -eq 1 で終了コードが1であることを確認するのだ! #やめるのだフェネックで学ぶCPP
Bayesian regretとは、最適な戦略と実際にアルゴリズムが選んだ戦略の差ですが、regretという単語の意味は後悔というよりは過ぎしてしまったことを惜しむという感じです。なのでリグレットを強いて漢字で書くなら、後悔より残念の方があっているような気がします。
return std::unique_ptr<Base>{std::make_unique<Derived>()};{\n}するときに、class Derived : public Base のpublicを忘れたためにおびただしい量のエラーメッセージに打ちのめされる気持ちを述べよ。
キャストしたらSEGVした、という事例の一つはreinterpret_cast<T*>したらアラインメント違反ですが、もう一つはread-onlyなページ(.textセクション)をconst_cast<T&>で書き換えようとした、です。他には何があるでしょうか。
「ライト、ついてますか - 問題発見の人間学」 (原題 "Are Your Lights On? : 略" by Donald C. Gause and Gerald M. Weinberg)を真似て、更衣室とか、家や勤務先の出口に「傘、持ってますか」と掲げたくなりませんか?
分類問題において、標本の数だけカテゴリがあるのは、単に標本を数え上げるだけで意味のない過学習です。しかし社会を語るときに人それぞれ違う、の一言で済ませるのは、なぜか受け入れられるようです。社会とは人の集合とその関係性であり、社会を語るとは部分集合の共通点と違いではありませんか?
社会で微分が何の役に立つのかと訊かれたら、「独占企業はその立場を利用していくらでも値段を吊り上げる」ことはしない、なぜなら利潤が最大化する点で生産量と価格は均衡するから、と答えるのがよろしいでしょうか。要するに利潤を微分しろということです。
Hard disk driveをカタカナで表記するときはハードディスクとし、ハードドライブと書く人は少数派だと思います。ですのでC:ドライブがSSDでもローカルディスクなのは、分かりやすさを重視した結果でしょう。電話をダイヤルするのと同じような表現でしょうか。
やめるのだフェネック! ファイルをShift_JISで保存するのはやめるのだ! //コメントが「でゲソ」で終わると、次の行もコメント扱いされて無かったことにされるのだ。Makefileも同様なのだ! #やめるのだフェネックで学ぶCPP
エンディアンの違いは確かに厄介ですが、社会にも統一されないことはあるのです。株価が上がったときの色は、日経が赤でロイターが緑、下がった時はそれぞれ逆(緑と赤)なのです。遠目には株価が上がったのか下がったのか分からないのです。
ソフトウェアは形が無いから把握するのが難しい、という言葉は最近聞かなくなりました。よくよく考えたら、高校の理科や社会で習うことで「目に見えるもの」はそれほどなくて、ほとんどは「概念を理解すること」ですよね。紙幣を見ることはできても「お金」を見ることはできませんよね。
やめるのだフェネック! 負の整数を2で割るのに、算術右シフト一回だけでは済まないのだ! -1を2で割っても-1になってしまうのだ! コンパイラがどんなコードを出力するか確認するのだ! #やめるのだフェネックで学ぶCPP
結果という意味の英語は、resultの他にoutcomeがあります。Outcomeにぴったり当てはまる日本語を思いつかないのですが、良い会議とは、outcomeを見据えて運営するものだと思っています。
External fragmentationとは、回転寿司で一人分の席が複数空いているが隣接していないので、二人連れの客が席が空くのを待っている状態です。なおラーメン屋とバーでは既に座っている客が隣に移って空けてくれますが、これをcompactionと言います。
dplyr::group_mapが見つからないはなぜでしょう{\n}df<-tibble(p=0:11%/%6,q=0:11%/%3,r=0:11){\n}lapply(split(df,df$p),function(x){head(x,1)})%>%bind_rows()
プロジェクトのクリティカルパスは、期限が守れるかどうかを決めるものであって、難易度とは別の概念です。カレーライスを作るクリティカルパスはご飯を炊くことですが、炊飯器のスイッチを押すのと、玉ねぎの皮をむいて炒めるのと、どちらが難しいかは明らかでしょう。
プログラミングと株取引は似ています。サッカーや将棋のようなレベル分けされたリーグはなく、プロとアマチュア、商品、製品とそうでないソフトウェアが全力で勝負している世界です。
やめるのだフェネック! (a) ? b/a : c; をasmで書くのに、b/aとcを求めてからcmovで選ぶのはまずいのだ! cを選ぶ前に0除算例外が発生することがあるのだ! コンパイラはこういうときcmovではなく分岐にしてくれるのだ! #やめるのだフェネックで学ぶCPP
美容師に髪を切ってもらっていてすごいと思うのは、髪は切り過ぎたら元に戻せないのに、切り終わったときには髪型が整っているということです。テキストエディタにundoがあり、バージョン管理システムにrevertがあってよかったと思いました。
グローバル変数の初期化順序に依存して動かなくなるコードは、*.oをリンクする順序が変わることで発覚することがあります。Makefileで$(sort *.o)することで問題を回避できますが、逆に*.oの順序をランダマイズして問題をあぶり出すことはできないでしょうか。
Rって一文字の関数や定数が多いですね{\n}c : ベクトルを作る{\n}q : quit{\n}t : 行列を転置する{\n}T : TRUE{\n}F : FALSE{\n}他にもI, stats::C,Dがあります。
やめるのだフェネック! 関数や型がどこで定義されているかを、いちいちgrepで調べるのは嫌なのだ! etagsでTAGSを作って、emacsからタグジャンプすればよいのだ! #やめるのだフェネックで学ぶCPP
swapの使い方として、std::ostringstreamの中身を空にして内部状態を消すというのがあります。例外も投げません。代わりに空のものを=でmoveしてもよいです。{\n}https://stackoverflow.com/questions/20731/how-do-you-clear-a-stringstream-variable
やめるのだフェネック! Embedded systemを「埋め込み」システムと訳すのは嫌なのだ! 組み込みシステムと訳して欲しいのだ! #やめるのだフェネックで学ぶCPP
やめるのだフェネック! ビットフィールドを上から下に並べても、MSBから順に並ぶとは限らないのだ! エンディアンとコンパイラの仕様を確認するのだ! IPv4ヘッダの構造体をみて欲しいのだ! #やめるのだフェネックで学ぶCPP
プログラマにとって古くからある機械分類問題といえば、日本語テキストがShift_JIS, EUC-JP, ISO-2022-JP, UTF-8.jpのどれかを判定することです。文字化けを文字化けと認識できるのは、実はすごいことですよね。
やめるのだフェネック! volatile int value = *p; はpの指すものがvolatileではなく、valueがvolatileなのだ! pの指すものが更新されても、valueは連動して更新されないのだ! #やめるのだフェネックで学ぶCPP
GitHub上の私のレポジトリのドキュメントは一部英文で書いていますが、ネイティブスピーカーが見れば改善すべき点はたくさんあると思います。今どきの高校生は英語の先生と、英文をGitで履歴を残しながらレビューできると思うと、うらましくなります。
PlayStationはworkstationをもじった言葉とされますが、workstationとは元々コンピュータのことではなく、組み立てラインのように、作業に適した環境が整った個人の仕事場のことだったのです。
SNSは和製英語なので英語圏では通じないそうですが、Pythonのseabornはsnsと略してimportするのが習慣だそうです。seabornを略してもsnsにはならないのですが、由来は下記にあります。{\n}https://stackoverflow.com/questions/41499857/seaborn-why-import-as-sns
0以上1以下(1未満ではない)の乱数を作ろうとしてrand(1)したら、0しか返ってこなかったことはありませんか?
食べ物の広告画像によく「イメージ」と書いてあります。もしかして「これ(広告)と同じものをください」というときに、「値が同じ」かどうかの演算子==ではなく「インスタンスが同一」かどうかequal?を適用している客がいるのでしょうか?
ビットフィールド構造体の設定を、各メンバを逐次代入するのと構造体まるごとコピーするのとで、生成されるコードに大差ありませんでした。それよりもg++はビットマスクを使って各メンバを設定するが、clang++は全メンバのビットパターンからなる即値を入れるという違いの方が大きいです。
やめるのだフェネック! putcというメンバ関数を作るのはダメなのだ! putcは関数ではなくマクロで実装されていることがあるから、そのときは意味不明なエラーメッセージが出るのだ! #やめるのだフェネックで学ぶCPP
やめるのだフェネック! 浮動小数をprintf("%.0e")して7文字(-1e-308)で収まると、決め打ちするのはやめるのだ! -infinityと表示するときは9文字なのだ! #やめるのだフェネックで学ぶCPP
曲名のソートって大小文字と先頭の冠詞は無視しますよね{\n}ruby -e "puts STDIN.each_line.sort_by { |s| s.downcase.gsub(/\\A\s*(((a)|(an)|(the))?\s+)/,'') }"
プログラマの初出勤日は、勤務規則を聞いてから社員証と健康保険証を頂いて、二日目にはもう開発に加わっているというのが、涼風青葉みたいでいいと思います。座学よりも、自分で手を動かしたり技術的課題の議論をしたりする方が楽しいですよね。
やめるのだフェネック! 関数宣言と関数定義の引数名が違うのはまずいのだ! 片方がradiusで他方がdiameterだと、どちらが正しい仕様だか分からないのだ! #やめるのだフェネックで学ぶCPP
マルチモーダルという言葉から、multimodal interfaceつまり視覚や聴覚など複数の感覚に訴えるユーザインタフェースと、multimodal distributionすなわち多峰性(山が複数ある)分布と、どちらを思い浮かべますか?
やめるのだフェネック! 非同期処理をシーケンス図で表現するのは大変なのだ! アクティビティ図を使って並行性を表現して欲しいのだ! #やめるのだフェネックで学ぶCPP
【情報科学科 期末試験】{\n}傘立てにある所有者不明の傘を処分したいと考えている。Mark and sweep GCとCopying GCによる方法について説明したうえで、両方式の長所と短所について述べよ。
"Buy one carton of milk, and if they have eggs, get 6." の誤解 (eggs) ? 6 : 1 がジョークだと分かりにくいのは、英文では1と6に単位がないのに、和文では牛乳1本-卵6個と、単位つける必要があるからですね。
映画の字幕が1秒あたり4文字なのはあくまで目安なのだそうです。実際には、観客がいかにして絵を見ながら字を読んで理解できるようにするか、工夫が詰まっているのですね。自動機械翻訳がこういう工夫を取り入れる日がくるのでしょうか。{\n}http://blog.livedoor.jp/heather1/archives/23866954.html
やめるのだフェネック! よく知られたアルゴリズムをそのまま使うときは出典を明記して欲しいのだ! そのコードがXorshiftだということは、保守する人には分からないのだ! #やめるのだフェネックで学ぶCPP
「やはり俺の青春ラブコメはまちがっている。」は「はまち」と略すらしいですが、catコマンドはconcatenateの略なので、古今東西考えることは同じだと思いました。
C++17ってまだ"Modern C++"なのですね。MPEG-4 Part 10: Advanced Video Coding (AVC)や、新幹線N700Aみたいに、Advancedになるのかと思っていました。N700Aの次はN700Sですね。
国鉄時代のダイヤグラム作成は、温泉旅館で全国規模の会議を開いていたそうです(富井規雄著 "鉄道ダイヤのつくりかた" オーム社)。ソフトウェアの上流設計も、温泉旅館に館詰にして行った方が、作業に割り込みがないので、いいものができるのではないでしょうか。
大江千里さん作詞/作曲/歌の「夏の決心」という歌があります。子供にとって夏休みは短すぎるというのは確かにそうでしたが、大人にとってもコンパイラやOSを作るには夏休みは短すぎるのです。
やめるのだフェネック! コメントに「このクラスのインスタンスはヒープに置かないでください」と書いて済ますのは嫌なのだ! operator newを=deleteして欲しいのだ! プログラマを誤用から守るのもライブラリの役割なのだ! #やめるのだフェネックで学ぶCPP
ソートにおいて、e,éの順序をどう扱うか、というのはフランス語を読めない私には分かりません。さて日本語で名前や単語を並べるとき、"た"と"だ"の順序はどう扱うのでしょうか。以下が一つの回答のようです。{\n}http://pj.ninjal.ac.jp/QandA/etc/post-40/
やめるのだフェネック! 関数へのポインタにnullptrは確かに使えるが、できれば何もしない関数を設定して欲しいのだ! NULL検査はわずらわしいし忘れやすいのだ! #やめるのだフェネックで学ぶCPP
角速度とは2Dゲームで、手前に描いた背景の動きより奥に描かれた背景の動きを小さくすることで、多次元配列をスライシングするときにコピーせずビューとして扱うのは、2DグラフィックスでVRAMに描いた画像の一部領域だけディスプレイに映すことではありませんか?
やめるのだフェネック! 組み込み32bit CPU向けコードのテストをGoogle Testで書くのに、x86_64コンパイラは要らないのだ! size_tの違いを吸収するのは大変なのだ! target=i686でインストールするのだ! #やめるのだフェネックで学ぶCPP
NULLというと何も指さないポインタか参照を思い出しますが、帰無仮説のことをnull hypothesisというのですね。
やめるのだフェネック! メンバ変数を一括クリアするのに、memset(this, 0, sizeof(*this))はまずいのだ! vtableへのポインタもクリアしてしまうのだ! #やめるのだフェネックで学ぶCPP
Rustでコンパイルして生成した実行可能ファイルがYMMレジスタを使っているのを見てすごーい! と思いましたが、clang++が出力したコードもそうでした。ということは、YMMレジスタを使うようにしているのはLLVMバックエンドでしょうか?
Sandbox上で実行するというのは理解しがたいことに聞こえますが、要するにテキストエディタで複数のファイルを編集してもそれぞれのファイルの内容が混じったりしない(もちろんユーザが意図的にコピペすればそうなる)と言えばよいでしょうか。
std::atomic<T>::value_typeが使えるのは、C++17以降なのですね。ユニットテストに{\n}constexpr decltype(anAtomic)::value_type expected {1};{\n}と書きたかったのですが。
人間の感覚が対数に比例することが分かるのは、～は選べる組み合わせが何億通り、と聞いたときでしょうか。
RではNULLとNAは意味が異なります。data.frame df、列名colに対してdfにcol列がなければdf$colはNULLになりますが、col列があればベクトルが返り、ベクトルの要素にはNAを含むことがあります。全要素がNAのベクトルもありえます。
「プログラミングRust」に、生成するものが尽きたジェネレータはNoneを返し続けるとありましたが、これはべき乗則の一種でしょうか?
やめるのだフェネック! enumの要素数をプログラマが数えて定数に打ち込むのは、要素が増えた時にメンテナンスできなくなるのだ! 要素の先頭が0で連番なら、enumの最後のメンバにCOUNTを加えればそれが要素数になるのだ! #やめるのだフェネックで学ぶCPP
2の160乗通りのGit commit IDを使い果たすことはできない、と言われても今一つピンとこないと思いますが、アボガドロ定数(2の79乗)より大きいことなら、なんとなく分かっていただけるのではないでしょうか?
やめるのだフェネック! シンボル名を短くしたいからって、変な略語を発明しないで欲しいのだ! Cではないのだから、シンボルを31文字以内に収める必要はないのだ! #やめるのだフェネックで学ぶCPP
やめるのだフェネック! ヘッダファイルをインクルードする順番が入れ替わるとエラーになるのは困るのだ! 宣言と定義を適切にヘッダファイル群に分割して、依存関係を一方向にそろえるのだ! #やめるのだフェネックで学ぶCPP
やめるのだフェネック! 乱数の種は関数の外から与えるようにしないと、ユニットテストで結果を再現できないのだ!
ベストエフォートというと通信でよく使われる用語ですが、郵便でもsurface air lifted (SAL)といって、似たような仕組みがあるのですね。
やめるのだフェネック! .hppからモックなどを作るときに、自動生成する予定のファイルがインクルードできないのは困るのだ! インクルード可否をMakefileから注入して欲しいのだ! C++17ではないプロジェクトに__has_includeはまだ早いのだ!
Rubyスクリプトをユニットテストするとき、オープンクラスを使ってテスト対象のクラスの振る舞いを望み通り変えると、テストが書きやすいです。これはC++では簡単にはできないことですね。
やめるのだフェネック! 時間には単位を書いてほしいのだ! usがμ秒だということはなんとなく分かるのだが、usecと書かないと我々とか米国と読めてしまうのだ! #やめるのだフェネックで学ぶCPP
メッセージという単語はmsgsnd()のようにしばしばmsgと略しますが、大文字のMSGはグルタミン酸ナトリウム(monosodium glutamate)ですね。
RからStanに値を渡すときに、Rから要素の1個のベクトルを渡して、Stanで要素の1個のベクトルを受け取ろうとするとエラーになります。{\n}"dims declared=(1); dims found=()"{\n}Stanにスカラーが渡っているようですが、回避策はあるのでしょうか?
今のx64プロセッサは内部48bitでアドレスを扱っているようですが、SIZE_MAXは2^64-1と定義されていますし、RSIZE_MAX=(SIZE_MAX >> 1)のようです。
やめるのだフェネック! 文字列の集合を連結するのに、boost::algorithm::join(lines, " ") で連結しちゃ嫌なのだ! 英語はこれが正しいけど、日本語だと「弁慶がな ぎなたを振り回し」になってしまうのだ! #やめるのだフェネックで学ぶCPP
初期パスワードに「0やOとなど間違えやすい文字の入力にご注意ください」と、時々書いてあるような気がします。間違えやすい文字を初期パスワードに含めないようにする方が、適切ではないでしょうか。
コマンドラインがすっごーい! ことを見せるには、find -type f -print0 | xargs -0 renameがよいと思います。ちなみに-print0と-0がないとファイル名が空白を含むときにうまく動きませんし、xargsに-L 1が要るコマンドもあるでしょう。
やめるのだフェネック! 年齢不詳のときに、0歳を返すのは論外だが、だからって-1歳を返さないで欲しいのだ! std::optional に入れて欲しいのだ! #やめるのだフェネックで学ぶCPP
元素記号を並べると、一文字の記号が二文字の記号の先頭になりうる(H/He, C/Cu)ので、瞬時復号可能ではありませんよね。
分身の術は残像なので見えているものはすべてが本物、と読んだことがあります。そういえばラインバッファスプライトの表示能力が足りなくてキャラを一度に表示できないときに、フレームごとに表示する異なるキャラを表示するのでキャラがちらついて見える、というのは懐かしいですね。
正しい返り値の型を線でつなげ{\n}fread・  ・long{\n}read ・  ・size_t{\n}lseek・  ・ssize_t{\n}fseek・  ・void{\n}ftell・  ・off_t{\n}rewind・ ・int
締め切りを厳守したければゆとりが必要であることを定式化した一つの表現として、レートモノトニックスケジューリング(Rate Monotonic Scheduling)は興味深いです。
湯沸かしポットに水を足す条件を、自分がお湯が注ごうとしてお湯が無いと分かった時ではなく、自分がお湯を注いで次の分がないと分かった時にするように、先日教わりました。確かにその方がレイテンシの期待値が短くなりますし、お茶の成分が出るのを待っている間に水を足せばよいのですね。
やめるのだフェネック! テストの成功をOKと書くのはよいが、失敗をNGと報告しないで欲しいのだ! Failedと書かないと通じないのだ! #やめるのだフェネックで学ぶCPP
ソースコードの関数にコメントをたっぷりつける、というのは、"comment a function profusely"というようです。そういう言い回しがあるのですね。
やめるのだフェネック! 静的解析ツールの指摘が、意図的、誤検出だったときに、意図的、誤検出を選択するだけでは不十分なのだ! 第三者に分かるよう理由を書くのだ! #やめるのだフェネックで学ぶCPP
ダブルバッファリングというと難しく聞こえますが、鉄道の相互発着(交互発着)と言えば分かりやすいでしょう。片方向2面のプラットフォームで、一方で発車しながら他方に到着させることです。東海道新幹線は16両と長いので、新横浜などでみることができます。
8086のinc命令はハードウェアで直接実装できるので用意されたのでしょう。しかし一部のフラグしか書き換えないためにその結果を分岐に使うとペナルティが発生するので、今はadd等を使う方がよいと書いてあります(下記16.2.2.9)。{\n}https://software.intel.com/sites/default/files/managed/9e/bc/64-ia-32-architectures-optimization-manual.pdf
やめるのだフェネック! .sファイルのアセンブリマクロをテストできないと諦めないのだ! 単にマクロを展開して、C++のインラインアセンブリからcallすればテストできるのだ! #やめるのだフェネックで学ぶCPP
プログラムで変数の代入先をy=f(x)と左側に書くのは、英語でlet y be f(x)と読めるからでしょうか。HaskellやMLにはletがありますね。
US-ASCIIコードで、制御文字のうちDEL(1111111b)だけが離れているのは、パンチテープ上の削除したいデータを、1行分穴を開けることで削除するためです。この現代版は馬券を購入するためのマークカードで、"取消"をマークすると、消しゴムを使わずに取り消せます。
アライさーん、cppファイルを変更したのにコンパイルエラーが取れないとあわててるけど、Emacsでファイル名の横に**-がついているから、単にファイルを保存してないだけだよー #けものフレンズ
やめるのだフェネック! メンバ関数にYieldという名前は使えないのだ! winbase.hでYieldを「何もしない」マクロと定義しているのだ! 理解不能なエラーメッセージの危機なのだ! #やめるのだフェネックで学ぶCPP
すごーい! 百人一首の決まり字は、コンピュータ以前に発明された、multi level indexなんだね!
5000兆は53ビットあるのでdoubleの仮数部(52ビット)に収まらない、と思いきや、実は仮数部の最上位bitは1であることが暗黙に仮定されているので収まるのでした。9007199254740993円欲しいと言えば精度が足りなくなります。
やめるのだフェネック! 非PODのオブジェクトをmemcpyしてはいけないのだ! vtableへのポインタもコピーされてしまうのだ! 派生クラスのメンバが切り捨てられて不定値に置き換わってしまうのだ! #やめるのだフェネックで学ぶCPP
ソフトウェアの世界でvanillaは追加機能の無いソフトウェアという意味ですが、もしこの概念に日本語が採用されたのであれば、かけ(そば)、もり(そば)、素(うどん)と呼ばれたのでしょうか。
やめるのだフェネック! クラスにoffsetofを取ると警告が出るのだ! Non standard layout型に対してoffsetofを取る意味があるのかよく考えるのだ! #やめるのだフェネックで学ぶCPP
キーボート言えば今どきPCのキーボードを意味しますが、元々は鍵盤だったのでしょう。キーボードは大きさがまちまちですが、もしピアノの大きさがいつもと違ったら、ピアノを弾く人にとってどうなのでしょうね。{\n}http://littlehands782.blog.fc2.com/blog-entry-67.html?sp
やめるのだフェネック! シングルスレッドのアプリはSetProcessAffinityMaskを1に設定すると速くなるかもしれないが、マルチスレッドのときもうっかり1に設定すると1コアしか使ってくれないのでスレッドが並列実行されないのだ。 #やめるのだフェネックで学ぶCPP
C++のムーブセマンティクスという言葉から連想するのは、WindowsのExplorer間でファイルをドラッグ&ドロップすると、異なるドライブまたはネットワークドライブへはコピーに、同じドライブではムーブになることでしょうか。
地図を4色で塗分けられること(四色定理)はコンピュータで解かれました。他方、CPU上で実行するデータフローを、できるだけメモリにアクセスせずに済むように、レジスタを割り当てるのがプログラマで、CPUがその意図を汲んで実行するのがregister renamingです。
破壊的技術の破壊的をdestructive technologyと思っている方はいませんか? ここでの破壊的はdisruptiveです。要するに、初期のデジカメの解像度は銀塩フィルムよりはるかに低かったが、今銀塩フィルムの現像店(DPE)は何軒残っていますか、という意味です。
C++2aの<=>演算子(spaceship operator, three-way comparison)は、C++がRubyの要素を取り入れたかと思いましたが、元々はPerlで定義されていたのですね。元々qsortに渡す関数は3-wayだったので、それから随分経ちましたね。
プログラミングでboxingとは、プリミティブ型の値をクラスのインスタンスに収めることです。国によってはboxing dayという休日があり、これは箱(box)にギフトを詰めて送ることに由来するそうです。
やめるのだフェネック! std::min(set.begin(), set.end()) はsetの最小要素を指すイテレータを返さないのだ! set.begin()とset.end()を比較して、set.begin()を返してくるのだ! #やめるのだフェネックで学ぶCPP
大学の化学実験室にbufferというのがあり、なぜここにバッファが、と思いました。つまりこれは緩衝溶液=酸や塩基を加えたり薄めてもpHがあまり変わらない溶液のことで、これなら大学以前に習いましたが、英語で書いてあると分からないですね。
+演算子はオブジェクトを加算できるフレンズなんだね
やめるのだフェネック! デバッガ上で実行していることはバレているのだ! わざとint3を踏んで、SEHでハンドリングしたかどうか確認しているのだ! #やめるのだフェネックで学ぶCPP
ユースケースが単純なことと設計が単純なことは異なる、「自動販売機にお金を入れてボタンを押したら、商品とお釣りが出る」という情報だけで自動販売機は作れない、と以前聞きました。似たような言葉に、株は安く買って高く売れば儲かる、がありますね。それだけ知っていてもどうにもなりません。
「卵が先か鶏が先か」の答えは分かりませんが、旨いものと辛口の日本酒の相互再帰は、旨いものが先の場合があります。それは客が席につくと、おしぼりとお通しを持ってくる店があるからです。この場合、文脈自由文法の開始記号は旨いものです。
やめるのだフェネック! 海外に渡すコードに、うっかり全角空白みたいな、US-ASCII以外の文字が入るのはまずいのだ! fileコマンドを使うか、ソースコードをRubyで読んでascii_only?で調べるのだ! #やめるのだフェネックで学ぶCPP
やめるのだフェネック! LLVMをビルドするのに、もうconfigureは使えないのだ! cmakeの使い方を覚えるのだ! #やめるのだフェネックで学ぶCPP
Claimは文句ではなく主張という意味ですが、claim(s)と聞くとまず特許の請求項を思い浮かべる人もいると思います。
やめるのだフェネック! 関数の返り値型をautoにしたら、return vec[i]でベクタの要素への参照は返せないのだ! 要素のコピーが値渡しされるのだ! そこはdecltype(auto)が必要なのだ! #やめるのだフェネックで学ぶCPP
Pythonistaはパイソニスタ、Rubyistはルビイスト、Smalltalkerはスモールトーカーと読むはずですが、C++erはそもそも何と発音するのでしょうか? シープラスプラサー、でしょうか。
統計学の教科書に大数の法則の例として、飛行機の乗客の体重を考慮する必要はないことが載っていました。しかしこれはある程度大きい飛行機の場合で、小型機では乗客の体重を測って位置を決め、機体のバランスを取るようですね。
やめるのだフェネック! 組み込み系だからって、即値アドレスをreinterpret_castしてレジスタやメモリにアクセスすると、PC上でユニットテストできないのだ! アクセサ関数を経由するのだ! #やめるのだフェネックで学ぶCPP
空(0byte)のファイルを作る方法には"cat /dev/null > foo"と"touch foo"がありますが、既にファイルがあるときはそのままにするかどうかで、使い分けが必要ですね。
やめるのだフェネック! RDTSC命令で取得したクロックをそのまま乱数に使うのはやめるのだ! 偶数しか出ないとか、4で割った余りがいつも同じとかいう偏りがあるのだ! #やめるのだフェネックで学ぶCPP
乗算が可換でない例の一つは行列ですが、プログラムでも可換でない例があります。Python 3.6.3では "A"*3 も 3*"A" も"AAA"になりますが、Ruby 2.5.0だと前者は"AAA"になりますが後者はエラーになります。
やめるのだフェネック! 自由関数のシグネチャをgrepで集めると、複数行にわたる宣言と定義が途中で切れてしまうのだ! indentとctagsを使うのだ! #やめるのだフェネックで学ぶCPP
水銀体温計が摂氏42度までしかないのは、それ以上の体温に人間が耐えられないからです。CDが52倍速までなのは、それ以上高速回転するとCDが砕け散るからです。{\n}https://www.youtube.com/watch?v=zs7x1Hu29Wc{\n}
「昔は～がなかったんだから我慢しろ」的な物言いを、たまにTLで見かけますが、強いプログラマからは聞きません。料理をする人に対して、電子レンジとオーブンとガスコンロと冷蔵庫は無いけど薪ならあるよ、とは言いませんからね。
C++2aに入るかもしれないtype_identity_t<type_identity_t<...>>を使うと、>をいくらでも重ねられるので、何個重ねられるか試してみました。Windows 10 64-bit g++ 8.1.0だと6651個までコンパイルできました。
Rでスカラー変数にみえるものは、要素が1個のベクトルなので、for (i in n) { print(i) }のnが整数だと、print(n)だけ実行してエラーにはならないのです。Pythonだとnot iterableなのでエラーになります。
今更ながらC# (C Sharp)がドの音を半音上げる、だと気がついたのですが、プログラミング言語C#を作った方が思い浮かべた曲は、どの曲だったのでしょうね。公式見解はともかく、++++を並べるならsharpではなくpoundでよかったのですから。
ピギーバックという用語がありますが、これは朝食を{\n}「トーストとブラックコーヒーを2階で(と言ってSuicaをみせる)」{\n}と注文することで、店員の「ミルクと砂糖はお付けしますか」「1階ですか2階ですか」という質問を省略して、注文のスループットを上げることです。
uint8_tの値をstd::cout にそのまま<<でデバッグ出力して、数が表示されると思ったら文字が出てしまった、というか空白だったとき、strong typedef (opaque alias)が欲しくなりませんか?
大学で教わったこととして、普段から何かしら書き留めておくと長文を書く時の種になる、ということがあります。確かに特許の明細書や図面を再利用すると、書く時間を節約できますので、文章はたくさん書くともっと書けるようになるようです。Rで図を描くコード片を作っておくのもよいでしょう。
テンプレート周りで数百行のエラーメッセージを出すC++コンパイラ「私が何で怒っているか分かる?」
やめるのだフェネック! コンテナの中身をfor文でなめているときに、呼び出し先の関数でコンテナの中身を増減したらイテレータが無効になることがあるのだ! 無効なイテレータにアクセスするのはまずいのだ! プロセスの危機なのだ! #やめるのだフェネックで学ぶCPP
プロジェクトとは独特(unique)で期限があり(temporary)始めてみないと細かいことは分からない(progressive elaboration)と言います。そう思ってデレアニの「シンデレラプロジェクト」を見ると、確かにそうだと納得できるでしょう。 #imas_cg
文字列を結合する方法としては、{\n}+ Pythonなど{\n}. Perl{\n}* Julia{\n}~ D{\n}## Cプリプロセッサ{\n}記号はなくpaste関数 R{\n}と、いろいろあるようです。
やめるのだフェネック! クロスコンパイル環境の開発では、ターゲットでは使えるがホスト(ユニットテスト)では使えないキーワードを、マクロを介して使って欲しいのだ! 直接__forceinlineと書かないで欲しいのだ! #やめるのだフェネックで学ぶCPP
仕事中のプログラマが、ハシビロコウみたく目つきが鋭くて近づき難いのは、そっとしてあげて欲しいのです。じっと動かないのは、複雑なマルチスレッド処理を考えているところなのです。
uint64_tが10進数19桁であることは、std::numeric_limits<uint64_t>::digits10で分かるのです。われわれはかしこいので。constexprで自作して再発明しなくてもよいのです。 #けものフレンズ
最適化と言えば、私はC++コンパイラのようなコードの最適化を思い浮かべましたが、今検索すると数理最適化の話が結構出ます。今までもずっとそうだったのでしょうか。
boost::logic::tribool b = indeterminate;{\n}EXPECT_TRUE(b);{\n}EXPECT_FALSE(b);{\n}は両方とも成立しません。EXPECT_TRUE(!b)がEXPECT_FALSE(b)ですのでそうなりますよね。
どこで読んだか忘れましたが、「結果が正しくなくてもよければ、プログラムはいくらでも速くできる」と書いてあった気がします。社会問題はトレードオフを考慮しなくてよければ、いくらでも単なる好みを主張できる、ということはありませんか?
RGuiで"その他->全てのオブジェクトの消去"を実行すると、ダイアログが出て「本気ですか」と訊かれます。メニューを英語にしたら、"Remove all objects"->"Are you sure?" だったので、「本当によろしいですか」という意味だったのですね。
コンピューターのbootは、ブーツの紐を引っ張り上げて自分自身を持ち上げることに由来すると言われます(諸説あり)。その逆は、高層ビルを建てるためのタワークレーンを、大きなクレーンを解体して小さなクレーンで下ろすことです。{\n}https://www.kajima.co.jp/news/digest/jul_2013/feature/question1/index-j.html
やめるのだフェネック! クラス図のメンバにintとかstringとか書かないで欲しいのだ! ～というデータという抽象を保ってほしいのだ! intやstringで実装するかどうかは後で決めればよいのだ! #やめるのだフェネックで学ぶCPP
プログラマならmockは当然ユニットテストで使うのですが、mockを辞書で引くとあまりいい意味ではないようです。技術用語として使うなら悪くない、というのがプログラマの文化なのでしょう。gitも然りです。
Boost MultiIndexのタグは、struct id{};と書いてありますが、{}なしでも動くのですね。{}を省かなければならない理由は特に思いつきませんが、宣言は複数あってもよいというは何かに使えるのでしょうか。{\n}http://www.boost.org/doc/libs/1_66_0/libs/multi_index/example/basic.cpp
やめるのだフェネック! 関数内で異常が発生したから、それまで確保したメモリやファイルハンドルを解放する処理を、gotoで関数の最後に飛んで行うのはやめるのだ! Cではそれでよいが、C++ではRAIIを使わないと例外安全にならないのだ! #やめるのだフェネックで学ぶCPP
PythonらしいコードがPythonicで、RらしいコードがR-likeなら、C++らしいコードは何と呼べばよいのでしょうか? Modern、でしょうか?
やめるのだフェネック! コンテナの末尾の要素や、末尾の要素を指すものをendと名付けるのはまずいのだ! STLのend()は末尾の次を指すのだ! lastとかに変えて欲しいのだ! #やめるのだフェネックで学ぶCPP
スループットとレイテンシがトレードオフになっている例は、ラッシュ時に急行が走らない、ということです。急行に人が集まり過ぎると乗り降りに時間が掛かりますし、各駅停車を急行から逃がすのは加減速とポイント切り替えに時間が掛かると思われます。
ソースコードを書くのが速いと何がうれしいかというと、短時間でコードを書ければユニットテストを書く時間が生まれて、ユニットテストもテスト対象と同様に速く書けるので、コードの品質が上がるのです。これは相乗効果ですので、生産性が桁違いになるのでしょう。
eXtremeのようにexをXと略すのはよくあることですが、XO (Crystal Oscillator)でCrystalをXと略すのは、ちょっと分かりにくいですね。ちなみにeQuipmentをQと略すと007の道具係です。
アセンブラがasなのに、逆アセンブラがobjdumpなのはどうしてなのでしょう?
Terminator と聞いて最初に思い浮かべるのは、SCSIの終端抵抗のことですよね。Theがつかなければ。
半導体回路には、chip art (または chip graffiti) と呼ばれる、回路とは何の関係もない絵が描かれていることがあります。元々社外秘だったソースコードを公開したときに、コメント文に書かれたジョークも出回ってしまった、ということはあるのでしょうか?
C,Lisp Ruby,Python Assembly R,Haskell これぞ七草
明日から配属される新人さんが最初にすることは、自己紹介のPowerPointテンプレートを入手したら、フォントをメイリオからHGSゴシックM + Segoe UI + Consolas (ソースコード用等幅フォント)に変えることです。
Pythonのselfと異なり、C++のthisはたいていの場合省略できますが、メンバ関数へのポインタが指している関数を、自インスタンスに対して呼び出す (this->*func)() ときは省略できないのですね。
社会保険料は意志に関わらず払わなければならないのだから税金と呼んで欲しい、とたまに聞きますが、公租公課という言葉はご存知ありませんか?
US-ASCIIしか使わない文章で、～の代わりにtilde(U+007E)を使おうとすると、表示で波が真ん中にあったり(Consolas)、上にあったり(IPAゴシック)します。素直にハイフン(-)を使うか、Ruby風に..と書く方がよさそうです。
やめるのだフェネック! トイレットペーパーが2ロールセットされているのを、両方少しずつ使っちゃ嫌なのだ! 両方同時に無くなったら危機なのだ! ダブルバッファリングを思い出すのだ! #やめるのだフェネックで学ぶCPP
仕事が速いことの定義はいろいろありそうですが、与えられた時間の2割で仕事を8割まで仕上げて他の方に見せたら、自分では8割だと思ってた出来が他人から見ると10割を超えていたのでその場で合格してしまった、というのもあると思います。
プログラマが数値計算をしていたところ、浮動小数でアンダーフローを発生させてしまいました。{\n}すると泉からIEEE 754演算器が現れて、こう言いました。{\n}「あなたが求めたい極限値は、正の0ですか、負の0ですか」
やめるのだフェネック! std::shared_ptrのダウンキャストは、getしてdynamic_castじゃないのだ! それじゃ何のために共有しているか分からないのだ! std::dynamic_pointer_castを使うのだ! #やめるのだフェネックで学ぶCPP
バッチと言う言葉から、バッチ処理でもバッチファイルでもなくウィスキー樽を思い出してしまいます。バーやパブで珍しいウィスキーを頼むと、よく瓶にバッチ番号が書いてあります。
あなたこそ、Tracing GCとリフレクションのないフレンズ? めずらしーね! #けものフレンズ
やめるのだフェネック! 同じx86 CPUだからって、64ビットアプリと32ビットアプリで、浮動小数が同じ計算結果を返すと仮定してはだめなのだ! SSEは内部64ビットだが、x87は内部80ビットで計算しているのだ! #やめるのだフェネックで学ぶCPP
Pythonで関数スコープの外にある変数を変更するには、変更する変数をnonlocalと指定する必要があります。Rで同じことをするときは、<<-という演算子かassignを使うのですね。
やめるのだフェネック! __attribute__((always_inline)) は常にインライン展開できるとは限らないのだ! 再帰呼び出しはインライン展開できないのだ! そもそもinlineはヒントであって命令ではないのだ! #やめるのだフェネックで学ぶCPP
ソフトウェア業界でトランザクションと言えば不可分な一連の処理を意味しますが、transactionsと複数形にするとIEEEやACMの論文誌を意味します。
やめるのだフェネック! extern "C"はC「リンケージ」を指定しているのであって、C言語としてコンパイルしろとは言っていないのだ! CとC++の両方でコンパイルされるヘッダファイルなら、両方で通用するコードを書く必要があるのだ! #やめるのだフェネックで学ぶCPP
0は8進数です。
やめるのだフェネック! 関数名を付けるときは辞書をひいて欲しいのだ! 間違った英単語も困るが、ローマ字はもっと困るのだ! #やめるのだフェネックで学ぶCPP
コマンドプロンプトでCtrl+Shift+ホイールマウスを回すと透明度が変わる、というのをTLで見たので、Cygwinコンソールで同じことをしたら文字とウィンドウサイズが両方変わりました。Ctrl+ホイールマウスで文字を大きくして他の方に見せるのはよくやりますよね。
やめるのだフェネック! 確かにC99の機能はC++でも使えることがあるが、restrictはコンパイルエラーになることがあるのだ! 本当にrestrictが必要か考えるのだ! #やめるのだフェネックで学ぶCPP
自然数Nを一進数で表記するとは、Nの数だけ1を並べることです。こういうと奇異に聞こえますが、漢字の一二三やローマ数字のⅠⅡⅢのことです。
やめるのだフェネック! スレッドセーフと再入可能は違うのだ! 複数のスレッドからmallocは呼べるかもしれないが、割り込みハンドラからmallocは呼べないのだ! ヒープ構造の危機なのだ! #やめるのだフェネックで学ぶCPP
オブジェクトをコンストラクタの引数nで初期化する、というユニットテストを書くときにnを二通り以上用意することで、本当に指定したnで初期化したのか、実は引数は反映されていないがたまたまn(特に0や1)で初期化していたのか区別する、というのは大事だと思うのです。
やめるのだフェネック! "the dragon book"はドラゴンのフレンズじゃないのだ! "Compilers: Principles, Techniques, and Tools"の通称なのだ! #やめるのだフェネックで学ぶCPP
Cなどの関数で、引数が異常値ならさっさとreturnすると、その後の処理の見通しがよくなることがあります。ところでループ文をearly continueするという表現は聞かないのですが、その後のインデントが浅くなったり、あわよくば予測分岐が当たりやすくなったりしませんか?
Rの<- (assignment operator)は"gets"と読めるそうです。ではC/C++の->は何と読めばいいのでしょうか? 改めて聞かれるとよく分からないですね。
やめるのだフェネック! ポインタが壊れていることを、デバッガでちゃんと見つけて欲しいのだ! gdbでinfo registersと打つのだ! 上位ビットがカーネル領域に入っていたり、下位ビットのアラインメントがとれていないのは疑わしいのだ! #やめるのだフェネックで学ぶCPP
ソフトウェアの規模を測る方法は、ISO/IEC標準に複数あります。何かを測ることの身近な一例として、アメリカの株式指標には、DJIA, NASDAQ Composite, S&P 500の少なくとも三種類があります。何かを一つの指標で測ることはしばしば困難です。
gitにファイルを追加してcommitしたら、100644という数字が出ました。通常ファイルにパーミッションを設定した、という意味だと思いますが、すごく久しぶりに8進数を見た気がします。
やめるのだフェネック! abs(INT_MIN)は間違った値 INT_MIN を返すが、INT_MIN / -1 はintに収まらないのでCPUがDivide Error例外を出すのだ! プロセスの危機なのだ! #やめるのだフェネックで学ぶCPP
計算量的安全性を持つ暗号とは、暗号を破る膨大なPCを運用するお金があれば、美味しい物が食べられるので暗号を解く気が失せるということですね。もちろん数学的好奇心は、お腹が膨れることより大事だという人はいますが。
やめるのだフェネック! 割り込みハンドラで自動変数のオブジェクトを生成するとき、コンストラクタがnewするのは困るのだ! mallocが再入可能でないとまずいのだ。メンバ変数と他のメンバ関数についても確認するのだ! #やめるのだフェネックで学ぶCPP
タスクスケジューラは何をしているのか、というのは料理をすれば分かります。ご飯を炊いて、味噌汁を煮て、総菜と果物を盛り付けつつ、魚が黒焦げにならなければ、タスクが時間制約を満たしたと言えるでしょう。中の人は久しく料理をしてないようですが。
やめるのだフェネック! 自分で理解できないイディオムを、可読性が低いといちゃもんをつけないで欲しいのだ! 使っている人が理由を正しく説明できるなら、これを機にメンバで知識を共有すればよいのだ! #やめるのだフェネックで学ぶCPP
うちにある洗濯乾燥機のボタンは、洗濯乾燥が終わった時に一度押すとドアロックが解除され、もう一度押しても何も起こらないのですが、これを冪等性というのでしょうか。　
やめるのだフェネック! 配列をループで回すときのインデックスを何でもintにしてはいけないのだ! sizeof(size_t) > sizeof(int)だと4Gあたりで動作がおかしくなることがあるのだ! #やめるのだフェネックで学ぶCPP
ある教科書に、適度な在庫を抱えるためにはどの程度発注するのが最適か求めるタスクがありました。現実だと、売れ残った在庫は数えれば分かりそうですが、売り切れたときの機会損失=在庫が十分あれば本当はどれだけ売れたのかは観測が難しそうですね。
やめるのだフェネック! 固定長配列同士のmemmove/memcmpは、サイズが合っているかどうかstatic_assertを書いて欲しいのだ! 配列のsizeofは配列全体のbyte単位サイズを返してくれるのだ! #やめるのだフェネックで学ぶCPP
GCC6は標準でC++14としてコンパイルするので、C++98で書かれたコードは-std=gnu++98と明示する必要があります。製品コードをユニットテストするときは要注意ですね。{\n}https://gcc.gnu.org/gcc-6/changes.html
やめるのだフェネック! Makefileはデバッグ不能と諦めないのだ! make --dry-runとか、Makefileに$(foreach v, $(.VARIABLES), $(info $(v) = $($(v)))) とか書くのだ! #やめるのだフェネックで学ぶCPP
決まり字の応用例は、地名の絞り込みです。カーナビやJRの券売機から地名や駅名を入力すると、最初の数文字を入力した時点で、残りは入力しなくても画面に全候補を表示してくれます。駅探の電車の時刻表もそうなっています。{\n}http://ekitan.com/
「ではお前たち、定義を見つけてくるのです。不完全型でないのを見つけてくるのですよ。」「宣言だけでコンパイルするのはだめなのか? とりあえず参照はできるって聞いたよ」「メモリを確保するときにサイズが必要なのです。頭を使うのです。」 #けものフレンズ
やめるのだフェネック! std::wstring_convertによるUTF-8/16/32変換は、ちゃんと例外を捕捉するのだ! わざと冗長にUTF-8エンコードした文字列を入力すると、std::range_errorが飛ぶことがあるのだ! #やめるのだフェネックで学ぶCPP
わざと不具合が混入した疑似コードを渡されて問題点を指摘する、という練習問題の攻略法は、非機能です。計算量が多すぎる、保守フェーズで一貫性のある変更が大変、あるコンパイラではたまたま動くが移植すると動かない、などは出題者が気づいていないかもしれません。
「effectiveの意味は何ですか」と訊いて、「新しくプログラミング言語などを勉強しようと思ったときに、入門書の次に読む本についている冠です」と返ってきたら、会話が弾みそうですね。
Daniel Jackson 著 "抽象によるソフトウェア設計 Alloyではじめる形式手法"という本に、"僕は僕のおじいちゃん (I'm my own grandpa)"とはどういう状況かを求める例が載っています。画像検索で答えを見る前に、自力で解いてみると面白いでしょう。
テンプレートメタプログラミングは「Haskellてき」だと思うのです。似たような関数は、いくつかヘッダファイルで目撃されているのです。まずはそれを探すのです。ちゃんと引数が適用可能かどうか、よくみるのですよ。 #けものフレンズ
Windows付属の電卓は、整数の除算を有理数で行っているようです。1を49で割って0.02040816...になったのを49倍すると1に戻ります。同じものを作ろうとすると、Boostで有理数を扱う必要があり、doubleで済ますよりもなかなか大変そうです。
やめるのだフェネック! 巨大なファイルを読んでメモリに展開したら、解析し終わった後に参照を捨てるのだ! 参照を保持したままだとガベージコレクタは回収できないので、次のファイルを読むときメモリが足りなくなるのだ!
専門書に記載されている用語が、日本語だけでなく英語でも書いてあると、変数名を考えるときに悩まなくていいですね。
やめるのだフェネック! 実行ファイルのバイナリサイズを削減するのに、使ってなさそうな関数を探して #if 0 ... #endif を試すのはまわりくどいのだ! LTO(Link Time Optimization)を使うのだ! #やめるのだフェネックで学ぶCPP
Boost Optionalは保持している変数の値*oではなく、oそのものをostream<<oで出力できます。手元では未初期化なら"--"、初期化されていれば" "+値の文字列が出力されましたが、出力される文字列を仕様で規定していません。
やめるのだフェネック! XMMレジスタの値を、素のuint64_t[]に保存してはいけないのだ! 16 bytes アライメントが必要なのだ! 単にreinterpret_castするだけじゃダメなのだ! #やめるのだフェネックで学ぶCPP
C11と聞いて、static_assertが使えるようになったと答える人が情報科学科に、半減期が20分で崩壊モードが二種類あると答える人が化学科に進むのだと思います。
すごーい! Boost Serializationはenumをキャストなしで読み書きできるフレンズなんだね
やめるのだフェネック! x86でNOP命令を「何クロックか待つ」ためには使えないのだ! Z80とは違うのだ! NOPは命令をアラインメントするために使うのだ! #やめるのだフェネックで学ぶCPP
燃えるごみの収集日の朝に掃除して、掃除が終わったらそのままゴミを出しに行けば、集めたゴミと使い終わったクイックルワイパーと台所の臭いものをすぐ捨てられます。プロセスの実行は結果が正しいことと同じくらい、いつ終わって、そのためにはいつから始めるかが重要です。
やめるのだフェネック! 自作assertをマクロでなく関数で書くのに、MyAssert(int cond)にすると、ポインタを渡すとコンパイルエラーになるのだ! boolとかtemplate T&&を検討するのだ! #やめるのだフェネックで学ぶCPP
"Few people can be happy unless they hate some other person, nation, or creed." by Bertrand Russell という言葉があります。ネットの発言を見ていると、このことがよく分かります。
やめるのだフェネック! そこはvolatileではなくstd::atomicが必要なのだ! 競合動作の危機なのだ! #やめるのだフェネックで学ぶCPP
qsortに比較関数を渡せるのは興味深いですよね。Rubyのsortと<=>も好きです。
やめるのだフェネック! 時刻表記のテストケースには、うるう秒も加えるのだ! std::get_timeは"2017-01-01 08:59:60"をちゃんと解析してくれるのだ! #やめるのだフェネックで学ぶCPP
プログラミングと株取引は似ています。自分の行動は相手が何をしているか(いくらで売り買いしたいか)で決まり、どうしてか(今すぐ現金が欲しい)は考慮されません。プログラマがデバッグにどれだけ苦労しても、ユーザがそのソフトを使うかどうかには影響しないのです。
やめるのだフェネック! /usr/binのgccが古いと、新しいLLVMをビルドできないのだ! #やめるのだフェネックで学ぶCPP
pylintで未定義変数を使用していることを見つけられるなら、pythonで if __name__ == "__main__" を実行する前に未定義変数を使用しそうなことを見つけてくれてもよさそうですが、メタプログラミングができるとそうはいかないのでしょうか。
やめるのだフェネック! ヘッダファイルを追加したのに、add-commitし忘れて帰っちゃ嫌なのだ! レポジトリをチェックアウトした他の人に、コンパイルエラーの危機が訪れるのだ! #やめるのだフェネックで学ぶCPP
べき乗則の代表例として、地震の規模-頻度、株価の変動率-頻度があります。さてソフトウェアの修正コストは、開発フェーズを経るごとに倍々に増えると言います。もしソフトウェアの修正コスト-頻度がべき乗則だったら、いつ出荷できるかの予想はかなり困難ではないでしょうか。
やめるのだフェネック! C++98の自作STATIC_ASSERTマクロは、C++11では公式static_assertに置き換えて欲しいのだ! どこでエラーが起きたかは分かっても、なぜ起きたか分かりにくいのだ! #やめるのだフェネックで学ぶCPP
Intel 64 and IA-32 Architectures Software Developer Manuals は4700ページあるので、もはや持ち上げることすらできません。
やめるのだフェネック! std::atomic<int>は明示的に初期化する必要があるのだ! 初期化を忘れてもコンパイラは教えてくれないのだ! #やめるのだフェネックで学ぶCPP
非協力ゲーム理論で個人合理的な行動を、人は必ずしも取らないことは、最後通牒ゲームが示しています。並盛と大盛の値段が同じでも並盛を頼む人は多いでしょう。行きつけの店で大盛を頼んで食べ残すのはバツが悪いですが、もう一度くるかどうか分からない店でも食べられそうな量を注文しますよね。
やめるのだフェネック! キーボードについている#はシャープじゃないのだ! Poundとかhashとかnumberとか読んで欲しいのだ! シャープはU+266Fという別の文字なのだ! #やめるのだフェネックで学ぶCPP
BLTとは、Bacon, Lettuce, Tomatoの略ですが、TLBとはx86のTranslation Lookaside Bufferのことです。要はアドレス変換表のキャッシュです。
やめるのだフェネック! sizeofに型名を入れてはいけないのだ! 変数の型が変わった時オーバランするのだ! sizeof(*pObject)とすれば、ポインタpObjectが指すもののサイズが得られるのだ! #やめるのだフェネックで学ぶCPP
「おトクーポン」や「オトクーポン」がお得なクーポンだと気がつくのに数秒掛かりましたが、つまり瞬時復号可能ではないということですね。
やめるのだフェネック! 出力ファイルストリームのcloseを、いつでもデストラクタ任せにすると、noexceptだからcloseで書き出しに失敗したことを検出できないのだ! ファイルの保存に失敗したことは知りたいのだ! #やめるのだフェネックで学ぶCPP
プログラマの仕事しているところを他人が見ることはまずありませんので、美容院や飲食店のカウンターで仕事振りを眺めるというのはなかなか興味深いものがあります。その手際のよい仕事ぶりを見ていると、こちらもいい仕事しようと、なんだかやる気が湧いてきます。
やめるのだフェネック! ifとかforとか無いただの{}を、無駄だからといって削除してはならないのだ! それはブロックスコープで、変数の有効範囲とデストラクタ呼び出しを規定しているのだ! #やめるのだフェネックで学ぶCPP
C言語のコーディング規約で、C++キーワードを禁止する、というのを私は見たことがありません。ですが、CUnitではなくC++のユニットテストを使うなら、C++キーワードを禁止しないとテストをコンパイルできなくて困ると思います。
やめるのだフェネック! switchに書けるのは整数だけで、switchのcaseに書けるのは整数定数だけなのだ! オブジェクトが==で比較できても書けないのだ! 多段if-elseともRubyのcase-whenとも違うのだ! #やめるのだフェネックで学ぶCPP
ソースコードのcodeは単数形で、codesにすると符号という意味になるようです。しかし野菜はvegetablesで果物はfruitなのはまだわかるのですが、sportとsportsの使い分けが未だにわからないです...
お菓子作りは、作っている途中からは完成形が予想できないのでレシピにきっちり従う、と聞いたことがあります。ですがソフトウェア開発に完璧なレシピを求めてウォータフォールにし、序盤は上手く行っているように見えて後工程で突然壊れたようにみえる、というのは怖いものがあります。
やめるのだフェネック! boost::fusion::vectorの番号付き(vectorN)は、C++11で廃止になるのだ! C++03では型引数が同じでも、番号付きと番号なしでは違う型だから注意が必要なのだ! #やめるのだフェネックで学ぶCPP
"Advertising is the greatest art form of the 20th century" by Marshall McLuhan という言葉があります。21世紀において、広告とは芸術でもあり、データの解析を駆使した技術でもあるでしょう。
やめるのだフェネック! 素の乱数を作るのにXorshiftを引用するのはいいとしても、std::uniform_int_distributionを自作するのはやめるのだ! うまく作らないと結果に偏りが出てしまうが、簡単には気づかないのだ! #やめるのだフェネックで学ぶCPP
apt-getがネットワーク周りでうまくいかないときは頭を冷やして、sudoでHTTP proxyが正しく設定されているかどうか確認するのがよいと思います。
やめるのだフェネック! UML図の各要素の名前は、統一性のあるきちんとした英語でつけて欲しいのだ! 統一性のない用語や、間違った英単語を使うと、それがそのままコードになってしまうのだ! コーディングを始めてから語彙を統一するのは無理なのだ! #やめるのだフェネックで学ぶCPP
新しく雇ったプログラマに対する教育というものが、一般的にどういうものかという事情は知らないのですが、知的財産権に対する教育というのはどれくらいされているのでしょうか。オープンソースライセンスとか特許権について、最近は大学でどれくらい教えているのでしょうか?
#はハッシュタグですが、#の後はコメントだから突っ込まないで、という意味で使う人がいるようです。これはニュースグループのジョークに由来するような気がしますが、正確なことを思い出せません。「#の後は実行されない」ことは、スクリプトを書かない人には見当がつきませんよね。
Stableという単語は、ソフトウェアでは安定版という意味ですが、物理や化学ではstable isotope : 安定同位体があります。半減期(half life)に時間ではなくstableと書いてあります。
Virtualという言葉が人口に膾炙して久しいですが、今も現役なvirtualといえば80386(Intel386)のvirtual-8086 modeでしょう。デビュー33年です。
やめるのだフェネック! #include文のファイル名は、大文字と小文字を間違えちゃ嫌なのだ! Windowsでは問題なくても、Linuxではファイルがインクルードできないと言われてしまうのだ! #やめるのだフェネックで学ぶCPP
TCPで受信ポートを開いて受信した文字列を表示する、というプログラミングの練習で、動作確認にクライアントが必要なので何にしようかと思いましたが、Webブラウザから、http://localhost:port/ にアクセスするのが一番簡単だと気がつきました。
なるっち「srcの最右のビット1を取り出す? "ハッカーのたのしみ"にあったわ! src & -src; ね」{\n}ねねっち「ASMならもっと短くなるんじゃない?」{\n}blsi dst, src{\n}なるっち「・・・!」
やめるのだフェネック! 「みんながインクルードしているヘッダファイルの定義を書き足したらフルビルド」を避けるのだ! 宣言と定義を分離するのだ! enum classの前方宣言を活用するのだ! #やめるのだフェネックで学ぶCPP
JavaとJavaScriptは○○と～くらい違う、というのはときどき流れてくる定番ネタですが、チェリストとチエリストくらい違う、というのはまだ聞きませんね。JavaScriptにはchopもchompもないそうですが。
コンピュータは人間と違って疲れないといいますが、コンピュータを相手にするもう一つのよいところは下手でも笑われないことです。英語の質問を正しい文法ときちんした語彙で行うのは難しいですが、思いついた単語を並べてググるとStack Overflowの回答が見つかります。
文字列が空かどうかを調べるのに、str.empty()とstr.length()==0のどちらを選ぶかは迷うところです。ところでRで空文字列の長さを取得すると1が返るのはびっくりしませんか?{\n}s <- ''{\n}length(s){\n}[1] 1{\n}s == ''{\n}[1] TRUE
やめるのだフェネック! 返り値がdecltype(auto)のときにreturn (v);すると、ローカル変数vへの参照を返すのだ! 括弧が余計なのだ! 未定義動作の危機なのだ! #やめるのだフェネックで学ぶCPP
最尤推定は最も尤もらしい推定ですが、英語ではmaximum likelihoodですね
やめるのだフェネック! 固定アドレスの格納先を、uint32_tとかuint64_tとか書くのは嫌なのだ! そこはuintptr_tを使うのだ! #やめるのだフェネックで学ぶCPP
100種類の元素の無限の組み合わせはアセンブリ言語のようなもので、化学の諸法則はデザインパターンに似ていると思いませんか?
やめるのだフェネック! C++キャストは確かに字面が長いが、だからって横着してCキャストにすると、ポインタのconstが剥がれても気がつかないのだ! #やめるのだフェネックで学ぶCPP
「他分野」と入力するためにtabunnyaとキーボードを打って、nが一個抜けたので、「たぶにゃ」と変換されました。なんかカワイイですが、nを「ん」にするか後続のカナと関連付けるかは、辞書を引いて自動判定するのではないのですか? 本厚木もnが抜けるとダメみたいですし。
やめるのだフェネック! PythonのexceptやRubyのrescueで、例外の種類を指定しないのはまずいのだ! 関数や変数の名前が間違っているときのNameErrorやNoMethodErrorまで握りつぶすので、デバッグが大変になるのだ!
同じ量が異なる単位で表記されることがあれば単位を確認しようという気になりますが(カロリー/ジュールなど)、同じ名前の単位でも量が違うことがあります。ビール1パイントの容量はアメリカとイギリスで異なりますし、6畳と言われても畳の大きさは異なります。
全/半二重通信はあまり聞かなくなりましたが、鉄道の世界では全二重の容量は半二重の二倍ではないのです。単線の容量は閉塞区間を往復する時間で決まりますが、複線の容量は続行運転の間隔で決まるので二倍よりはるかに多いのです。量の違いが質の違いを生むのです。
Communications of the acm (CACM) の"LAST BYTE"というのは、最後の一口(last bite)と掛けているのですよね。ちなみにfirst biteは結婚披露宴の演出だそうです。{\n}https://cacm.acm.org/magazines/2018/8
やめるのだフェネック! std::vector<T>.data()で得られるポインタは、ベクタの要素を増減すると無効になることがあるのだ! 関数の返り値にするなんてもってのほかなのだ! Segmentation faultの危機なのだ! #やめるのだフェネックで学ぶCPP
数学が何の役に立つのかと問われたら、素因数分解が困難だから、ネットでクレジットカード番号を送ってお買い物ができるとお答えしたいです。
ソースコードのコメントに書く英語は、下記の通りであってますか?{\n}- 関数/変数が～するなら三人称単数{\n}- 関数/変数が～であるなら、can, needed by等{\n}- プログラマが～するなら命令形 : notice that等{\n}- いずれでもないときは、主語を置いた文章
やめるのだフェネック! コメントに「この変数は符号なしのはず」とか書いて済ませてはいけないのだ! static_assert(std::is_unsigned)を書くのだ! #やめるのだフェネックで学ぶCPP
Dataがdatumの複数形なら、複数のデータは何と書くのか悩みますが、data setsと書けばよさそうです。
やめるのだフェネック! vtableを実行時に書き換えて「オープンクラス」みたいにはできないのだ! vtableはread-onlyセクションに置かれているのだ! 書き換えようとするとSegmentation faultで落ちてしまうのだ! #やめるのだフェネックで学ぶCPP
シグモイド曲線が薬の用量と作用や、努力と結果の形に似ているなら、ReLU(rectified linear unit)は金融オプション取引の儲けの形でしょうか?{\n}http://www.nli-research.co.jp/report/detail/id=54756?site=nli
やめるのだフェネック! long longからIEEE 754 doubleへの変換は暗黙に行われるが、精度が落ちることがあるのだ! 仮数部は52ビットしかないから足りないのだ! #やめるのだフェネックで学ぶCPP
boost::optional は、返り値が得られないことを例外なしで教えてくれるフレンズなんだね
やめるのだフェネック! enumを何でもintにキャストしてはいけないのだ! std::underlying_typeを使うのだ! intで収まらないことだってあるのだ! #やめるのだフェネックで学ぶCPP
英語に"prohibitively slow"という言い回しがあります。要するに、処理が完了するのを待っていられないほど長い時間が掛かるということですが、うまい和訳を思いつきません。
布団を圧縮するのは、空気を抜いてかさを減らすことであって、はみ出した部分を切り取って捨てることではない、と読んだことがあります。これは非可逆圧縮の説明なのですが、ある分野の人が違和感を感じる、分野外の方への用語解説も、そういうことなのだと思います。
やめるのだフェネック! 問題を"problem"と報告したら、相手に「お前のせいで困っている」と言っているようで怒らせてしまうのだ! 取り組むべき課題は"issue"と訳すのだ! #やめるのだフェネックで学ぶCPP
Null object pattern は、if (pointer) を省いて見通しをよくするパターンなんだね! /dev/null のフレンズなんだね!
計算グラフ(Computational Graph)というとなんだか固い言い回しに聞こえますが、Makefileの生成規則を手書きするのと同様ですよね。
やめるのだフェネック! テンプレートマッチングをstd::is_pointerだけで済ましてはいけないのだ! 配列T(&)[SIZE]とstd::is_null_pointerに対するマッチングも必要なのだ! #やめるのだフェネックで学ぶCPP
Stanは、公式ドキュメントによるとmodeling languageであり、probabilistic programming languageとも書いてあります。非公式キャラができたら「すたんたん」と呼ばれるのでしょうか。{\n}http://mc-stan.org/users/documentation/
やめるのだフェネック! マクロに複数の文を入れるときは、do { ... } while(0) で囲むのだ! そうしないと、if文の直後でそのマクロを使ったときに、予想外の動作をすることがあるのだ! #やめるのだフェネックで学ぶCPP
英語を勉強していて、電話会議はteleconferenceと習ったので、telework(ing)の意味もすんなり分かりました。ところで私が実際に参加した電話会議の案内にはCCとあり、何かと思ったらconference callの略でした。
やめるのだフェネック! /usr/binのツールが古かったり、/usr/libのライブラリが足りなかったりすると、新しいGCCをビルドできないのだ! 服を買いに行く服がないのは困るのだ! #やめるのだフェネックで学ぶCPP
プログラマの三大美徳にlazinessがあり、これは怠惰と訳すようですが、無精とは訳さないようです。既存ライブラリを探す手間を無精して省いたために車輪の再発明をしてしまう、というのは確かに避けたいですね。
アセンブリ言語があれば実質どんなプログラムでも組めるという意見に対抗して、PostScriptはチューリング完全なので実質どんな文書も書けるというのを思いつきました。なおExcelは方眼紙ではないと思います。
旧製品から引き継いだコードに対して、コンパイラのバージョンを上げると警告が増えるので上げたくない、という話を聞いたことがあります。それはコードの警告の出る箇所を直すべきではないでしょうか。それに最近のコンパイラは、コンソール上で警告に色がつくので見やすいですよ。
随分前ですが「それは象と鯨とどっちが強いか比べるようなもんだ」と言われたことがあります。例えば、忙しいときにIDEやテキストエディタの優劣について話し掛けられたら、こう言ってさっさと仕事に戻るのがよろしいかと思います。
相互再帰の最も有名な例は、「旨い物を食べると辛口の菊正宗を飲みたくなる、菊正宗を飲むと旨い物が食べたくなる」だと思います。{\n}http://www.kikumasamune.co.jp/profile/
512-bits ZMMレジスタは、これ1本でZ80の全レジスタ(裏レジスタ含む)よりビット数が多いなあと思ってしまいました。
"Life is a comedy to those who think and a tragedy for those who feel." by Horace Walpole という言葉は、まさにプログラマがプログラミングに熱中する理由なのではないでしょうか
よいソフトウェアテストと何か、というのはそれだけで本1冊分になりますが、「テストは何物理行当たり1件作る」ではありませんよね。
やめるのだフェネック! コンパイラの警告を無視した箇所を、静的解析ツールに指摘されるのはやめるのだ! コンパイラが数秒で教えてくれることを、翌朝に教わるのは開発効率が低すぎるのだ! #やめるのだフェネックで学ぶCPP
ねねっち「そうだ、なるっちのHaskellのコードなんだけど、ここポイントフリースタイルを使えばもっと短くなるんじゃない?」{\n}なるっち「・・・!」
やめるのだフェネック! 仮想関数呼び出しが常にvtableアクセスを伴うとは限らないのだ! 具象型がコンパイル時に分かるときはそのメンバ関数を直接呼び出すのだ(devirtualization)! #やめるのだフェネックで学ぶCPP
C文字列"ab"を並べると合わせて一つの文字列になります。Boost.Program_optionsの長いオプション名をNAMEと#defineしておくと、add_options()(NAME",t"), vm.count(NAME), vm[NAME].as<T>と書けます。
std::ios_base::ate は「食べた」ではなく、at endの略です。食べないでくださーい! #けものフレンズ
やめるのだフェネック! C++11なら、解放して欲しいオブジェクトは、生ポインタでなくstd::unique_ptrを返すことを検討するのだ! 生ポインタは所有権を渡さないという意志を示したいのだ! (なのでRustのmoveとborrowが欲しいのです)
プログラマの面接を行うことになった面接官が、Rubyプログラマに尋ねた。{\n}「2+2はいくつになりますか?」{\n}Rubyプログラマは小声で尋ねた。{\n}「2+2をいくつにしたいんです?」{\n}面接官は答えた。{\n}「5です」{\n}class Fixnum{\n}  def +(x) 5 end{\n}end
やめるのだフェネック! snprintf(dst,N,"%s")でdstにN文字ちょうど書き込もうとすると最後はNUL終端されるが、strncpy(dst,,N)のときはdstがNUL終端されないのだ! バッファオーバランの危機なのだ! #やめるのだフェネックで学ぶCPP
Rustには無限ループを明示的に行うloopがあります。while trueではなくloopとコンパイラに伝える方がよいそうです。Rもrepeatで無限ループができますね。
やめるのだフェネック! 「どんな型の関数へのポインタでも入る物」として、void*を使うのはやめるのだ! データへのポインタとコードへのポインタは互換ではないのだ! #やめるのだフェネックで学ぶCPP
「動的片付け言語」とは、オブジェクトを明示的に解放しなくても、メモリが足りなくなったら要らないオブジェクトを処理系が片付けてくれる言語のことですか? というのは冗談で、正しい用語はautomatic memory managementです。
やめるのだフェネック! 空の構造体がたくさんあるからって、typedefで全部まとめて一つにするのはやめるのだ! それらはBoost.MultiIndexのタグなのだ! #やめるのだフェネックで学ぶCPP
すごーい! NVI idiom は、公開インタフェースのmutexを基底クラスで一元的に行って、派生クラスでmutexし忘れるのを防いでくれるんだね!
やめるのだフェネック! make cleanするときに、.dを作ってすぐ消すのは時間の無駄なのだ! ifneq ($(MAKECMDGOALS),clean) で.dを作らないようにするのだ! #やめるのだフェネックで学ぶCPP{\n}https://www.gnu.org/software/make/manual/html_node/Goals.html
Bashスクリプトを、テキストエディタのデフォルト設定通りにCRLF改行で保存して、"rm foo"で"fooCR"というファイルを削除しようとして失敗したことはありませんか。
やめるのだフェネック! 関数への参照は、&をつけるのとつけないのと使い分けるのだ! テンプレートマッチングに失敗することがあるのだ! #やめるのだフェネックで学ぶCPP
かつて数学の時間に、組み合わせ爆発の例として「人類が俳句を作りきることはない、いろは48文字の17乗は膨大だ」とありました。さてランダムな17文字が日本語として意味をなす確率はどれくらいでしょうか。ちなみに天和をあがる確率は33万分の1だそうです。
やめるのだフェネック! __builtin_popcountの引数はunsigned intなのだ! long long intを渡すときは__builtin_popcountllなのだ! #やめるのだフェネックで学ぶCPP
CPUへの割り込みは、古典的な教科書では電話に出ること例えられます。なるほどそれはそうですが、ITSとVCSの時代にプログラマが電話で何か訊かれることもないと思うので、もっと現代的なたとえはないでしょうか。
IEEE doubleの指数部は、1023が0を意味するように下駄を履かせています。「下駄を履かせる」の元の英語は、biased exponentらしいです。ちなみにある数のdoubleがどういうビット列になっているか見るには、gdbでx/8bxするのがお手軽です。
やめるのだフェネック! /* Local Variables: c-file-style: "stroustrup" */ を理解できないからって消さないで欲しいのだ! それはEmacs上でソースコードを整形するのに必要なのだ! #やめるのだフェネックで学ぶCPP
私がMOESI(Modified, Owned, Exclusive, Shared and Invalid)プロトコルを知ったとき、まだ萌えという言葉は一般的ではありませんでした。
発表用スライドを白黒で印刷すると、グラフの要素を色で塗り分けていても、それぞれの色の濃さが似たり寄ったりで区別できなくなることがあります。斜線や網点や点線の種類(solid, dashed)で区別すると、印刷したとき区別しやすくなりますね。
Boost MPL (Metaprogramming Library)? フレンズの技だよ! #けものフレンズ
やめるのだフェネック! 自分の.cから他人の.cにある変数を使いたいからといって、自分の.cにexternを足さないで欲しいのだ! 宣言がint* aで、定義がint[] aだと、a[0]が落ちるのだ! ODR違反とカプセル化の危機なのだ! #やめるのだフェネックで学ぶCPP
Emacsで文章を編集していて、仮名漢字変換の途中に突然Bingの検索画面が出るのが謎でした。仮名漢字変換の途中にctrl-bを押すとそうなることが分かりましたが、いつからこの機能が加わったのでしょう?
やめるのだフェネック! 入力ファイルと出力ファイルが同一ではないことを、確認するのを忘れちゃ嫌なのだ! cat < foo.txt > foo.txt すると、foo.txt が空になってしまうのだ!
Rustがシステムプログラミング言語だと分かるのは、std::sync::atomic::Ordering::SeqCst(C++のstd::memory_order_seq_cst)があることだと思います。メモリモデルをプログラマが指定する言語は、他にありましたっけ?
コマンドラインからPCの設定を行い、その手順をまとめるとき、正しいコマンドと要らないコマンドを後から整理するのは意外と大変です。作業しながらメモを取るのも、シェルのhistoryから拾うのも手間が掛かります。ペアを組んで、一人は作業一人はメモに徹するのがよいのでしょうか。
やめるのだフェネック! memsetが常にmemset関数呼び出しになるとは限らないのだ! clangは短い固定長領域については、mov命令で済ませることがあるのだ! #やめるのだフェネックで学ぶCPP
国際情報オリンピックはIOIと略します。IOL(言語学)もこの語順ですが、なぜか他(IMO,IPhO,IChO,IBO,IAO,IESO,iGeo,IPO/数学,物理,化学,生物,天文,地学,地理,哲学)と語順が異なります。
あなた、動的型付けあんまり好きじゃないけものなんだね! #けものフレンズ
やめるのだフェネック! 引数としてconst T* pを渡すと、ポインタpが指すオブジェクトはimmutableとして扱われるが、deleteはできるのだ! deleteされたくなければ、デストラクタを非publicにするのだ! #やめるのだフェネックで学ぶCPP
C/C++ポインタ{\n}「参照」{\n}「Nullable(optional)」{\n}「イテレータ」{\n}「指定サイズのメモリ確保」{\n}「Memory mapped I/Oアクセス」{\n}「Reinterpret cast」{\n}「引数が指すものが不変」{\n}もう全部あいつ一人でいいんじゃないかな
やめるのだフェネック! int64_t v = 1 << 32; はint64_tではなくintをシフトしているのだ! 0x100000000ではなく0が入るかもしれないのだ! int64_tの変数に代入してから<<=でシフトするのだ! #やめるのだフェネックで学ぶCPP
"move forward"というのは文字通り前進という意味ですが、std::move std::forward と言えば、個人的には Effective Modern C++ で一番理解が大変な部分だと思います。
仮想アドレス: Virtual address{\n}仮装アドレス: IP Masquerade{\n}下層アドレス: MAC address{\n}貸そうアドレス: DHCP server{\n}過走アドレス: Buffer overrun
ネットの検索で記号は無視されることがありますが(単にStar!!と入れても先頭にデレマスの曲は出ない)、C++とim@sは理解してもらえるようです。検索頻度と使用頻度の高い単語は、記号が含まれていても記号込みで単語として認識する、という検索システムの柔軟性があるのですね。
AMD/Intel 64の64-bit modeモードではBCD命令(decimal arithmetic instructions)が使えません。8086が出た頃にBCD命令をどう使っていたのか知らないのですが、当時は重宝したのでしょうか。
やめるのだフェネック! シーケンス図で複合フラグメントを駆使して、いろんな状態を一つの図にまとめるのはやめるのだ! 状態遷移図とアクションを使えばすっきり描けるかもしれないのだ! #やめるのだフェネックで学ぶCPP
Pythonで{\n}print(list(range(1,10))){\n}range = 1{\n}r = range(1,10){\n}> [1, ...{\n}> TypeError: 'int' object is not callable{\n}このrangeへの代入自体はエラーにならないのですね。
ソフトウェア開発の最初の一歩として、旅に出てホテルで館詰になって全体像を考える、というのを過去やってみたのですが、私にはあっているようです。この場合の「かんづめ」は、缶詰ではなく館詰が正しいそうです。もちろん一日頭を使ったら、美味しいものを食べるのです。
やめるのだフェネック! グローバル変数のコンストラクタから、別のグローバル変数のインスタンス関数を安易に呼び出してはいけないのだ! グローバル変数の初期化順序はコンパイラが決めるから、呼び出し先は未初期化かもしれないのだ! #やめるのだフェネックで学ぶCPP
フランス語のアクサン記号を含む単語を、PDFからEmacsにコピペすると、記号とアクサン記号が一体になったものと、別々に分かれたものと、二通りになるようです。UnicodeのNFCとNFDの違いからきているようですね。
プログラミングに熱中していると、食べるのがめんどくさいことってありませんか? われわれはジャパリまんのような、調理せずに食べられる完全食が欲しいのです。われわれはかしこいので。 #けものフレンズ
上流設計で館詰になるとき、ホテルやその所在地を選ぶ条件は、あまり熱心に探さなくても美味しいものがみつかりそうだ、ということです。国鉄のダイヤグラム作成が温泉旅館だったのは、一か所に大人数を収容することと、食事の都合だったのでしょう。
やめるのだフェネック! sizeof(4)は、"size_t型の4"という定数ではなく、"int型の4"のbyte数なのだ! alignof(4)とalignas(4)も区別するのだ! #やめるのだフェネックで学ぶCPP
CVといえば、声優さんでも履歴書(curriculum vitae)でもなく、cv-qualifierを思い出すのがC++erです。
やめるのだフェネック! 関数の動作を #ifdef COLOR ～ #endif で切り替えると、COLOURと打ったときに～が除外されてしまうのだ! if constexprならコンパイラが綴りの違いを見つけてくれるのだ! #やめるのだフェネックで学ぶCPP
diffやWinMergeは空白を無視して2つのファイルを比較できます。何に使えるかというと、間違った字下げや行末の空白以外は直していないことを確認するのに使えるのです。文字列リテラルの空白の違いはもちろん無視できませんが。
可逆圧縮を、布団圧縮袋に例えるのを読んだことがあります。その例えで言えば、フリーズドライのインスタントコーヒーも、濃縮還元ジュースも、乾燥わかめを水に浸して戻すのも、可逆圧縮と伸長ですね。
テキストエディタで、Pythonのコードを複数行切り取ってループの中に移動したり、Redmineにはり付けるためにインデントを減らすときに、インデントの深さが元と変わってしまって、コードの意味が変わったことはありませんか?
やめるのだフェネック! 短時間で終わる処理の時間測定に、外れ値を入れちゃ嫌なのだ! WindowsやLinuxはマルチタスクOSだから、測定対象以外のプロセスに時間を取られることがあるのだ! #やめるのだフェネックで学ぶCPP
プログラミングや設計、テストに掛かる時間は、一つ一つの作業については予想より長かったり短かったりするが、週単位でみれば大数の法則に基づいて予想に近くなるのだと思います。だとすれば毎日の労働時間を固定すると、却って作業効率が下がるのではないでしょうか。
チップのピン配置にI行がないのは1列と混同するのを避けるためだと思われます。さてワシントンDCの通りも南北が番号、東西が文字ですが、J streetはありません。理由は諸説ありますが、昔はIとJが分かれていなかったかららしいです。BVLGARIも同様ですね。
既に公開しているインタフェースに対して、構造体への参照で渡すパラメータを後から増やしたいことがあります。構造体のバージョンをメンバに含めておくのが一つの方法ですが、秀逸な方法はWindows APIのように、構造体の先頭メンバを構造体のサイズにしておくというものです。
プロジェクトでC言語しか使わないのにC++を学ぶのは、C++ではすんなりできるのにCでは別の方法が必要か、もしくはCではできないことが何か認識するためです。同様のことがC++とRustの関係に言えそうです。仕事道具だけ学んでも、仕事のスキルは頭打ちになりますよね。
V&Vとはビクトリーバイビクトリーの略、ではなくて、Verification: 作った料理が不味かった、Validation: 料理が美味しいかどうかはさておき注文されたものではなかった、ということであってますか。
やめるのだフェネック! pragmaで警告を抑止してよいのは、コードレビューで承認されてからなのだ! -Wall -Werror は必須なのだ! #やめるのだフェネックで学ぶCPP
やめるのだフェネック! 手元の開発作業とGitHubへのリリース作業の両方の画面を開くと、どれがどれだか分からなくなるのだ! VirtuaWinとか使って作業画面を分けるのだ! #やめるのだフェネックで学ぶCPP
ロックは取得したら解放するものですが、NumLockを解放する状況というのは私にはないので、勝手に外れることなくずっと掛かっていて欲しくありませんか?
やめるのだフェネック! abi::__cxa_demangleが返したオブジェクトは捨てちゃいけないのだ! freeしないとメモリリークするのだ! 誰がメモリを解放するか、仕様を確認するのだ! #やめるのだフェネックで学ぶCPP
「プログラムは思った通りには動かない、書いた通りに動く」という格言がありますが、ガベージコレクション(というよりTracing GCによる自動メモリ管理)も「ユーザが要らないと思ったオブジェクトではなく、参照されてないオブジェクトを回収する」のです。
やめるのだフェネック! 関数名のtoを2と書いたり、forを4と書いたりするのはやめるのだ! コーディング規約は守ってほしいのだ! ソースコードをgrepする人のことも考えて欲しいのだ! #やめるのだフェネックで学ぶCPP
Compromiseという単語は妥協という意味ですが、RFCなどでは、セキュリティを侵害するという意味で使うことがあります。辞書を引けば分かることですが、専門用語というのはしばしばそうと見抜けないことがあります。
やめるのだフェネック! x86で、intを一度に32ビット以上シフトするのはやめるのだ! REX.Wがないときのシフト回数は有効桁数が5ビットしかないのだ! そもそもC++でNビット整数を一度にNビット以上シフトした結果は未定義なのだ! #やめるのだフェネックで学ぶCPP
Workaroundという言葉は、ソフトウェア開発以外でどれくらい使われるのでしょうか?
やめるのだフェネック! 引数の"size"が、個数なのかbyte単位のサイズなのかword単位のサイズなのか分からないのは困るのだ! 区別できるような名前をつけて欲しいのだ! そもそも1 wordって何byteか分からないのだ! #やめるのだフェネックで学ぶCPP
やめるのだフェネック! メモ帳からUTF-8で保存したテキストファイルにはbyte order mark (BOM)がつくが、std::regexはBOMを3文字として扱うのだ! /^Word/は先頭行だけ一致しないのだ! #やめるのだフェネックで学ぶCPP
Macro Fusionとは、「我々がInstructions Per Clockを満足できるまで頑張るのです」
Makefileの再帰展開変数と単純展開変数は、例を示されればその違いが分かるのですが、概念としてうまく説明する方法はないでしょうか。関数型言語でいうところの、遅延評価が前者、代入が後者だと思えば合っていそうですが。
新人プログラマにメンター(mentor)をつける企業はたくさんあると思いますが、メンターに指導される人を何と呼ぶかは、日本語ではあまり聞きません。私は「めんたいこ」だと聞きました。後でわかったことですがこれは冗談で、本当はmenteeです。
やめるのだフェネック! 変数をどこで使っているかgrepして目視するのは見落としが多いのだ! 変数名を変えてコンパイルして、エラーをあぶり出すのだ! でも変数名をお試しで変えたコードをcommitしちゃ嫌なのだ! #やめるのだフェネックで学ぶCPP
やめるのだフェネック! 今プログラマに話しかけてはダメなのだ! プログラムのタスク切り替えは一瞬でも、プログラマのタスク切り替えは20分掛かるのだ! #やめるのだフェネックで学ぶCPP{\n}http://www.bbc.com/capital/story/20170105-open-offices-are-damaging-our-memories
MinGW-w64 + g++ 7.3.0でnearとfarという変数名がコンパイルエラーになりました。DOSの時代のコンパイラ拡張が、64-bitの時代にも残っている、ということでしょうか。{\n}http://www.cplusplus.com/forum/general/12435/
やめるのだフェネック! #defineで再帰呼び出しはできないのだ! テンプレートメタプログラミングを使うのだ! #やめるのだフェネックで学ぶCPP
思いついたことをテキストファイルに書き留めたが、どのファイルだか忘れてしまったので探そう、というときはコマンドラインが使えると便利ですね。{\n}find . -type f -name "*.txt" -mtime -14 | xargs grep regex
やめるのだフェネック! テキストエディタのフォントはデフォルトではなく、{I,l,1,|}, {0,O}の区別がつきやすいフォントを使うのだ! NTEmacsなら、Consolas + Migu 1Mとか使うのだ! #やめるのだフェネックで学ぶCPP
技術文書で主語を明確にするのは当たり前ですが、特許の請求項というものは権利化可能な範囲で請求範囲を広げるので、どれだけ一般化するかということを自覚して書くのです。世の中主語が大きすぎる文章を頻繁に見ますが、おそらくそういう訓練が足りないのでしょう。
やめるのだフェネック! C++で「関数っぽいマクロ」を作ったらダメなのだ! function_traitsで返り値や引数の型を取得できないのだ! #やめるのだフェネックで学ぶCPP
BYODはBYOBからきたそうです。日本でホームパーティーはあまり聞きませんが、古くから実践しているBYODは銭湯でしょう。なお私の行きつけのホテルは、客室のタオルを近所の温泉に持ち出してよく、その温泉の割引入場券も売っています。
Singletonで検索するとデザインパターンが出ますが、Singletonで画像検索するとウィスキーが出ます。美味しいですよ。
C++のstd::vectorにargmin(最小値を取る要素のインデックス)はあったかなと思ったのですが、std::min_elementで取得したイテレータiから、要素番号をstd::distance(v.begin(), i)で取得すればいいのですね。
template <typename T> T f() {return T();}は、Tがvoidならvoidを返します。返り値が無いことをvoidを返すというと何となく妙ですが、「事なきを得る」というのは普通のいい方ですよね。
やめるのだフェネック! 再帰による探索だけでは計算量が多すぎて解が求まらないことがあるのだ! そこは動的計画法を使うのだ! #やめるのだフェネックで学ぶCPP
やめるのだフェネック! ドキュメントがなくてもソースコード見れば分かる、ってそんな訳ないのだ! スレッドセーフとか再入不可とか計算量とか性能についてソースコードからは読み取れないのだ! #やめるのだフェネックで学ぶCPP
高校で学んでおけば後で役に立つことを、いらないと早合点して学ばなかったために後で大変になる状況を、プログラマには"premature optimization is the root of all evil"(早すぎる最適化は諸悪の根源)と言えば通じると思います。
やめるのだフェネック! メールクライアントにメールが届いたときに、ポップアップを出してはいけないのだ! プレゼンテーションの最中に届いたメールがさらされて恥ずかしいことになるのだ!
テキストファイルの数行だけ数字を,で区切るのに、スクリプトを書く必要はないのだ! Emacsのキーボードマクロで書けるのだ!{\n}C-x ( M-f , C-a C-n C-x ) C-u C-x e{\n}アライさんにお任せなのだ!
やめるのだフェネック! Google Testなどサードパーティーのヘッダファイルは、-Iではなく-isystemでインクルードするのだ! そうしないと対処不能な警告が出て、-Werrorだとビルドが止まってしまうことがあるのだ! #やめるのだフェネックで学ぶCPP
randと言えば(あまり質が良くないかもしれない)乱数生成器ですが、RANDライセンスはreasonable and non-discriminatoryの略です。
やめるのだフェネック! 実行時に任意の正規表現を入力として受け取るのはやめるのだ! 複雑な正規表現を食わされて落ちる(ReDoS)ことがあるのだ! #やめるのだフェネックで学ぶCPP
プログラマがコンソールやテキストエディタを半透明にしているのは、ウィンドウの裏にある調べ物を見ながら入力するためです。その機能を開発した人は、壁紙をいつでも見られるようにしたかったのだと思いますが。
Python 3.7でasyncがキーワードになったそうです。C++11のfinalとoverrideは特定の場所でしかキーワードにならないので、(メンバ)変数名や関数名に使えます。ですのでauto override = final.override();をコンパイルできます。
やめるのだフェネック! switch-caseがいつも多段if-elsifになるとは限らないのだ! clangはcaseが多いときにルックアップテーブルを作ってジャンプするのだ! #やめるのだフェネックで学ぶCPP
やめるのだフェネック! コードにstd::cinを直書きしてはいけないのだ! ユニットテストでキー入力するのは大変なのだ! テストケースではistringstreamを作って、std::istreamへの参照を渡すのだ! #やめるのだフェネックで学ぶCPP
Hexspeakの最上位ビットが1で、下位2ビットが00b以外なのは、これを有効なポインタとは解釈できなさそうということを暗示するためでしょうか。x86でカーネル領域に入っていたり、x64でcanonicalでないアドレスは確かに変です。
石油を精製するときに副産物として出る硫黄で硫黄の需要をまかなえるので、硫黄鉱山が要らなくなってしまったそうです。副産物と言えば、PCサーバの排熱は再利用されているのでしょうか。
やめるのだフェネック! C++とCで共用するヘッダファイルで、構造体の内部構造体名はすべての構造体で一意でなければならないのだ! そうでないとCでは構造体を再定義しましたとエラーになるのだ! そもそも内部構造体をやめれば済むのだ! #やめるのだフェネックで学ぶCPP
むかし音ゲーで遊んでいたとき、連打するところでタイミングがずれて一気にゲージが減って、ゲームオーバーになってしまいました。ミス=各音符に対するタイミングのずれであって、まとめてちょっとずれた=編集距離ではないようですね。
C++の掟は、自分の力でメモリ管理すること。自分のオブジェクトは、自分で解放するんですのよ。ガベージコレクタ任せじゃダメよ。
大学では何を専攻するにしても、統計学を学ぶことになると思います。私の頃はRをインストールしたノートPCを持ち歩く、ということはなかったので、電卓を使って課題を解いていました。今はPCが無いと課題を解くのが大変な気がしますが、実際どうなのでしょうか。
JITコンパイラのよいところとして、ビルドしたプロセッサではなく、実行しているプロセッサに対して最適化できる、ということがあるのですね。AVX-512は使ったことがないのです。
やめるのだフェネック! ラムダ式の型をtypeid().name()で取得しようとするのは無駄なのだ! それはコンパイラが一意なものを決めるのだ! #やめるのだフェネックで学ぶCPP
やめるのだフェネック! #if (sizeof(uintptr_t) > 4) とは書けないのだ! if constexpr (sizeof(uintptr_t) > 4)が使えるならそう書くのだ! #やめるのだフェネックで学ぶCPP
やめるのだフェネック! Google Testのユニットテストに共通の初期化は、setupでもsetUpでもなくSetUpなのだ! overrideをつければコンパイラが間違いに気づいてくれるのだ! #やめるのだフェネックで学ぶCPP
やめるのだフェネック! memsetを使ってbyte単位以外の値でメモリを埋めるのは無理なのだ! std::fillを使うのだ! #やめるのだフェネックで学ぶCPP
やめるのだフェネック! 手作業で、段落を整形して一行の長さをそろえるのは大変なのだ! EmacsならM-q一発なのだ! (setq-default fill-column 70)で長さを変えられるのだ! #やめるのだフェネックで学ぶCPP
やめるのだフェネック! boost::anyオブジェクトにchar*型の値を入れたとき、 boost::any_cast<const char *> で取り出すのはやめるのだ! boost::bad_any_cast の危機なのだ! #やめるのだフェネックで学ぶCPP
単にMNISTというと、手書き数字の画像とその画像がどの数字か、というデータセット(the MNIST database of handwritten digits)を指すようですが、MNISTのNISTは実は団体名です。USBメモリをUSBと略すようなものでしょうか。
ライブラリを活用するのです。普通のプログラマが再発明したものより、理解容易性や信頼性や性能がはるかにすぐれているのです。美味しいものを食べてこその人生なのです。
スマホで音楽を再生していて、再生位置をちょっとだけスライドして早送り/巻戻しするのは大変だが、大きく左右に振るとちょっとだけ早送り/巻戻しできる、という現象は、なんと説明すればよいのでしょう。超解像度でしょうか。
録音が高精細度/高忠実度であることをhigh-resやhigh-defと言いますが、それ以前からhi-fiという言葉があります。Hi-fiのfiがfidelityの略だと知ったのは、Fidelityという証券会社があることを知ってからです。
x86のFMULが浮動小数乗算でIMULが符号あり整数乗算なら、符号無し整数乗算はUMULと思いきやMUL/MULXなのです。しかもMULは掛ける数と結果のレジスタが固定[A,(D:)A]、MULXは掛ける数がR(E)DX固定、IMULはいろいろだったりします。
"Disneyland will never be completed. It will continue to grow (以下略)" by Walt Disney という言葉があります。これをもじって、ソフトウェアは「完成」しない、アップグレードし続けるとも聞きます。
ソフトウェア業界ではInternationalizationをi18nと略すことがあります。その要領なら、日本一長い駅名の元祖である長者ヶ浜潮騒はまなす公園前駅は、"長11前"とか"ち20え"とか"C31E"と呼ばれているのでしょうか。
コマンドプロンプトのディレクトリの区切り記号(0x5c)がバックスラッシュではなく円記号だと、別にお金の話をしている訳でもないのになぜ円記号なのだろうと思いますが、bashのプロンプトが$が終わっていても金額を入れる気にはならないのは不思議ですね。
Windowsファイルサーバに、名前が#で始まったり~で終わったりするファイルがあると、編集した人が使っているテキストエディタがうかがい知れますね。それよりGitでバージョン管理して、.gitignoreを適切に書く方が幸せになれるでしょう。
やめるのだフェネック! C++にfinally節やensure節はないのだ! リソースリークの防止にはRAIIを使うのだ! #やめるのだフェネックで学ぶCPP
やめるのだフェネック! 公開するヘッダファイルに、実装にだけ必要な宣言や定義も書いて「全部入り」にしちゃいけないのだ! 他のプログラマがドキュメントに無い「隠し機能」だと思って使ってしまうのだ! 保守の危機なのだ! #やめるのだフェネックで学ぶCPP
ソースコードを変更するより一から書き直すという誘惑は強いですが、書き直すと新たな不具合が混入するので、一から書き直すのは避けたいですね。この状況を一語で示す表現はないでしょうか。
やめるのだフェネック! CRC計算を自作する必要はないのだ! Boost CRC Libraryがあるのだ! #やめるのだフェネックで学ぶCPP
やめるのだフェネック! __PRETTY_FUNCTION__ を「かわいい」関数名と訳さないのだ! それは「見た目がきれい」な関数名なのだ! #やめるのだフェネックで学ぶCPP
私がアルゴリズムという言葉を知ったのは大学に行ってからですが、最初に出会ったアルゴリズムらしきものは大判時刻表です。列車の乗り換えを決めるのは、目的地の到着時刻を決め打ちして出発地に向かう方が、出発地からたどるよりずっと簡単だ、というのは何という名前のアルゴリズムでしょうか?
AMラジオをつけっぱなしにしておくと、雷が鳴るとノイズが入るので、雷探知機になるそうです。プログラムが暴走して、CPU負荷が100%に張り付いたり、物理メモリを使いきってスラッシングしたことを検出するのに、音楽再生が途切れることで判断するのは有効でしょうか?
コンパイル中にファイルを開こうとして、WindowsのExplorerからEmacsにファイルをドラッグ・アンド・ドロップしたら、その間に.oが増えたので違うファイルを選んで開いてしまったときの気持ちを、140字以内で述べて下さい。
やめるのだフェネック! シンボル名やコメントを一括置換するときは、置換元を狭く限定して、過剰に置換していないかちゃんと確認するのだ! バをヴァに置き換えるだけだと、カヴァンになってしまうのだ! #やめるのだフェネックで学ぶCPP
SFINAEとは、「へーき、へーき! テンプレートによってマッチングできる型違うから!」
曽野綾子著 "無名碑" に、ダム建設について「僕の仕事は一生どんなにいい仕事をしても個人の名前は残らない」とあります。だからこそプログラマにとって、G. Pascal Zachary著 "Showstopper!"(山岡洋一訳 "闘うプログラマー") は重要だと思うのです。
Rのベクトルの、先頭要素は1番、つまりインデックスは1始まりです。C言語の影響か否か、配列は0番から始まるというのに慣れていましたが、そうでない言語もあるのですね。
簡潔なコミットログの書き方は、BBC Newsのヘッダラインから学ぶとよいと思います。50文字以内で言いたいことが伝わるのです。
0/1-basedといえば、午前12時と午後12時がいつか分からなくなるのですが、分かりやすい覚え方はないでしょうか? 00分ちょうどなら正午(noon)、midnightと書けば済むのですが...
やめるのだフェネック! T時間当たり1回起きる不具合を、T時間起きなかったといって、直ったと断言するのはやめるのだ! T時間経っても起きない確率は{1/自然対数の底=37%}あるのだ! #やめるのだフェネックで学ぶCPP
全加算器はcarry look-aheadを用いることで遅延を減らせます。ちなみに自宅で配達を待っているときに、車のドアを開閉する音が聞こえてきたらドアに向かうと、荷物を受け取るまでの遅延を減らせます。
「小さな家の窓」という言葉は、家が小さいのか窓が小さいのか曖昧です。ところで、高速増殖炉(fast breeder reactor)を「高速に増殖する」炉だと思っている方はいませんか?
日本語には何でもカナ4文字に略すという習慣があります。50の4乗は6250000しかありませんから、国内の全Twitterユーザがそれぞれランダムに思い浮かべた4文字略語に、その略語の意味を与えてツイートすると、一日経たずに略語集が網羅できるかもしれません。
やめるのだフェネック! Googleの看板"{first 10-digit prime found in consecutive digits of e}.com"を解くのに、エラトステネスの篩を自作するのはイケてないのだ! ミラー・ラビン素数判定法を使うのだ。
やめるのだフェネック! XMMレジスタを収める配列を確保するのに、reinterpret_castを使ってアラインメントし直すのはめんどくさいのだ! std::aligned_storageを使えば済むのだ! #やめるのだフェネックで学ぶCPP
RGuiやrstudioを使うと、Rスクリプトを使ってデータを描画するのを色々試すことができますが、このとき以前に設定した変数や読み込んだライブラリがそのまま残っています。リリース前にRscriptで実行して、変数やライブラリがまっさらな状態から動作確認するのがよさそうです。
プロレスのカウントは1,2,3という整数だけではなく、2.9, 2.99という小数があると聞きます。TeXのバージョンが、小数点以下が伸びて円周率に近づいていくのと似たようなものかもしれません。
やめるのだフェネック! x64 ABIで、asmコードからCの関数を呼び出すときは、rspレジスタを16 bytes境界に合わせないといけないのだ! そうしないと、C++ライブラリの中で突然異常終了することがあるのだ! #やめるのだフェネックで学ぶCPP
Hyper-Threadingとは、「パイプライン資源の狩りごっこだね! 負けないんだから!」
スクリプト言語の複数行を、#if 0 ... #endif みたいに、一時的に無効化したくなることはありませんか?
やめるのだフェネック! #include "../detail/foo.h"と、横断するパスを書かないで欲しいのだ! それは実装部のヘッダだから他モジュールには公開しないのだ! インクルードパスはヘッダファイルの公開範囲を規定しているのだ! #やめるのだフェネックで学ぶCPP
やめるのだフェネック! do {...} while(0)はループ実行のオーバヘッドが掛かるから無駄とか言っちゃいけないのだ! 今どきのコンパイラは最適化でこのループを取り除くのだ! アセンブリコードを出力して確認するのだ! #やめるのだフェネックで学ぶCPP
x86のレジスタ間転送命令はmovですが、よく考えたらmoveしても転送元のデータが無くなるわけではありませんね。8086と違って今のx86はregister renamingしているので、転送という概念が当てはまるかどうかも分かりませんが。
RFC 793 (TCP)の"2.10. Robustness Principle"に、いわゆるポステルの法則があります。レジスタやファイル形式の予約ビットは、読むときは無視し書くときは0にする、という約束事が一般化されたのでしょう。
Rは変数名に.(dot, period)を使えるのですね。Unixのファイル名に含まれる.(dot)には特別な意味はない、つまりファイルシステム自体には拡張子という概念がない、というのを思い出しました。
やめるのだフェネック! 単に速い処理をリアルタイムと呼んじゃ嫌なのだ! リアルタイムシステムとは、結果の正しさが内容だけでなく、締め切りに間に合ったかどうかにも依存するシステムなのだ! #やめるのだフェネックで学ぶCPP
やめるのだフェネック! 二つのオブジェクトが「同じ」と言われても、同値(same)なのか同一(identical)なのか曖昧なのだ! はっきり書くのだ! #やめるのだフェネックで学ぶCPP
やめるのだフェネック! 「printfを入れたら動いた」とか言っちゃダメなのだ! それはprintfをまたぐ最適化が抑止されたから、volatileではない変数を読みに行くようになっただけなのだ! 忘れずにvolatileをつけるのだ! #やめるのだフェネックで学ぶCPP
やめるのだフェネック! 割り込みやシグナルやcondition variableは、それらの待ちに入る前に通知される場合に対処する必要があるのだ! そうでないと無限待ちになってしまうことがあるのだ! #やめるのだフェネックで学ぶCPP
GitHubのpull requestがpush requestでないのは、「部屋に入ってもいいですか」が"May I come in?"だと考えれば分かると思います。
やめるのだフェネック! 行の先頭の//に続くコメントを、正規表現/^(.*)\/\/\s*(.*)/で探すと、//が複数あるときに後ろの//にマッチしてしまうのだ。Reluctantな評価/^(.*?)\/\/\s*(.*)/にするのだ! #やめるのだフェネックで学ぶCPP
やめるのだフェネック! ビットフィールドのアラインメントに隙間のビット数を指定したダミーのメンバを加えると、他のメンバのビット数が変わった時にダミーを変え忘れてメンバのレイアウトがずれてしまうのだ! 無名でサイズ0のフィールドを使うのだ! #やめるのだフェネックで学ぶCPP
読むのが難しい文章をそもそも読める必要があるのか、という方は一度特許明細書と、特に請求項を読んでみたらいかがでしょうか。特許に比べれば、学術論文は理解して引用して頂くように、はるかに読みやすく書かれていると思います。
ドキュメントをサーバの共有フォルダで管理すると、うっかり手が滑ってエクスプローラーの操作を誤ったとき、ファイルを意図せずどこかのフォルダに移動して行方不明になりませんか。プログラマ以外も、ドキュメント管理をgitに移行した方がよいと思います。
何かまずいことが起きたことの原因を、ヒューマンエラーと分類することがあります。しかし技術や工学は、自然現象を人間にとって都合よく利用することですので、ヒューマンが絡まないということはありえず、従ってヒューマンエラーとは説明を放棄したトートロジーにみえます。
やめるのだフェネック! 任意精度実数の「任意」に相当する形容詞は、anyではないのだ! arbitraryなのだ! 単語を間違えると、検索で引っかからないのだ! #やめるのだフェネックで学ぶCPP
やめるのだフェネック! 32bitレジスタマシンで、64bitリアルタイムクロックを読むのに、単に下位32bit-上位32bitと読むと、時刻が逆転することがあるのだ! 上位bitが一致するまで読み直すのだ! #やめるのだフェネックで学ぶCPP
Mutexと言えば鉄道の閉塞信号機があります。列車が物理的に、同時に同じ場所に存在しなければ衝突しないという原理だと思います。もう一つの使用例として、瀬戸大橋(を構成する一つ一つの橋)に入る列車を同時2列車までに制限することで、橋の耐荷重を超えないことがあります。
やめるのだフェネック! プロジェクトの、暦年第一週をてきとーに決めないで欲しいのだ! 例えばISO 8601(一週間は月曜始まり、暦年の第一週=第一木曜日を含む週)にして欲しいのだ! #やめるのだフェネックで学ぶCPP
ソースコードのコメントを書いていて、分散が入った変数は非負でなければならないという回りくどい文章を、variance must not be negativeと訳してから、一般に分散=0ではないのでmust be positiveと書けばよいのか、と思ったことはありませんか?
ファンクションキーの使い道で真っ先に思いつくのは、Visual Studioでステップ実行することです。他の使い道ですが、Emacsでファンクションキーを押すと、背景色が変わったり、半透明になってブラウザの画面が読めるように設定しています。
昼休みに食事に行くためにエレベーターに乗ろうとすると、上層階の人ですでに一杯なので乗れないことがあります。上層階まで行かないで途中で折り返すと中層階の人も乗れますが、その分上層階で待つ人が増えます。上手いstarvation-freeアルゴリズムはあるでしょうか?
Rose-crowned fruit dove (Ptili‐nopus regina)は、Effective Modern C++が得意なフレンズなんだね
Rのggplot2で色を指定するときは、colorでもcolourでもどちらでも指定できますよ。
やめるのだフェネック! ユニットテストのassert_equalに、expectedとactualのどちらを先に書くかは、テストを書く前に確認するのだ! Google TestとCppUnitは期待値が先だが、CUnitは後なのだ! #やめるのだフェネックで学ぶCPP
ある駐車場には、曜日と時間帯によって最大料金が設定されていたり、なかったりします。数式ならmin(駐車時間*時間単価,最大料金)ですが、最大料金はN/Aのときがあります。これをお好みのプログラミング言語で書くとどうなるでしょうか。Rならmin(na.omit())ですかね。
やめるのだフェネック! 10/11/2019は10月11日だか11月10日だか分からないのだ! Oct. 11, 2019と表示して欲しいのだ! それと、JuneとJulyは略さなくてよいのだ! #やめるのだフェネックで学ぶCPP
やめるのだフェネック! Google Testの結果を取り出せるのは、テストが完走したときだけなのだ! 途中でsegmentation faultで落ちたときは、出力が途中で切れているのだ! Exit statusを確認するのだ! #やめるのだフェネックで学ぶCPP
やめるのだフェネック! pthread_cond_waitを直接使うと、spurious wakeup対策が必要なのだ! std::condition_variable::waitを述語付きで使うのだ! #やめるのだフェネックで学ぶCPP
やめるのだフェネック! .cppから.dファイルを作るときに、自動生成する予定のファイルが見つからない、とエラーが出るのは困るのだ! -MGオプションが必要なのだ! #やめるのだフェネックで学ぶCPP
やめるのだフェネック! 複数行のコードをとりあえずコメントアウトするのに/* */を使うと、/* */が入れ子になっておかしくなることがあるのだ! #if 0 - #endifにして欲しいのだ! #やめるのだフェネックで学ぶCPP
技術レビューとは、書いてある内容が正しいことを確認するより、書いていないことに対してその場合はどうなる(what if)と指摘することに意味があるので、他人が明言していないことに過剰反応するのはむしろ適性があるのですが、日常生活では生きづらくはありますね。
やめるのだフェネック! autoは便利だが万能ではないのだ! std::atomic<int> aから値を取り出すのに、auto v=aとは書けないのだ! atomicをコピーしようとして失敗するのだ! 型かload()が必要なのだ! #やめるのだフェネックで学ぶCPP
ソースコードのコメントが日本語だと、日本語圏以外の方がソースコードを編集できなくなるような気がしますが、コメントは英語に限るというコーディング規約はどれくらいの割合で適用されているのでしょうか。そう思って個人的には、最近は他人にお見せするコードを原則英文コメントにしています。
プレゼンテーションの練習では、スライドを最後列から読めることと、聴衆の方を向くことを指導されます。ですが実際には、読めないほど細かい字で作った資料を朗読する人がいます。スライドを禁止したら、聴衆の方を向いて、伝える価値のあることを理解させることに注力して頂けるでしょうか?
やめるのだフェネック! 「変数が使われていない」という警告が出たからと言って、その変数定義を消すのはちょっと待つのだ! コンパイラは似たような変数と取り違えていないかを、指摘しているのかもしれないのだ! #やめるのだフェネックで学ぶCPP
やめるのだフェネック! 複数行マクロを入れる do {...} while(0); の;は余計なのだ! マクロを展開する場所で、直後にelseを置くとコンパイルエラーになるから;を取り除くのだ! #やめるのだフェネックで学ぶCPP
ACIDに対するBASEは酸に対する塩基というシャレですが、世の中にはatomicでない商取引があります。ホテルの予約は、複数の予約サイト、電話、受付で直接とさまざまな方法がありますが、結局(Eventually)泊まれるか断られるかに落ち着きますよね。
やめるのだフェネック! -flto オプションはすべてのソースコードのコンパイルとリンカにつけるのだ! -fltoをつけたりつけなかったりすると、リンクエラーになることがあるのだ! #やめるのだフェネックで学ぶCPP
締め切りドリブン=締め切りが最も早い仕事から着手することの問題点は、仕事を仕上げるまでの時間が正確に見積もれていないと締め切りに間に合わないことですね。仕事の総時間が見積れる程度まで軽く進めるのが合理的だと思いますが、これは何ドリブンと言うのでしょうか。リスクドリブンですか?
C言語の配列の添え字は、0から始まりN-1で終わるのでright-openな区間[0,N)です。一方で、Rubyのrangeつまり1..NやRの1:Nは、両端を含む閉区間[1,N]です。添え字が0始まりか1始まりか以外にも違いがあるのですね。
ヒープに置けないオブジェクトの例としては、RAIIを使った割り込み禁止/許可があると思います。解放忘れ=許可し忘れはまずいでしょうし、メンバ用のメモリを確保する必要はありませんので、自動変数にしてブロックスコープと割り込み禁止区間を一致させるのがよいでしょう。
やめるのだフェネック! 短絡評価の||を「または」と読むのは嫌なのだ! 「さもなくば」と読んで欲しいのだ! &&は「だったら」「なので」と読むのだ! #やめるのだフェネックで学ぶCPP
MLからMeta Languageというプログラミング言語を思い浮かべる人は少ないかと思いますが、Standard MLはメーリングリストより早くからありますよね。
テンプレートのコンパイルには時間を使うのです。われわれはかしこいので。 #けものフレンズ
私が現代文を苦手としていた理由は今も分からないのですが、作者が書いていないことを推測して解答したからという疑いがあります(要出典)。しかし書いてないことを推測するのは、コードや論文を読む上では必須です。どちらも読者にとって完全な情報が書いてある訳ではありませんので。
一万時間の法則の真偽は私には分かりません。ところで、学生時代に一万時間費やせることの延長が職業になり、なおかつ多くの雇用があるという点で、プログラミング以外にはどのようなものがあるのでしょうね。
g++ -E -H foo.cpp{\n}「この#include連鎖はいつまで続くのですか」{\n}「二百、三百、な、何ファイル入ってくるのですか、博士」{\n}「お、多いのです、C++とはこんなにたくさんのヘッダファイルで行動するのですか、助手」{\n}「ここで何が始まるのですか」{\n}#けものフレンズ
「ユニーク」という言葉は独特という意味で、しばしば特別という含意があります。ですが、数学が得意な方とプログラマにとって"unique"は一意ではあるが別に特別という含意はありませんよね。英語としてはどちらも正しいようです。{\n}https://en.oxforddictionaries.com/definition/unique
やめるのだフェネック! CとC++で共用するヘッダファイルで、空の構造体のサイズが異なることがあるのだ! gccは0 byteでg++は1 byteなのだ! そもそもCで空の構造体は作れないのだ! #やめるのだフェネックで学ぶCPP
1 == 2の証明というのがありますが、slim chanceもfat chanceも起きる可能性がほとんどないことを指すので、 slim == fat なのだと思います。
やめるのだフェネック! ヘッダファイルで定義した定数を書き換えるたびにフルビルドが走るのは嫌なのだ! 定数伝搬するつもりがなければ、宣言だけ公開して定義は.cppに入れておけば、定数を変えてもその.cppだけリコンパイルすれば済むのだ! #やめるのだフェネックで学ぶCPP
CRTPは静的ポリモーフィズムを実現するフレンズなんだね!
パラレルATAは、シリアルATAに対するretronymです。Snow skiingという言葉はまず聞きませんが、waterやgrassに対するretronymでしょう。ちなみにそりはsledと言いますが、プログラマにとってスレッドにはthreadとNOP sledがあります。
符号化につられて復号を「復号化」と書いてしまうのと、連想配列のことを思わずハッシュと呼んでしまうのは、気を付けたいですね。
クラステンプレートのインスタンスを作るfactoryメソッドに、いちいち型引数<T>を書きたくないですか? 自由関数テンプレートにすれば、型引数を省略してもコンパイラが推論します。楽をするためにはどんな苦労も厭わないのがプログラマなのです。
やめるのだフェネック! その日はアメリカは祝日なのだ! 一日早くリリースしないと相手は受け取れないのだ!
C++の無名名前空間は、unnamed namespaceであってanonymous namespaceではなさそうですが、ときどき間違えそうになりますね。
やめるのだフェネック! そのboost::regexをstd::regexに置き換えるのはやめるのだ! std::regexは再帰正規表現をまだサポートしていないのだ! #やめるのだフェネックで学ぶCPP
stderrにメッセージが出力されるかどうかテストするのに、流れるコンソール画面を凝視するのは論外ですね。Pythonなら出力先を実行時に渡すようにして、本番はwarnings.warn, テストはwarnか__call__でメッセージを受け取るモックを渡すのがよいでしょうか。
正規分布のパラメータを指定するとき、Stanでは標準偏差=sigmaを指定しますが、JAGSでは精度tau=1/sigma^2を指定します。マニュアルを読まないと間違えますね。
繁盛している立ち飲み屋では、来店したお客さんに空いているテーブルやカウンターを割り当てて案内し、そのあと客の要望があればちょうど人数が収まる場所に移動できることがあります。もちろんテーブルを移っても会計は引き継がれるので、ページ割り当てと同じですね。
やめるのだフェネック! 条件演算子 (expr) ? t : f よりif-elseの方が分かりやすいとか言わないで欲しいのだ! それはconditional move命令に変換することで、分岐予測が外れるペナルティを避ける必要があったのだ! #やめるのだフェネックで学ぶCPP
やめるのだフェネック! 何もしないデストラクタを{}と定義するのは嫌なのだ! =defaultを使うのだ! 理由はEffective Modern C++ 項目17に書いてあるのだ! #やめるのだフェネックで学ぶCPP
C言語の同一配列の各要素(最終要素の一つ先を含む)について、それらを指すポインタの差を定義できる(ptrdiff_t)。しかしNULLであるかどうかは比較できてもNULLとの前後関係は定義しえない、というのは意味として妥当でしょう。{\n}http://en.cppreference.com/w/cpp/language/operator_comparison
プログラミング言語Juliaのロゴは以下のレポジトリにありますが、非公式キャラとして「Juliaたん」が含まれています。「たん」は英語の敬称として通じるのでしょうか。{\n}https://github.com/JuliaGraphics/julia-logo-graphics
やめるのだフェネック! do { ... } while(--i >= 0) は、iが符号なし整数だと永久に終わらないのだ! プロセスの危機なのだ! #やめるのだフェネックで学ぶCPP
メール破産(email bankruptcy)という言葉があります。要するに長期休暇明けに処理不能なほど大量なメールがあったら、すべて消して再送されるのを待つのです。ITSとワークフローシステムが正しく運用されている組織なら大丈夫ですよね。
うるう年の規則が、400年周期より長い周期(細い精度)になったらプログラミングが大変だと思いましたが、そもそもそれだけの精度は出せないようです。そもそもうるう秒を気にしているか、というのもありますし。{\n}http://eco.mtk.nao.ac.jp/koyomi/wiki/B5A8C0E12FB5A8C0E1A4CEA4E1A4B0A4EAA4CEBCFEB4FC.html
やめるのだフェネック! デバッグprintfを#ifdef - #endifすると、うっかりリリースビルドで消し忘れて変なコンソール出力が出てしまうのだ! プロジェクト規定のDEBUG_PRINTFマクロを使って、デバッグ時だけ出力するのだ! #やめるのだフェネックで学ぶCPP
プロジェクトのクリティカルパスがどこかは、よく考えないと分からないことがあります。東海道新幹線が開通するためのクリティカルパスは、おそらくは時速200キロで走る列車を開発することではなく、新丹那トンネルを掘ることだったでしょう。
やめるのだフェネック! size_tのビット数が分からないからといって、printfの書式指定に%luと書くのは嫌なのだ! %zuと書くのだ! #やめるのだフェネックで学ぶCPP
長さが等しい横三本棒(三みたいなもの)のアイコンを何と呼ぶのか分からなかったのですが、ハンバーガーアイコンと呼ぶそうです。GitHubのPinned repositoriesも、このアイコンを使って並べ替えられます。
やめるのだフェネック! プロセッサのstore命令は、そのプロセッサの論理スレッドからみた順序は正しくても、バスや他のプロセッサからも同じ書き込み順序に見えるとは限らないのだ! Memory fenceが必要な場合があるのだ! #やめるのだフェネックで学ぶCPP
やめるのだフェネック! 全角半角と半角空白を文章に混ぜてステガノグラフィを名乗るのはよくないのだ! 見た目からして怪しいのだ! #やめるのだフェネックで学ぶCPP
"Everything but the kitchen sink"とは一切合切という意味のイディオムです。一切合切が入っているC++を理解できれば、そこからの類推で他のプログラミング言語は学習できそうな気がします。問題は、C++を理解できる日が、私には来そうもないことです。
