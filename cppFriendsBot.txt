クラス図のメンバにintとかstringとか書かないで欲しいのです。年齢とか名前とか、～というデータという抽象を保って欲しいのですよ。intやstringで実装するかどうかは後で決めればよいのですから。
単位の順序が気になる方は英語を学ぶとよいでしょう。"Buy 3 get 1 free"(三つ買うと一つタダ)には単位が明示されていませんが、この言に沿えば"Buy one carton of milk, and if they have eggs, get 6." を(eggs) ? 6 : 1と解釈して牛乳を6本買うことも分かるのです。
PDCAサイクルとは、Program-Debug-Commit-Announce、つまりコードを書いてデバッグして公開したら、ツイッターで通知することです。
自然数Nを一進数で表記するとは、Nの数だけ1を並べることです。こういうと奇異に聞こえますが、漢字の一二三やローマ数字のⅠⅡⅢのことです。
pragmaで警告を抑止してよいのは、コードレビューで承認されてからです。勝手にコンパイラを黙らせるのはやめましょう。
燃えるごみの収集日の朝に掃除して、掃除が終わったらそのままゴミを出しに行けば、集めたゴミと使い終わったクイックルワイパーと台所の臭いものをすぐ捨てられます。プロセスの実行は結果が正しいことと同じくらい、いつ終わって、そのためにはいつから始めるかが重要です。
ソフトウェアは形が無いから把握するのが難しい、という言葉は最近聞かなくなりました。よくよく考えたら、高校の理科や社会で習うことで「目に見えるもの」はそれほどなくて、ほとんどは「概念を理解すること」ですよね。紙幣を見ることはできても「お金」を見ることはできませんよね。
(eggs)?6:1 と同様、プログラマなら分かる有名なジョークに"While you're out, buy some milk."があります(検索すると複数出てきます)。これを「外出したついでに牛乳を買ってきて」と訳せなかった人は、お金が尽きて例外を送出するまで家に帰れないでしょう。\nwhile(out) { buy(milk); }
L1距離のことをマンハッタン距離とも言いますが、碁盤の目のような街並みと言えば、長安も京都もワシントンD.C.もそうですよね。マンハッタンが代表的な地名として選ばれたのは、なぜでしょうか。
ドキュメントをサーバの共有フォルダで管理すると、うっかり手が滑ってエクスプローラーの操作を誤ったとき、ファイルを意図せずどこかのフォルダに移動して行方不明になりませんか。プログラマ以外も、ドキュメント管理をgitに移行した方がよいと思います。
「どんな型の関数へのポインタでも入る物」として、void*を使うのはよくありませんね。データへのポインタとコードへのポインタは互換ではないですから。
人間の感覚が対数に比例することが分かるのは、～は選べる組み合わせが何億通り、と聞いたときでしょうか。
Strict aliasing rule警告の意味が分からないからって、無視するのはやめましょう。正しく直すのですよ。
録音が高精細度/高忠実度であることをhigh-resやhigh-defと言いますが、それ以前からhi-fiという言葉があります。Hi-fiのfiがfidelityの略だと知ったのは、Fidelityという証券会社があることを知ってからです。
年齢不詳のときに、0歳を返すのは論外だが、だからって-1歳を返すのも避けたいです。C++ならstd::optional に入れて欲しいです。
Rの <- (assignment operator)は"gets"と読めるそうです。ではC/C++の->は何と読めばいいのでしょうか? 改めて聞かれるとよく分からないですね。
簡潔なコミットログの書き方は、BBC Newsのヘッダラインから学ぶとよいと思います。50文字以内で言いたいことが伝わるのです。それに対してYahoo! JAPANのニュースは、何を言っているのかさっぱり分からないことがあるのはなぜでしょう?
abi::__cxa_demangleが返したオブジェクトを捨ててはなりません。freeしないとメモリリークします。
テキストエディタで、Pythonのコードを複数行切り取ってループの中に移動したり、Redmineにはり付けるためにインデントを減らすときに、インデントの深さが元と変わってしまって、コードの意味が変わったことはありませんか?
海外に渡すコードに、うっかり全角空白みたいな、US-ASCII以外の文字が入っていると、現地で良くないことが起きそうです。fileコマンドを使うか、ソースコードをRubyで読んでascii_only?で調べると、US-ASCII以外の文字が入っているかどうか分かるでしょう。
人は何かを危険だというがどう危険なのかは深く考えないことがある、という例としてDHMOが有名です。ところで「中島らもの明るい悩み相談室」の「じゃがいもを焼いて味噌をつけて食べる」件は、行動経済学のケーススタディとしてよいと思うのですが、海外では知られているのでしょうか?
単純置換暗号は、一文字の単語がaで、出現頻度の高い三文字の単語がtheに対応する、暗号のような何かです。
なるっち「srcの最右のビット1を取り出す? "ハッカーのたのしみ"にあったわ! src & -src; ね」\nねねっち「ASMならもっと短くなるんじゃない?」\nblsi dst, src\nなるっち「・・・!」
プログラマにとってスケーラビリティとは、一人の腕前でこなせることに手順書は要らないかもしれないが、大人数が連携するためにはプロセスが必須になることです。犬小屋を作ることと高層ビルを建てることの違い、と教わります。紙飛行機を飛ばすことと飛行機を飛ばすことの違いとも言えます。
MinGW-w64 + g++ 7.3.0でnearとfarという変数名がコンパイルエラーになりました。DOSの時代のコンパイラ拡張が、64-bitの時代にも残っている、ということでしょうか。
「プログラムは思った通りには動かない、書いた通りに動く」という格言がありますが、ガベージコレクション(というよりTracing GCによる自動メモリ管理)も「ユーザが要らないと思ったオブジェクトではなく、参照されてないオブジェクトを回収する」のです。
ラムダ式の型をtypeid().name()で取得しようとするのは無駄な努力です。それはコンパイラが一意なものを決めるのです。
繁盛している立ち飲み屋では、来店したお客さんに空いているテーブルやカウンターを割り当てて案内し、そのあと客の要望があればちょうど人数が収まる場所に移動できることがあります。もちろんテーブルを移っても会計は引き継がれるので、ページ割り当てと同じですね。
Rで等高線を描こうとしたら、サンプルにMaungawhau (Mt Eden)という火山の形状データがあると知りました。この火山はAuckland, New Zealandにありますが、Rのふるさと、the University of Aucklandの地元ですね。
Rのベクトルの、先頭要素は1番、つまりインデックスは1始まりです。C言語の影響か否か、配列は0番から始まるというのに慣れていましたが、そうでない言語もあるのですね。
Macro Fusionとは、「我々がInstructions Per Clockを満足できるまで頑張るのです」
「スタックって何?」\n「銭湯で最初に脱いだものをロッカーの一番奥に、次に脱いだものをその手前に...という順番でしまっておくと、風呂から上がった後に着るものを手前から順番に取り出すことができる」\n「籠に積むなら、もっとゆるい順番でいいよね」\n「それは優先度付き待ち行列とヒープ」
pthread_cond_waitを直接使うと、spurious wakeup対策が必要なのだ! std::condition_variable::waitを述語付きで使う方が幸せになるでしょう。
コンピュータアーキテクチャの定番教科書と言えばヘネパタかパタヘネですが、その次にお勧めするのは"Intel 64 and IA-32 Architectures Software Developer Manuals"(4922ページ)を読んでアセンブリを書いて、C++コンパイラに実行速度で勝つことです。半分冗談ですが。\nhttps://software.intel.com/en-us/articles/intel-sdm#combined
memsetを使ってbyte単位以外の値でメモリを埋めるのは無理なので、そのような方法を探すのは諦めてstd::fillを使いましょう。
英語を映画やビデオゲームから学ぶというのはアリだと思います。ただし職場には適さないスラングを使わないように注意が必要です。ソフトウェアをインストールするときに言語を英語に設定すると、専門用語を英語で学べるだけでなく、エラーメッセージを検索しやすくなるのでよいでしょう。
Rのtibbleを使っていると、!!と!!!が必要になることがあります。<=>のような、三文字の演算子はなかなかありませんが、!と!!と!!!が違うというのも興味深いです。
キーワード引数(サイコロを3回振る=sample(x=1:6, size=3, replace=TRUE)的な書き方)は可読性が高まりますが、引数に...があると間違っていても気がつかないことがあります。stringsAsFactorsをstringAsFactorsと書いてもエラーにならず、予想外の結果が返ってきて泣いてしまったのです。
DataFrameや行列(matrix)の一部を書き換えるときに、素朴なcopy-on-modifyをすると、要素を1個書き換えるごとに大量のcopyが発生して実行効率が悪そうです。更新履歴を保持しておいて最後の更新を返せばよさそうな気がします。Python-PandasやRは中でどう実装しているのでしょう。
__builtin_popcountの引数はunsigned intで、long long intを渡すときは__builtin_popcountllです。C言語では仕方ないとはいえ、C++でこの使い分けはめんどくさいなあ、と思っていたら、C++20にstd::popcountが入るようです。
食べ物の広告画像によく「イメージ」と書いてあります。もしかして「これ(広告)と同じものをください」というときに、「値が同じ」かどうかの演算子==ではなく「インスタンスが同一」かどうかequal?を適用している客がいるのでしょうか?
RFC 793 (TCP)の"2.10. Robustness Principle"に、いわゆるポステルの法則があります。レジスタやファイル形式の予約ビットは、読むときは無視し書くときは0にする、という約束事が一般化されたのでしょう。
std::atomic<T>::value_typeが使えるのは、C++17以降なのですね。ユニットテストに\nconstexpr decltype(anAtomic)::value_type expected {1};\nと書きたかったのですが。
PCの設定方法に"(sudo) shutdown -r now"と書いてあるのに、-rの意味がよく分からなかったため勝手に省いてしまい、リモートからshutdown nowしたPCが再起動するのを辛抱強く待った後、サーバルームに電源ボタンを押しに行く気持ちを140字以内で述べよ(こういうときはrebootコマンドを使うのです)。
幸か不幸か、g++ではvtableを実行時に書き換えて「オープンクラス」みたいにはできません。vtableはread-onlyセクションに置かれているので、書き換えようとするとSegmentation faultで落ちてしまいます。
ヒープに置けないオブジェクトの例としては、RAIIを使った割り込み禁止/許可があると思います。解放忘れ=許可し忘れはまずいでしょうし、メンバ用のメモリを確保する必要はありませんので、自動変数にしてブロックスコープと割り込み禁止区間を一致させるのがよいでしょう。
volatile int value = *p; はpの指すものがvolatileではなく、valueがvolatileなのです。pの指すものが更新されても、valueは連動して更新されないのです。
プログラマにとって古くからある機械分類問題といえば、日本語テキストがShift_JIS, EUC-JP, ISO-2022-JP, UTF-8.jpのどれかを判定することです。文字化けを文字化けと認識できるのは、実はすごいことですよね。
std::unique_ptrが持つ素のポインタを渡して所有権を手放したらreleaseする必要があります。resetしたり持ったままだと二回解放されてしまいます。これに該当するのが、std::localeにfacetを渡すときですが、他に例はありますか?
「デジタルマネー」という言葉を聞いたのですが、そもそもお金のやり取りは1円以上の整数なので、マネーの取引はデジタル(量子化、離散化)ではありませんか? 消費税が1円未満になっても買い物は1円単位ですし、株式インデックスが小数でも、インデックスファンドの売買は1円単位ですよね。
Shift_JISで保存されたC++コードに、//コメントを追加し、行末が「ソ」で終わったために、次の行もコメント扱いされてバグを出したときの気持ちを140字以内で述べよ。
「ではお前たち、定義を見つけてくるのです。不完全型でないのを見つけてくるのですよ。」「宣言だけでコンパイルするのはだめなのか? とりあえず参照はできるって聞いたよ」「メモリを確保するときにサイズが必要なのです。頭を使うのです。」
Cなどの関数で、引数が異常値ならさっさとreturnすると、その後の処理の見通しがよくなることがあります。ところでループ文をearly continueするという表現は聞かないのですが、その後のインデントが浅くなったり、あわよくば予測分岐が当たりやすくなったりしませんか?
締め切りドリブン=締め切りが最も早い仕事から着手することの問題点は、仕事を仕上げるまでの時間が正確に見積もれていないと締め切りに間に合わないことですね。仕事の総時間が見積れる程度まで軽く進めるのが合理的だと思いますが、これは何ドリブンと言うのでしょうか。リスクドリブンですか?
C++にfinally節やensure節はありません。リソースリークの防止にはRAIIを使うのです。
プログラミングに熱中していると、食べるのがめんどくさいことってありませんか? われわれはジャパリまんのような、調理せずに食べられる完全食が欲しいのです。われわれはかしこいので。
入力ファイルと出力ファイルが同一ではないことを確認するのを忘れると、cat < foo.txt > foo.txt で foo.txt が空になってしまうです ><
関数のreturnは末尾に限るべきかと訊かれて、異常が発生して処理を下に継続する意味がなければ早くreturnしたいですが、特に動的型付け言語ではすべてのreturnの返り値の型をそろえるのは大変ですし、でもそうするとif()のインデントが深くなってしまい、どうしましょう...
std::getline(a std::ifstream)でテキストファイルを一行ずつlineに読んで、boost::lexical_cast<int>(line)で整数に変換しようとしたら、文字列の最後にCRが残っていて例外が飛んできたときの気持ちを、140字以内で述べよ。
これは私見なのですが、解放して欲しいオブジェクトは生ポインタでなくstd::unique_ptrを返す、生ポインタは所有権を渡さないという意志を示す、というのはいかがでしょう。
なんでもフローチャートで描く癖があるのだと思いますが、シーケンス図で複合フラグメントを駆使して、いろんな状態を一つの図にまとめるのはやめましょう。状態遷移図とアクションを使えばすっきり描けますよ。
プログラマがコンソールやテキストエディタを半透明にしているのは、ウィンドウの裏にある調べ物を見ながら入力するためです。その機能を開発した人は、壁紙をいつでも見られるようにしたかったのだと思いますが。
インタプリタではなくコンパイルが必要な言語の利点は、プログラミングが乗ってきたときに食事や外出の時間が近づいてきたら、一貫した変更が必要な箇所がコンパイルエラーになるようにすると、後で変更する目印になることです。バージョン管理をしていればdiffで分かる、まあそうですけど...
チェックアウトしたコードの\n/* Local Variables: c-file-style: "stroustrup" */\nを理解できないからって消されると、Emacs使いは泣いてしまいます。
大学の化学実験室にbufferというのがあり、なぜここにバッファが、と思いました。つまりこれは緩衝溶液=酸や塩基を加えたり薄めてもpHがあまり変わらない溶液のことで、これなら大学以前に習いましたが、英語で書いてあると分からないですね。
free(p);をif(p){}で囲む必要はないのです。freeにNULLを渡しても無害だからです。こういうインタフェースをnull object patternといい、自分で何か作るときも有効です。
英語に"prohibitively slow"という言い回しがあります。要するに、処理が完了するのを待っていられないほど長い時間が掛かるということですが、うまい和訳を思いつきません。
Rのweighted.meanは、重みが負でもエラーにならずに答えが返ってきます。もしかして\nweighted.mean(x=x, w=w)\nと\nsum(x * w / sum(w))\nは同じですか?
Rのdplyrは、bind_rows(df,NULL)で列を結合するとdfがそのまま返りますが、left_join(df,NULL)はエラーになります。dfがそのまま返って欲しい気がしますが、データフレームに共通の列がないとエラーになることと動作をあわせたのでしょうか。
人名のついたプログラミング言語といえば、Ada (Augusta Ada King, Countess of Lovelace), Haskell (Haskell Curry), Pascal (Blaise Pascal)が有名です。Stanの由来はStanisław Marcin Ulamで、Juliaの由来は特にない、で合っていますか?
C++のsizeofにリテラルを渡すのはやめましょう。sizeof('a')はCとC++で違います。
コードにstd::cinを直書きすると、ユニットテストのたびにキー入力することになります。テストケースではstd::istringstreamを作って、std::istreamへの参照を渡すのがよいでしょう。
コマンドプロンプトでCtrl+Shift+ホイールマウスを回すと透明度が変わる、と聞いたので、Cygwinコンソールで同じことをしたら文字とウィンドウサイズが両方変わりました。Ctrl+ホイールマウスで文字を大きくして他の方に見せるのはよくやりますよね。
「ゼロ the man of the creation」という漫画の主人公がしばしば言うことに、「本物は一つでいい」があります。std::moveした後の抜け殻のオブジェクトに対するアクセスはまずいことがあります。\nhttps://en.cppreference.com/w/cpp/utility/move
optionalとは値が「ないかもしれない」オブジェクトのことですが、金融の世界にもオプションがあります。以前読んだ本によれば、コールを買う=強奪する権利、プットを買う=押し売りする権利を手に入れることだそうです。権利というのは「行使しなくてもよい」という意味です。
Stable isotopeは安定同位体ですが、stable sortは同順位の要素は元の並び順を維持するソートのことです。同位体でtraceといえば放射性トレーサーと痕跡量(trace amount)がありますが、ソフトウェアにはstraceがありますね。
数学の時間に、組み合わせ爆発の例として「人類が俳句を作りきることはない、いろは48文字の17乗は膨大だ」とありました。か・き・つ・ば・た(杜若)で始まる折句のうち、日本語として意味を成すものは何通りあるのでしょうか。
Boost MPL (Metaprogramming Library)? フレンズの技だよ!
GitHubからzipダウンロードしたレポジトリを展開すると、ファイルの時刻はPST/PDT(アメリカ西海岸標準時または夏時間)になるようです。UTCや日本時間だと思うと、この人昼間からなにしているんだろう、と勘違いしそうです。
巨大なファイルを読んでメモリに展開したら、解析し終わった後に参照を捨てましょう。参照を保持したままだとガベージコレクタは回収できないので、次のファイルを読むときメモリが足りなくなることがあります。
例外は、コンストラクタが失敗したことを教えてくれるフレンズなんだね
Communications of the acm (CACM) の"LAST BYTE"というのは、最後の一口(last bite)と掛けているのですよね。ちなみにfirst biteは結婚披露宴の演出だそうです。
自由関数のシグネチャをgrepで集めると、複数行にわたる宣言と定義が途中で切れてしまいます。indentとctagsを使って一関数一行になるように前処理すると上手く行きます。
同じ量が異なる単位で表記されることがあれば単位を確認しようという気になりますが(カロリー/ジュールなど)、同じ名前の単位でも量が違うことがあります。ビール1パイントの容量はアメリカとイギリスで異なりますし、6畳と言われても畳の大きさは異なります。
クロスコンパイル環境の開発では、ターゲットでは使えるがホスト(ユニットテスト)では使えないキーワードを、マクロを介して使って欲しいです。直接__forceinlineと書かないで欲しいのです。
東海道/山陽/九州新幹線の新車がN700->N700A->N700Sと名付けられるのは、N700が新幹線の最終形態という意味なのかもしれません。MPEG-4 Visual->AVC->HEVCとか、最後のファンタジー15とかと同じでしょうか(中の人はFFを知らないのですが)。
条件演算子 (expr) ? t : f よりif-elseの方が分かりやすいと聞きますが、それならなぜ分かりにくい物が必要だったのかに、思いをはせて欲しいのです。Conditional move命令に変換することで、分岐予測が外れるペナルティを避ける必要があったのです。
アセンブラがasなのに、逆アセンブラがobjdumpなのはどうしてなのでしょう?
ヘッダファイルで定義した定数を書き換えるたびにフルビルドが走るのは、ビルド時間が掛かります。定数伝搬するつもりがなければ、宣言だけ公開して定義は.cppに入れておけば、定数を変えてもその.cppだけリコンパイルすれば済みます。
すごーい! Boost Serializationはenumをキャストなしで読み書きできるフレンズなんだね
外出するときに三歩あるいてから家に鍵を掛けたか心配になる、というのはよくあることです。同様に時間の掛かる処理をサーバで実行してnohupをつけ忘れたかどうか心配になって、再ログインしてps uxしてwatch tail nohup.outすることはありませんか?
PCやスマホを使っていると、日本語だとさらっと言えることが英語で何と言うかわからなくてドギマギすることがあります。横長? ええと、its width is longer than ... landscape! (縦長はportrait)。
グラフと聞くと、点の集合とそれらを結ぶ枝の集合と思ってしまうので、円グラフとか棒グラフはチャート(pie char, bar chart)と呼んで欲しい気持ちになります。確かにbar graphでも英語としては正しいのですが...
プロジェクトの、暦年第一週をてきとーに決めないで欲しいのです。ISO 8601(一週間は月曜始まり、暦年の第一週=第一木曜日を含む週)に従うのです。
すごーい! 百人一首の決まり字は、コンピュータ以前に発明された、multi level indexなんだね!
非可逆圧縮の可逆圧縮の違いは、文字通り圧縮前に戻せるかどうかです。もう一つの違いは、圧縮後の目標ビットレートを固定して圧縮できるかどうかです。圧縮前に冗長性の低いものを可逆圧縮すれば、縮まないのは仕方ないですが、放送のような固定ビットレートでは送るのに困るでしょう。
Rでは1/0がエラーでもNaNでもなくInfになります。もちろん-1/0は-Infです。
計算グラフ(Computational Graph)というとなんだか固い言い回しに聞こえますが、Makefileの生成規則を手書きするのと同様ですよね。
コマンドプロンプトのディレクトリの区切り記号(0x5c)がバックスラッシュではなく円記号だと、別にお金の話をしている訳でもないのになぜ円記号なのだろうと思いますが、bashのプロンプトが$が終わっていても金額を入れる気にはならないのは不思議ですね。
ソフトウェア開発の最初の一歩として、旅に出てホテルで館詰になって全体像を考える、というのを過去やってみたのですが、私にはあっているようです。この場合の「かんづめ」は、缶詰ではなく館詰が正しいそうです。もちろん一日頭を使ったら、美味しいものを食べるのです。
C++のコメントに「このクラスのインスタンスはヒープに置かないでください」と書いて済ますのは不親切でしょう。operator newを=deleteして、プログラマを誤用から守るのもライブラリの役割なのです。
お菓子作りは、作っている途中からは完成形が予想できないのでレシピにきっちり従う、と聞いたことがあります。ですがソフトウェア開発に完璧なレシピを求めてウォータフォールにし、序盤は上手く行っているように見えて後工程で突然壊れたようにみえる、というのは怖いものがあります。
水銀体温計が摂氏42度までしかないのは、それ以上の体温に人間が耐えられないからです。CDが52倍速までなのは、それ以上高速回転するとCDが砕け散るからです。\nhttps://www.youtube.com/watch?v=zs7x1Hu29Wc
ねねっち「そうだ、なるっちのHaskellのコードなんだけど、ここポイントフリースタイルを使えばもっと短くなるんじゃない?」\nなるっち「・・・!」
lnを何と読むか思い出せず、ログと読みたい気分になります。なぜって計算量 O(log_10(N)) と O(ln(N)) の違いは定数倍:ln(10)ですから。C++やRでは、log10は底が10、log2は底が2、logは底がe(Rはデフォルト引数)です。底は後から変換してもよいのですが、log2は指数部を取り出すだけです。
ロックは取得したら解放するものですが、NumLockを解放する状況というのは私にはないので、勝手に外れることなくずっと掛かっていて欲しくありませんか?
プログラミング言語Juliaのロゴは以下のレポジトリにありますが、非公式キャラとして「Juliaたん」が含まれています。「たん」は英語の敬称として通じるのでしょうか。\nhttps://github.com/JuliaGraphics/julia-logo-graphics
C++でタイピングが大変だからって、using namespace std って書くと、C++17でstd::anyとstd::optionalがきたから名前がかぶるのです。
diffやWinMergeは空白を無視して2つのファイルを比較できます。何に使えるかというと、間違った字下げや行末の空白以外は直していないことを確認するのに使えるのです。文字列リテラルの空白の違いはもちろん無視できませんが。
国際情報オリンピックはIOIと略します。IOL(言語学)もこの語順ですが、なぜか他(IMO,IPhO,IChO,IBO,IAO,IESO,iGeo,IPO/数学,物理,化学,生物,天文,地学,地理,哲学)と語順が異なります。
ソースコードを書くのが速いと何がうれしいかというと、短時間でコードを書ければユニットテストを書く時間が生まれて、ユニットテストもテスト対象と同様に速く書けるので、コードの品質が上がるのです。これは相乗効果ですので、生産性が桁違いになるのでしょう。
ROMとRAMの違いと聞くたびに、read-onlyよりはnon-volatileと言った方が適切な気がします(上書き可能な場合があるので)。Volatile=揮発性という単語はあまり一般的では無さそうですが、化学の方々は馴染みがありますか? NVMeはNon-Volatile Memory Expressの略です。
乱数の種は関数の外から与えるようにしないと、ユニットテストで結果を再現できません。本番でどの乱数の種を使ったかは、JSONファイルなどログに残すのですよ。
RGuiやRstudioを使うと、Rスクリプトを使ってデータを描画するのを色々試すことができますが、このとき以前に設定した変数や読み込んだライブラリがそのまま残っています。リリース前にRscriptで実行して、変数やライブラリがまっさらな状態から動作確認するのがよさそうです。
「WSJで学ぶ経済英語」は実務に役立つ英語の文法用例集です。いまどきの高校生はこういう教材で学んでいるのですから、なんとも頼もしい限りです。ネット以前の優良な教材は、「やさしいビジネス英語」などに限られていましたから。\nhttp://jp.wsj.com/news/types/j-economy-english
pthread_t型の変数を、pthread_createを呼び出す前に初期化はできないのです。pthread_tの型はopaqueだから、ユーザが設定できる初期値がないのです。
不確かということばには、サイコロの目のように確率分布は分かっているが結果を予想できないことと(risk)、確率分布がそもそも分からないこと(uncertainty)があります。例えば起業が成功する確率について、統計はあるのでしょうか。
Bayesian regretとは、最適な戦略と実際にアルゴリズムが選んだ戦略の差ですが、regretという単語の意味は後悔というよりは過ぎしてしまったことを惜しむという感じです。なのでリグレットを強いて漢字で書くなら、後悔より残念の方があっているような気がします。
あなたこそ、Tracing GCとリフレクションのないフレンズ? めずらしーね!
C++でメンバ変数を一括クリアするのに、memset(this, 0, sizeof(*this)) して、vtableへのポインタもクリアしてしまう ><
プログラマが紙とペンを持つでもなく、画面をにらみつけているときがありますが、そういうときに話しかけてはいけません。それは気の利いた変数、関数、クラス名を必死に考えているところなのです。
Sandbox上で実行するというのは理解しがたいことに聞こえますが、要するにテキストエディタで複数のファイルを編集してもそれぞれのファイルの内容が混じったりしない(もちろんユーザが意図的にコピペすればそうなる)と言えばよいでしょうか。
引数の"size"が、個数なのかbyte単位のサイズなのかword単位のサイズなのか分からないのは困ります。区別できるような名前をつけましょう。そもそも1 wordって何byteなのですか?
C++コンパイラ(秩序・善)「静的型付けによる健全性」\nC++コンパイラ(秩序・悪)「static_castとreinterpret_castはあなたが望んだこと」\nC++コンパイラ(混沌・善)「unionでreinterpret_castしたい? C11じゃないんだけど」\nC++コンパイラ(混沌・悪)「数値を暗黙に型変換する」\nhttps://stackoverflow.com/questions/25664848/unions-and-type-punning
「私のソースコードは53万行です」\n「物理行ですか、論理行ですか」\n論理行をどう定義するかは難しいですが、空行以外なら\negrep -v "^\\s*$" | wc\nです。実際にはindentでスタイルをそろえるとか、コメントを除くとか(異論は認める)も必要でしょう。
今のx64プロセッサは内部48bitでアドレスを扱っているようですが、SIZE_MAXは2^64-1と定義されていますし、RSIZE_MAX=(SIZE_MAX >> 1)のようです。
手戻りなく掃除するには、部屋掃除は高いところから順に低いところを拭きますし、その後水回りを、台所、トイレ、風呂の順に掃除し、そのまま体を洗うとすっきりします。レイテンシを減らすためには実行順序は重要ですよね。
qsortに比較関数を渡せるのは興味深いですよね。Rubyのsortと<=>も好きです。
boost::anyオブジェクトにchar*型の値を入れたとき、 boost::any_cast<const char *> で取り出すと boost::bad_any_cast が飛んできます。C++20以降でもこうするしかないのでしょうか?
3Mの創業時の社名はMinnesota Mining and Manufacturing Companyですが、The Mythical Man-MonthはMMMと略されることがあるようです。
Leakageという言葉は、半導体ではリーク電流(leakage current)を思い出しますが、データサイエンスの世界では、知りえない情報が訓練データに漏れてしまうこと、のようです。\nhttps://www.kaggle.com/dansbecker/data-leakage
コンピュータは人間と違って疲れないといいますが、コンピュータを相手にするもう一つのよいところは下手でも笑われないことです。英語の質問を正しい文法ときちんした語彙で行うのは難しいですが、思いついた単語を並べてググるとStack Overflowの回答が見つかります。
配列をループで回すときのインデックスを何でもintにして、sizeof(size_t) > sizeof(int)だと2Gあたりで動作がおかしくなるのは、既存のコードを64ビット化するときにありそうですね。
Compromiseという単語は妥協という意味ですが、RFCなどでは、セキュリティを侵害するという意味で使うことがあります。辞書を引けば分かることですが、専門用語というのはしばしばそうと見抜けないことがあります。
CのソースコードはほぼC++でも動きますが、一部非互換なものがあります。例えばrestrictはコンパイルエラーになることがあります。本当にrestrictが必要か考えましょう。
"Everything but the kitchen sink"とは一切合切という意味のイディオムです。一切合切が入っているC++を理解できれば、そこからの類推で他のプログラミング言語は学習できそうな気がします。問題は、C++を理解できる日が、私には来そうもないことです。
締め切りを厳守したければゆとりが必要であることを定式化した一つの表現として、レートモノトニックスケジューリング(Rate Monotonic Scheduling)は興味深いです。
ユニットテストのassert_equalに、expectedとactualのどちらを先に書くかは、テストを書く前に確認しましょう。Google TestとCppUnitは期待値が先ですが、CUnitは後です。前後を後から逆にするのは辛いのです。
Claimは文句ではなく主張という意味ですが、claim(s)と聞くとまず特許の請求項を思い浮かべる人もいると思います。
エンディアンの違いは確かに厄介ですが、社会にも統一されないことはあるのです。株価が上がったときの色は、日経が赤でロイターが緑、下がった時はそれぞれ逆(緑と赤)なのです。遠目には株価が上がったのか下がったのか分からないのです。
C++のstd::removeとstd::eraseはその名前の紛らわしさからErase-Removeイディオムとboost::remove_eraseがあるのですが、std::uniqueとstd::eraseを組み合わせて使う方が最初の説明としては理解しやすいと思いました。
わざと不具合が混入した疑似コードを渡されて問題点を指摘する、という練習問題の攻略法は、非機能です。計算量が多すぎる、保守フェーズで一貫性のある変更が大変、あるコンパイラではたまたま動くが移植すると動かない、などは出題者が気づいていないかもしれません。
C言語の配列の添え字は、0から始まりN-1で終わるのでright-openな区間[0,N)です。一方で、Rubyのrangeつまり1..NやRの1:Nは、両端を含む閉区間[1,N]です。添え字が0始まりか1始まりか以外にも違いがあるのですね。
std::shared_ptrのダウンキャストは、getしてdynamic_castではありません。それでは何のために共有しているか分からないでしょう? std::dynamic_pointer_castを使うのですよ。
先日英文を読んでいて、"prima facie"というラテン語を知りました。論文などを読んでいると、i.e. やet al. はよく見ますが、まだまだ私の知らない学術系ラテン語があるようです。
apt-getがネットワーク周りでうまくいかないときは頭を冷やして、sudoでHTTP proxyが正しく設定されているかどうか確認するのがよいと思います。-Eオプションで環境変数は伝わってますか?
dplyr::top_nは上位n行を選びますが、同順位があるとn行より多くなることがあります。dplyr::bind_colsするときは要注意です。\ndf <- data.frame(a=c(1,2,3,4), b=c(6,5,6,6))\ndf %>% dplyr::top_n(n=2, wt=a)\n  a b\n1 3 6\n2 4 6\n\ndf %>% dplyr::top_n(n=2, wt=b)\n  a b\n1 1 6\n2 3 6\n3 4 6
x86のレジスタ間転送命令はmovですが、よく考えたらmoveしても転送元のデータが無くなるわけではありませんね。8086と違って今のx86はregister renamingしているので、転送という概念が当てはまるかどうかも分かりませんが。
Workaroundという言葉は、ソフトウェア開発以外でどれくらい使われるのでしょうか?
Rustがシステムプログラミング言語だと分かるのは、std::sync::atomic::Ordering::SeqCst(C++のstd::memory_order_seq_cst)があることだと思います。メモリモデルをプログラマが指定する言語は、他にありましたっけ?
よく誤解されることですが、計算機の世界では単に速い処理をリアルタイムとは呼ばないのです。リアルタイムシステムとは、結果の正しさが内容だけでなく、締め切りに間に合ったかどうかにも依存するシステムです。音声の復号が間に合わなかったらどんな音が出ますか?
湯沸かしポットに水を足す条件を、自分がお湯が注ごうとしてお湯が無いと分かった時ではなく、自分がお湯を注いで次の分がないと分かった時にするように、先日教わりました。確かにその方がレイテンシの期待値が短くなりますし、お茶の成分が出るのを待っている間に水を足せばよいのですね。
今どきのx86マニュアルを見ると、throughputが1以下の命令が多いです。要するに毎クロック同じ命令を投入できることが多いですが、除算(DIV)は今でもかなりのthroughputとそれ以上のlatencyがあります。DIVのパイプラインを動画にすると分かりやすそうですが、ラッシュ時の電車みたいでしょうか。
Rustには無限ループを明示的に行うloopがあります。while trueではなくloopとコンパイラに伝える方がよいそうです。Rもrepeatで無限ループができますね。
統計学の教科書に大数の法則の例として、飛行機の乗客の体重を考慮する必要はないことが載っていました。しかしこれはある程度大きい飛行機の場合で、小型機では乗客の体重を測って位置を決め、機体のバランスを取るようですね。
(前略)"許可を得るより謝る方がずっと簡単だ" by Grace Murray Hopper という言葉があります。プロジェクトに新しいツールや方法を導入するために許可を得るより、GitHubでコードを公開してうまくいくことを実証する方がずっと簡単ですね。
シューティングゲームの当たり判定は、ナイーブな方法ではすべての敵N機に対する座標比較になります。モートン順序を用いた空間分割によって、自機の近くの敵とだけ比較することで高速化できるようです。\nhttp://marupeke296.com/COL_2D_No8_QuadTree.html
空(0byte)のファイルを作る方法には"cat /dev/null > foo"と"touch foo"がありますが、既にファイルがあるときはそのままにするかどうかで、使い分けが必要ですね。
行動経済学でサンクコストの誤謬とは、今後取る行動を決める当たって、回収不可能な費用を気にする意味がないのに考慮してしまうことです。自然科学ではマルコフ性、つまり将来のことは現在の状態だけに基づいて決まり、現状にどうたどり着いたかは影響しない、と表現できます。
スループットとレイテンシがトレードオフになっている例は、ラッシュ時に急行が走らない、ということです。急行に人が集まり過ぎると乗り降りに時間が掛かりますし、各駅停車を急行から逃がすのは加減速とポイント切り替えに時間が掛かると思われます。
Stableという単語は、ソフトウェアでは安定版という意味ですが、物理や化学ではstable isotope : 安定同位体があります。そういえばphotogenicには写真うつりがよいという意味の他に、生物が発光性という意味があります。
(a) ? b/a : c; をasmで書くのに、b/aとcを求めてからcmovで選ぶと、cを選ぶ前に0除算例外が発生することがあります。投機的実行にも限度があります。
CD-DAが世に出て40年近く経った今になっても、デジタル=かっこいい、アナログ=ださい、と同義語に扱うのを見かけるのはなぜなのでしょう。短歌も小説も文字の集合ですが、文字集合は離散集合で無限の世界を表現しているので、人類は昔からデジタルな世界を生きてきたと思うのです。
ACIDに対するBASEは酸に対する塩基というシャレですが、世の中にはatomicでない商取引があります。ホテルの予約は、複数の予約サイト、電話、受付で直接とさまざまな方法がありますが、結局(Eventually)泊まれるか断られるかに落ち着きますよね。
変数をどこで使っているかgrepして目視するのは見落としが多いですね。ではそうすればよいかというと、変数名を変えてコンパイルして、エラーをあぶり出すと分かるのです。ただし変数名をお試しで変えたコードをcommitしちゃだめですよ。
Rのggplot2で色を指定するときは、colorでもcolourでもどちらでも指定できますよ。
swapの使い方として、std::ostringstreamの中身を空にして内部状態を消すというのがあります。例外も投げません。代わりに空のものを=でmoveしてもよいです。\nhttps://stackoverflow.com/questions/20731/how-do-you-clear-a-stringstream-variable
SHRX/SHLX/SHRX命令は、フラグを書き換えないフレンズなんだね。x86命令の依存関係は、レジスタだけでなくフラグにもあるんだね。
問題をproblemと報告したら、相手に「お前のせいで困っている」と言っているようで怒らせてしまいます。取り組むべき課題はissueとして報告するのです。何語でも言葉を選ぶのは大事ですよ。
コンパイル中にファイルを開こうとして、WindowsのExplorerからEmacsにファイルをドラッグ・アンド・ドロップしたら、その間に.oが増えたので違うファイルを選んで開いてしまったときの気持ちを、140字以内で述べて下さい。
Makefileに "$(RM) $(OUTPUT)/*" と書くと、変数OUTPUTが未定義のときにルートディレクトリ直下の*が消されて怖いことになります。 "$(RM) ./$(OUTPUT)/*" などと書く方が安全でしょうか?
g++ -E -H foo.cpp\n「この#include連鎖はいつまで続くのですか」\n「二百、三百、な、何ファイル入ってくるのですか、博士」\n「お、多いのです、C++とはこんなにたくさんのヘッダファイルで行動するのですか、助手」\n「ここで何が始まるのですか」
アセンブリ言語があれば実質どんなプログラムでも組めるという意見に対抗して、PostScriptはチューリング完全なので実質どんな文書も書けるというのを思いつきました。なおExcelは方眼紙ではないと思います。
角速度とは2Dゲームで、手前に描いた背景の動きより奥に描かれた背景の動きを小さくすることで、多次元配列をスライシングするときにコピーせずビューとして扱うのは、2DグラフィックスでVRAMに描いた画像の一部領域だけディスプレイに映すことではありませんか?
C++の掟は、自分の力でメモリ管理すること。自分のオブジェクトは、自分で解放するんですのよ。ガベージコレクタ任せじゃダメよ。
make cleanするときに、.dを作ってすぐ消すのは時間の無駄です。ifneq ($(MAKECMDGOALS),clean) で.dを作らないようにしましょう。
株式指標の多くは時価総額加重平均ですが、これはすべての人が保有している株式の合計価値を近似しているように見えます。それに対して修正平均株価であるダウ平均株価(DJIA)と日経平均株価(N225)は何を近似しているのでしょうか。私には分からないのです。
プログラムという言葉は、コンピュータが実行するコード以外にもいろいろ意味があります。テレビ番組(TV program)、マイレージサービス(frequent flyer program)、査証免除措置(visa waiver program)などがあります。
文書の本文と図表を見比べたい\n→ PDFを二画面にする\n→ Ctrl + Shift + ; で図を回転させる\n→ 本文も回る\nﾀｽｹﾃ...
//はCとC++では行末までコメントで、Pythonでは整数の商です。プログラミング言語を自作すると、 /// を頬タッチ演算子と名付けることができます。
ビットフィールド構造体の設定を、各メンバを逐次代入するのと構造体まるごとコピーするのとで、生成されるコードに大差ありませんでした。それよりもg++はビットマスクを使って各メンバを設定するが、clang++は全メンバのビットパターンからなる即値を入れるという違いの方が大きいです。
+演算子はオブジェクトを加算できるフレンズなんだね
非同期処理をシーケンス図で表現するのは、なんでもフローチャートで表現しようとする癖でしょうか? アクティビティ図を使って並行性を表現する方がよいでしょう。
後知恵にすぎないことを承知で書くのですが、IPv4アドレスが32ビットということは、IPv4が発明された時点で1人1アドレス以下だったのでしょうか(世界の人口を40-50億人だったとして)。一人で何台もネットワーク接続機器を持つ世界が想定されたのはもっと後だったのでしょうね。
実行ファイルのバイナリサイズを削減するのに、使ってなさそうな関数を探して #if 0 ... #endif を試すより、LTO(Link Time Optimization) の方がよくありませんか? #if 0すると、ユニットテストがコンパイルエラーになってしまいますし。
オブジェクト指向は「もの指向」ではなく「目的語指向」と呼びたいのです。
時計を分解して元に戻せなくなることはありますが、逆アセンブラでプログラムが壊れることはないので安心ですね。
Boost Optionalは保持している変数の値*oではなく、oそのものをostream<<oで出力できます。手元では未初期化なら"--"、初期化されていれば" "+値の文字列が出力されましたが、出力される文字列を仕様で規定していません。
C++2aに入るかもしれないtype_identity_t<type_identity_t<...>>を使うと、>をいくらでも重ねられるので、何個重ねられるか試してみました。Windows 10 64-bit g++ 8.1.0だと6651個までコンパイルできました。
ヘッダファイルを追加したのに、add-commit-pushし忘れて帰ったので、レポジトリをチェックアウトした他の人がコンパイルエラーになりました ><
Hexspeakの最上位ビットが1で、下位2ビットが00b以外なのは、これを有効なポインタとは解釈できなさそうということを暗示するためでしょうか。x86でカーネル領域に入っていたり、x64でcanonicalでないアドレスは確かに変です。
既に公開しているインタフェースに対して、構造体への参照で渡すパラメータを後から増やしたいことがあります。構造体のバージョンをメンバに含めておくのが一つの方法ですが、秀逸な方法はWindows APIのように、構造体の先頭メンバを構造体のサイズにしておくというものです。
仮想アドレスというと何か難しく聞こえますが、近畿自動車道名古屋神戸線という物理道路(法定路線名)に、伊勢湾岸自動車道(の一部)と新名神高速道路という論理道路(営業路線名)を名付けた、と言えばなんとなく分かりませんか。
ソフトウェア業界でトランザクションと言えば不可分な一連の処理を意味しますが、transactionsと複数形にするとIEEEやACMの論文誌を意味します。
同期と言えばsynchronizeという意味であって、誰かが私とたまたま同じ時期に～という組織に入った、いう意味で使うことが私にはほとんどありません。相手が同期かどうかで態度を変えるという発想が私にはないのですが、前者の反対語がasyncなら後者の反対語は何でしょうか。
プログラミング言語と年収、という表はよく見かけますが、古くからあるプログラミング言語ほどソフトウェア開発経験が長い使用者が多いと予想されます。同じ経験(雑に言うと年齢)でのプログラミング言語による収入の違いを測るために、マッチングによる因果推論が使えますか?
専門書に記載されている用語が、日本語だけでなく英語でも書いてあると、変数名を考えるときに悩まなくていいですね。
世の中たいていのものは、探せば見つかります。C++でCRC計算を自作する必要はなく、Boost CRC Libraryを使えばよいのです。
ソースコードのコメントを書いていて、分散が入った変数は非負でなければならないという回りくどい文章を、variance must not be negativeと訳してから、一般に分散=0ではないのでmust be positiveと書けばよいのか、と思ったことはありませんか?
非PODのオブジェクトをmemcpyすると、vtableへのポインタもコピーされてしまいます。派生クラスのメンバが切り捨てられて不定値に置き換わってしまうのです。
社会に出るまでOfficeとWordを使ったことがない、と不安になる方がいるかもしれませんが、心配要りません。ACMやIEEEなどの主要学会はLaTeXが使えます。LaTeXで文章まるごとを書かなくても、markdown math等のデファクトという感じがしますので知っておいて損はしないでしょう。
UML図の各要素の名前は、統一性のあるきちんとした英語でつけて欲しいのです。統一性のない用語や、間違った英単語を使うと、それがそのままコードになってしまいます。コーディングを始めてから語彙を統一するのは無理があります。
"move forward"というのは文字通り前進という意味ですが、std::move std::forward と言えば、個人的には Effective Modern C++ で一番理解が大変な部分だと思います。
初期パスワードに「0やOとなど間違えやすい文字の入力にご注意ください」と、時々書いてあるような気がします。間違えやすい文字を初期パスワードに含めないようにする方が、適切ではないでしょうか。
地図を4色で塗分けられること(四色定理)はコンピュータで解かれました。他方、CPU上で実行するデータフローを、できるだけメモリにアクセスせずに済むように、レジスタを割り当てるのがプログラマで、CPUがその意図を汲んで実行するのがregister renamingです。
Intel 64のマニュアルには、IMULは符号無し整数の乗算にも使える(演算結果の下位ビットは符号ありと同じになる)と書いてあります。これがMULとIMULでオペランド数が異なる理由でしょう。\nhttps://software.intel.com/sites/default/files/managed/39/c5/325462-sdm-vol-1-2abcd-3abcd.pdf
Syntactic sugarの例を挙げよと言われて、classとstructの違いはデフォルトの公開範囲だけ、と答えるのがC++erです。
テンプレートのコンパイルには時間を使うのです。われわれはかしこいので。
PlayStationはworkstationをもじった言葉とされますが、workstationとは元々コンピュータのことではなく、組み立てラインのように、作業に適した環境が整った個人の仕事場のことだったのです。
Windows 7のサポートが終了したことで、Windowsの現役バージョンは8.1およびそれ以降になりました(8は知りません)。ですので、プレゼンテーションの資料には、メイリオではなく游ゴシックを使いませんか? 個人的にはメイリオはポップ過ぎて、資料には合わない気がします。
Rでjsonliteを使ってlistをファイルに書き出すと、要素が一個の変数も[]で囲まれます。Rでスカラー変数に見える物は、要素が1個のベクトルということが垣間見えます。NROW(2)は1ですよね。
何もしないデストラクタを{}と定義するのではなく、=defaultを使うのです。理由はEffective Modern C++ 項目17に書いてあるので、まずはeffectiveシリーズを読みましょう。
なぜ隣の席同士で直接会話せずチャットするのですか? というのにはいろいろ理由があるのでしょうけど、実用的な理由は長いURLを口頭では伝えられないからです。
プログラマの仕事しているところを他人が見ることはまずありませんので、美容院や飲食店のカウンターで仕事振りを眺めるというのはなかなか興味深いものがあります。その手際のよい仕事ぶりを見ていると、こちらもいい仕事しようと、なんだかやる気が湧いてきます。
constメンバ関数からメンバ変数を書き換えたくなったからといって、いきなりmutableとかconst_cast<T*>(this)してはいけません。C++ではconstメンバ関数がスレッドセーフであることを、呼び出し側は期待しているのです。
US-ASCIIしか使わない文章で、～の代わりにtilde(U+007E)を使おうとすると、表示で波が真ん中にあったり(Consolas)、上にあったり(IPAゴシック)します。素直にハイフン(-)を使うか、Ruby風に..と書く方がよさそうです。
実行時に任意の正規表現を入力として受け取ると、複雑な正規表現を食わされて落ちる(ReDoS)ことがあります。できるだけ短い正規表現で計算量を爆発させるコンテストは、探せばありそうですね。
命題A⇒Bにおいて、Aが偽ならBは真とされます。要求を完璧に獲得しかつ開発が完了するまでそれが変わらなければ、ウォーターフォール型ソフトウェア開発はうまくいく、が該当するでしょう。開発中に要求が変わるのは、ソフトウェアを使う社会経済や競合他社の状況が変わるからですけど。
C言語の罠に、snprintf(dst,N,"%s")でdstにN文字ちょうど書き込もうとすると最後はNUL終端されるが、strncpy(dst,,N)のときはdstがNUL終端されないことがあります。
プロジェクトのクリティカルパスがどこかは、よく考えないと分からないことがあります。東海道新幹線が開通するためのクリティカルパスは、おそらくは時速200キロで走る列車を開発することではなく、新丹那トンネルを掘ることだったでしょう。
～がうまくいかないのは、やり方が不十分だからで、もっとリソースをつぎ込めばできるはずだ、という誤謬はよくあることです。人が空を飛ぶために必要だったのは、大きな羽根で力強くはばたくことではなく、揚力について知ることではありませんでしたか?
Mutexと言えば鉄道の閉塞信号機があります。列車が物理的に、同時に同じ場所に存在しなければ衝突しないという原理だと思います。もう一つの使用例として、瀬戸大橋(を構成する一つ一つの橋)に入る列車を同時2列車までに制限することで、橋の耐荷重を超えないことがあります。
プログラマならmockは当然ユニットテストで使うのですが、mockを辞書で引くとあまりいい意味ではないようです。技術用語として使うなら悪くない、というのがプログラマの文化なのでしょう。gitも然りです。
チップのピン配置にI行がないのは1列と混同するのを避けるためだと思われます。さてワシントンDCの通りも南北が番号、東西が文字ですが、J streetはありません。理由は諸説ありますが、昔はIとJが分かれていなかったかららしいです。
ソースコードに潜む不具合は、プログラミング言語やイディオムが改善されても、コンパイラや静的解析ツールを強化しても、発見できないものがどうしても残ります。これをpesticide bugと言いますが、元の意味は薬剤耐性ですよね。
鏡の中の鏡の中の鏡...という光景が出現するのは、PC上で電話会議をしていて、電話会議で共有する映像に自分自身のPCのウィンドウを表示させた時です。別に狙ってやっている訳ではなく、見せてはいけない物が映っていないか確認したいだけなのです。
プログラマが大好きな動物\nGNU Bison: a parser generator\ncat: concatenate\nCoq: a formal proof management system\ncow: Copy-On-Write\nfish: a friendly interactive shell\nLynx: a text browser\nPandas: Python Data Analysis Library\nSquid: a HTTP proxy\nThunderbird: an email application
C++の仮想関数にoverrideをつけ忘れたら、コンパイラに警告して欲しいのです。clang++の-Winconsistent-missing-overrideは、overrideを常につけるか常につけない(C++98相当)か揃えろという意味なので、overrideを全部忘れていると警告が出ないのです...
return std::unique_ptr<Base>{std::make_unique<Derived>()};\nするときに、class Derived : public Base のpublicを忘れたためにおびただしい量のエラーメッセージに打ちのめされる気持ちを述べよ。
CRTPは静的ポリモーフィズムを実現するフレンズなんだね!
Google Testの結果を取り出せるのは、テストが完走したときだけです。途中でsegmentation faultで落ちたときは、出力が途中で切れます。Exit statusを確認しましょう。
プロジェクトとは独特(unique)で期限があり(temporary)始めてみないと細かいことは分からない(progressive elaboration)と言います。そう思ってデレアニの「シンデレラプロジェクト」を見ると、確かにそうだと納得できるでしょう。
uint64_tが10進数19桁であることは、std::numeric_limits<uint64_t>::digits10で分かるのです。われわれはかしこいので。constexprで自作して再発明しなくてもよいのです。
プロジェクトのクリティカルパスは、期限が守れるかどうかを決めるものであって、難易度とは別の概念です。カレーライスを作るクリティカルパスはご飯を炊くことですが、炊飯器のスイッチを押すのと、玉ねぎの皮をむいて炒めるのと、どちらが難しいかは明らかでしょう。
ビットフィールドを上から下に並べても、MSBから順に並ぶとは限りません。エンディアンとコンパイラの仕様を確認する必要があります。IPv4ヘッダの構造体が参考になるでしょう。
狭い通路で他人と鉢合わせして、左右に進路を振ったら相手も同じ方向に変えてきた、というのはよくあることです。相手より早く大きな幅で左右にずれればお互いうまくいくはずなのですが、うまい説明はないでしょうか。トリガー戦略とは違うようですし。
現状のC++は、f(uint8_t)とf(BYTE)とf(unsigned char)を同時には定義できません。プログラマには違う型に見えてもコンパイラには区別がつかないので、関数を再定義してますと言われてしまうのです。Strong typedef (opaque alias)はまだですか～。
C++14では、整数の桁区切り記号として、'を使えるようになりました。C++14以前との互換性を考慮して選ばれた記号ですが、スイスでは似たような記号(U+2396)で桁を区切るので、実社会と無縁でもないのです。
プロレスのカウントは1,2,3という整数だけではなく、2.9, 2.99という小数があると聞きます。TeXのバージョンが、小数点以下が伸びて円周率に近づいていくのと似たようなものかもしれません。
美容師に髪を切ってもらっていてすごいと思うのは、髪は切り過ぎたら元に戻せないのに、切り終わったときには髪型が整っているということです。テキストエディタにundoがあり、バージョン管理システムにrevertがあってよかったと思いました。
Rubyの File.exists? はdeprecatedですが、 File.exist? と同じです。ですが、Pythonの json.load は json.loads と違いますし(三人称単数ではない)、 json.dump と json.dumps も違います。ﾄﾞｳｼﾃ...
PythonでJSONデータを\njson.dump(aJson, open('foo.json','w',encoding='utf-8-sig'))\nすると漢字が\u****になりますが、\nwith open('bar.json','w') as f:\n  f.write(json.dumps(aJson).encode('ascii').decode('unicode-escape'))\nだと読めるテキストになります。自動で変換して欲しいです。
Rでmatrixを転置する関数を探していたのですが、transposeでもtransでもなく、なんとt一文字でした。NumPyもv.Tなので同じく一文字です。そういえばRubyのpも一文字の関数ですね。
関数名のtoを2と書いたり、forを4と書いたりするのはやめましょう。コーディング規約は守って欲しいですし、ソースコードをgrepする人のことも考えて欲しいのです。
SNSは和製英語なので英語圏では通じないそうですが、Pythonのseabornはsnsと略してimportするのが習慣だそうです。seabornを略してもsnsにはならないのですが、由来は下記にあります。\nhttps://stackoverflow.com/questions/41499857/seaborn-why-import-as-sns
"Mademoiselle: Coco Chanel Summer 62"という、マドモアゼル シャネルの仕事風景を写した写真集があります。ひたすら仕事に没頭するその姿は、プログラマの理想的な作業環境でもあると思います。
ポインタが指すアドレスの、上位ビットがカーネル領域に入っていたり、下位ビットのアラインメントがとれていないのは、ポインタが何かに上書きされて壊れている匂いがします。
Rでf<-function(x){x*x}のことを「関数fを定義する」と説明することがありますが、厳密にはある環境で無名関数オブジェクトを作成して変数fに代入すると言えばよいでしょうか。それよりも重要なのは、統計処理を自動化する方に、意図が伝わることですよね。
Hard disk driveをカタカナで表記するときはハードディスクとし、ハードドライブと書く人は少数派だと思います。ですのでC:ドライブがSSDでもローカルディスクなのは、分かりやすさを重視した結果でしょう。電話をダイヤルするのと同じような表現でしょうか。
Virtualという言葉が人口に膾炙して久しいですが、今も現役なvirtualといえば80386(Intel386)のvirtual-8086 modeでしょう。デビュー35年です。そういえばvirtualの訳は、仮想より「まるで」の方がよいとも聞きます。
プロセッサのstore命令は、そのプロセッサの論理スレッドからみた順序は正しくても、バスや他のプロセッサからも同じ書き込み順序に見えるとは限りません。ときどき動かなくなるマルチスレッドプログラムがあったら、memory fenceが抜けてないか確認するとよいでしょう。
プログラマの初出勤日は、勤務規則を聞いてから社員証と健康保険証を頂いて、二日目にはもう開発に加わっているというのが、涼風青葉みたいでいいと思います。座学よりも、自分で手を動かしたり技術的課題の議論をしたりする方が楽しいですよね。
プログラミングや設計、テストに掛かる時間は、一つ一つの作業については予想より長かったり短かったりするが、週単位でみれば大数の法則に基づいて予想に近くなるのだと思います。だとすれば毎日の労働時間を固定すると、却って作業効率が下がるのではないでしょうか。
enumをなんでもかんでもintにキャストすると、値がintに収まらないときにまずいことになります。std::underlying_typeを使いましょう。
ある駐車場には、曜日と時間帯によって最大料金が設定されていたり、なかったりします。数式ならmin(駐車時間*時間単価,最大料金)ですが、最大料金はN/Aのときがあります。これをお好みのプログラミング言語で書くとどうなるでしょうか。Rならmin(na.omit())、Rubyなら[].compact.minですね。
コンパイラの警告を無視すると、コミットした翌朝に静的解析ツールに指摘されてレビュアーに説明することになります。コンパイラが数秒で教えてくれることを、翌朝どうしてそうなったか思い出すのは、開発効率が悪すぎるでしょう。
「動的片付け言語」とは、オブジェクトを明示的に解放しなくても、メモリが足りなくなったら要らないオブジェクトを処理系が片付けてくれる言語のことですか? というのは冗談で、正しい用語はautomatic memory managementです。
コードジェネレータでenumメンバを生成するときに、join(",")で結合して最後のメンバの後には,をつけないのと、全メンバを"メンバ名,"で結合して最後のメンバの後にも,をつけるのと、どちらにするか訊かれたことはありますか? 実は後者はC99/C++11で合法なのです。
C++でputcというメンバ関数を作るのはダメなのです。putcは関数ではなくマクロで実装されていることがあるから、そのときは意味不明なエラーメッセージが出ます。
Win+Ctrl+Cを押して発表用スライドを白黒で表示すると、グラフの要素を色で塗り分けていても、それぞれの色の濃さが似たり寄ったりで区別できなくなることがあります。斜線や網点や点線の種類(solid, dashed)で区別すると、印刷したとき区別しやすくなりますね。Photocopy friendly といいます。
よい要求(requirement)が満たす性質として、correct, consistent, complete などがありますが、資料によって挙がっている項目が異なるようです。いずれにせよこれらは要求に限らず、一般的によい技術文書が満たす性質だと思います。
PythonのexceptやRubyのrescueで、横着して例外の種類を指定しないのはまずいです。関数や変数の名前が間違っているときのNameErrorやNoMethodErrorまで握りつぶすので、デバッグが大変になりますよ。
C++17ってまだ"Modern C++"なのですね。MPEG-4 Part 10: Advanced Video Coding (AVC)や、新幹線N700Aみたいに、Advancedになるのかと思っていました。N700Aの次はN700Sですね。
US-ASCIIコードで、制御文字のうちDEL(1111111b)だけが離れているのは、パンチテープ上の削除したいデータを、1行分穴を開けることで削除するためです。この現代版は馬券を購入するためのマークカードで、"取消"をマークすると、消しゴムを使わずに取り消せます。
「UTF-8テキストのBOMを取り除きたいのですが」\n「ddにする? sedにする? それともvim?」
曲名のソートって大小文字と先頭の冠詞は無視しますよね\nruby -e "puts STDIN.each_line.sort_by { |s| s.downcase.gsub(/\\A\s*(((a)|(an)|(the))?\s+)/,'') }"
nullptrは関数へのポインタにも使えます。ですが可能なら、何もしない関数を設定するのがよい設計でしょう。NULL検査はわずらわしいし忘れやすいですから。
タスクスケジューラは何をしているのか、というのは料理をすれば分かります。ご飯を炊いて、味噌汁を煮て、総菜と果物を盛り付けつつ、魚が黒焦げにならなければ、タスクが時間制約を満たしたと言えるでしょう。中の人は久しく料理をしてないようですが。
プログラマの三大美徳は、怠惰(ライオン)、短気(アライグマ)、傲慢(アフリカオオコノハズク)なのだ!
丸め誤差を体験するには、Pythonで\nimport numpy as np\nfor x in range(49,52):\n  np.arange(0,1.0,1.0/x)\n  np.linspace(0,1.0,x+1)\nとしてから、Rで\nlapply(49:51, function(x) {\n  list(seq(from=0,to=1.0,by=1/x), seq(from=0,to=1.0,length.out=x+1))\n})\nを実行するとよいです。
-flto オプションはすべてのソースコードのコンパイルとリンカにつけるましょう。-fltoをつけたりつけなかったりすると、リンクエラーになることがあります。
ライブラリを活用するのです。普通のプログラマが再発明したものより、理解容易性や信頼性や性能がはるかにすぐれているのです。美味しいものを食べてこその人生なのです。
__attribute__((always_inline)) で常にインライン展開できるとは限りません。再帰呼び出しはインライン展開できないですし。そもそもinlineはヒントであって命令ではないのです。
大江千里さん作詞/作曲/歌の「夏の決心」という歌があります。子供にとって夏休みは短すぎるというのは確かにそうでしたが、大人にとってもコンパイラやOSを作るには夏休みは短すぎるのです。30日あればOSは作れるとも聞きますが。
Unix系ファイルシステムではファイルを削除するのはinodeに対する最後のリンクが無くなるときですが、要するにreference countingです。普通のファイルを削除するのはRubyだとFile.delete、Pythonだとos.removeと素直な名前ですが、C(というよりunistd.h)やPerlではunlinkなのはそういうことです。
高校で学んでおけば後で役に立つことを、いらないと早合点して学ばなかったために後で大変になる状況を、プログラマには"premature optimization is the root of all evil"(早すぎる最適化は諸悪の根源)と言えば通じると思います。
C++のテンプレートは、コードが間違っていると非常に長いエラーメッセージを出すことがあります。しかしstd::map<int, std::function<void(int)>; のエラーが"template argument 2 is invalid"としか言わないので、>が足りないことを見抜くのに1時間以上掛かったのは厳しくありませんか?
C++のfor文にまつわる分かりにくいバグに、for文の中から呼び出した関数がコンテナの中身を増減したために、for文で回しているイテレータが無効になるというものがあります。
符号化につられて復号を「復号化」と書いてしまうのと、連想配列のことを思わずハッシュと呼んでしまうのは、気を付けたいですね。std::mapとか赤黒木の立場がありません。
変数名にローマ字とか、綴りの間違った英単語や、ネイティブには通じない英語を付けると、ソースコードをgrepで調べにくくすることができます。実際それで悩まされている保守プログラマは多いと思います。
Pythonで\nprint(list(range(1,10)))\nrange = 1\nr = range(1,10)\n> [1, ...\n> TypeError: 'int' object is not callable\nこのrangeへの代入自体はエラーにならないのですね。
Pythonの空リストやNumPyの空配列に対して、maxを取るとエラーになります。しかしRで空ベクトルc()に対するmaxを取ると、警告が出るものの、max(c())は-Infが返ります。なのでmax(max(c()),2)は2です。もちろんmin(c())はInfで、min(min(c()),2)は2です。
映画の登場人物はシステムに侵入できますが、現実のユーザは\n- Caps Lockがオンになっている\n- キーボードの記号の刻印はJIS配列なのに、入力はUS配列\n- 定期的にパスワードを変更させられるので覚えられない\nなどの理由で、自分のアカウントにすら入ることができません。
eXtremeのようにexをXと略すのはよくあることですが、XO (Crystal Oscillator)でCrystalをXと略すのは、ちょっと分かりにくいですね。ちなみにeQuipmentをQと略すと007の道具係です。
定数がマクロより優れているのは、#ifdef COLOR ～ #endif で切り替えるとCOLOURと打ったときに～が除外されてしまう、if constexprならコンパイラが綴りの違いを見つけてくれることです。
RからStanに値を渡すときに、Rから要素の1個のベクトルを渡して、Stanで要素の1個のベクトルを受け取ろうとするとエラーになります。\n"dims declared=(1); dims found=()"\nStanにスカラーが渡っているようですが、回避策はあるのでしょうか?
小学生のときに、アルコール温度計(という名の灯油温度計)を読むときに、目盛の間を読んで0.1度単位で読むと教わった時、なぜ0.1なのだろうと不審に思いませんでしたか? 今調べたら、確度と精度と分解能は異なるのですね。
"Few people can be happy unless they hate some other person, nation, or creed." by Bertrand Russell という言葉があります。ネットの発言を見ていると、このことがよく分かります。
何かまずいことが起きたことの原因を、ヒューマンエラーと分類することがあります。しかし技術や工学は、自然現象を人間にとって都合よく利用することですので、ヒューマンが絡まないということはありえず、従ってヒューマンエラーとは説明を放棄したトートロジーにみえます。
マクロに複数の文を入れるときは、do { ... } while(0) で囲むのです。そうしないと、if文の直後でそのマクロを使ったときに、予想外の動作をすることがあります。if文をブロックで囲まないのが悪いなどと、使う人に責任を転嫁してはいけませんよ。
MinとMaxが双対だと感じるのは、最大10行のときの行数を min(n_lines, 10) で求めるときです。最大と言っておきながらminなのは不思議ではありませんか。
プログラマにとって怠惰、短気、傲慢は美徳なので、「あなたのコードは正しく動くのですか」と訊かれたら、その場でmake test(改行)ッターン!と入力するのです。
Makefileはデバッグが厄介なのですが、そうはいっても make --dry-runとか、Makefileに$(foreach v, $(.VARIABLES), $(info $(v) = $($(v)))) とか、まるっきりお手上げでもありません。
C11と聞いて、static_assertが使えるようになったと答える人が情報科学科に、半減期が20分で崩壊モードが二種類あると答える人が化学科に進むのだと思います。
化学の先生が言ったことに、「真空って何気圧だと思いますか」というのがあります。完全な真空はないので、どれくらい気圧を下げるためにどのような装置を選ぶかということです。コンピュータだと、一次キャッシュから大陸間通信までのレイテンシの階層図がありましたね。
クラステンプレートのインスタンスを作るfactoryメソッドに、いちいち型引数<T>を書きたくないですか? 自由関数テンプレートにすれば、型引数を省略してもコンパイラが推論します。楽をするためにはどんな苦労も厭わないのがプログラマなのです。
JITコンパイラのよいところとして、ビルドしたプロセッサではなく、実行しているプロセッサに対して最適化できる、ということがあるのですね。AVX-512は使ったことがないのです。
コーディング規約で、インデントとか括弧の字下げとか一行は100文字以内とすることがありますが、プログラマに手作業で守らせるのは無理なのです。どうしても守らせたければ、IDEやindentに整形させるのです。
数学が得意な方にとって冪等性とは、固有値が1と0しかない行列にベクトルを掛けると、ベクトルに行列を一度掛けても二度掛けても同じベクトルが得られる、ということでしょうか。これを使って表現できるアルゴリズムは何がありますか。
ビルド中のエラーメッセージを英語で出したいからといって、シェルでexport LC_ALL=Cとすると、svnで日本語ファイル名が扱えなくてエラーになります。LC_ALLはMakefileの中で設定するのですよ。
x86でuint32_t = 1を一度に35回シフトして0になったのは、LTOが有効とか何か条件があります。LTOがないと8になることがありますが、それは32ビットレジスタのシフト回数がmod 32だからです。そもそもC++でNビット整数を一度にN回以上シフトするのはC++の未定義動作だから直す必要があります。
シフト命令でCLレジスタを使うとか、除算命令でAX, DXレジスタを使うとか、役割の固定されているレジスタもインラインアセンブリの破壊レジスタに書かないとダメなのです。こういうのはうっかり忘れやすいのです。
自分の.cから他人の.cにある変数を使いたいからといって、自分の.cにexternを足すのはまずいのです。宣言がint* aで、定義がint[] aだと...
長文を書くときの問題は一貫性の確保です。何日も掛けて文章を書いていると、同じ概念を異なる言葉で書いてしまって、校閲中に後から統一しなければならないことがあります。ですので連続して文章を書く時間を確保して、集中力をぶつけることが重要だと思います。つまり集中工事ですね。
メンバ変数名の目印はあると読みやすいですが、アンダースコアを名前の先頭につけるのはいけませんね。_で始まり次が英大文字の名前はC++処理系の予約語ですから。
すごーい! boost::io::ios_flags_saver は入出力ストリームの設定を後で戻すフレンズなんだね
"Life is a comedy to those who think and a tragedy for those who feel." by Horace Walpole という言葉は、まさにプログラマがプログラミングに熱中する理由なのではないでしょうか
ビットフィールドを設定/取得するのに、マスクしてシフトするのは唯一の方法ではありません。最近のx86はPEXT/PDEP命令が使えます。
ヤクの毛刈り\n1. 数値計算のアルゴリズムを実装する\n2. 手計算では正誤を確認できないので、検証用のテストコードを書く\n3. テストコードに入力するためのテストデータを作る\n4. テストデータを生成するコードを書く\n5. テストのコードとデータは正しいか?(2に戻る)
正しい返り値の型を線でつなげ\nfread・  ・long\nread ・  ・size_t\nlseek・  ・ssize_t\nfseek・  ・void\nftell・  ・off_t\nrewind・ ・int
上流設計で館詰になるとき、ホテルやその所在地を選ぶ条件は、あまり熱心に探さなくても美味しいものがみつかりそうだ、ということです。国鉄のダイヤグラム作成が温泉旅館だったのは、一か所に大人数を収容することと、食事の都合だったのでしょう。
memcpyではなくmemmoveを使いましょうとはよく言われます。エイリアシングが起こりうるからです。thisと引数が同じオブジェクトかどうか(二つの引数が同じオブジェクトかどうか)確かめずに、片方から他方にメンバをコピーするのも、同じくらい危ないのです。
PythonらしいコードがPythonicで、RらしいコードがR-likeなら、C++らしいコードは何と呼べばよいのでしょうか? Modern、でしょうか?
半導体回路には、chip art (または chip graffiti) と呼ばれる、回路とは何の関係もない絵が描かれていることがあります。元々社外秘だったソースコードを公開したときに、コメント文に書かれたジョークも出回ってしまった、ということはあるのでしょうか?
C++例外のwhat()は、std::stringではなくconst char*を返します。なので文字列の内容を==で期待値と比較すると、文字列ではなくポインタを比較してfalseになってしまうのです。
国鉄時代のダイヤグラム作成は、温泉旅館で全国規模の会議を開いていたそうです(富井規雄著 "鉄道ダイヤのつくりかた" オーム社)。ソフトウェアの上流設計も、温泉旅館に館詰にして行った方が、作業に割り込みがないので、いいものができるのではないでしょうか。
デバッグprintfを#ifdef - #endifして、うっかりリリースビルドで消し忘れて変なコンソール出力が出てしまう ><
Boost MultiIndexのタグは、struct id{};と書いてありますが、{}なしでも動くのですね。{}を省かなければならない理由は特に思いつきませんが、宣言は複数あってもよいというは何かに使えるのでしょうか。\nhttp://www.boost.org/doc/libs/1_66_0/libs/multi_index/example/basic.cpp
NULLは変数が何も指さないことを示します。例えばこう使います。\nstd::enable_if_t<boost::multiprecision::number_category<typename T::value_type>::value, std::nullptr_t> = nullptr>\nhttp://secret-garden.hatenablog.com/entry/2016/12/22/032008
旧製品から引き継いだコードに対して、コンパイラのバージョンを上げると警告が増えるので上げたくない、という話を聞いたことがあります。それはコードの警告の出る箇所を直すべきではないでしょうか。それに最近のコンパイラは、コンソール上で警告に色がつくので見やすいですよ。
今更ながらC# (C Sharp)がドの音を半音上げる、だと気がついたのですが、プログラミング言語C#を作った方が思い浮かべた曲は、どの曲だったのでしょうね。公式見解はともかく、++++を並べるならsharpではなくpoundでよかったのですから。
乗算が可換でない例の一つは行列ですが、プログラムでも可換でない例があります。Python 3.6.3では "A"*3 も 3*"A" も"AAA"になりますが、Ruby 2.5.0だと前者は"AAA"になりますが後者はエラーになります。
Rustでコンパイルして生成した実行可能ファイルがYMMレジスタを使っているのを見てすごーい! と思いましたが、clang++が出力したコードもそうでした。ということは、YMMレジスタを使うようにしているのはLLVMバックエンドでしょうか?
NOPを何もしないこと、という意味ではもう使えないのです。今どきのCPUでは、NOPは命令をアラインメントするために使うのです。
ユースケースが単純なことと設計が単純なことは異なる、「自動販売機にお金を入れてボタンを押したら、商品とお釣りが出る」という情報だけで自動販売機は作れない、と以前聞きました。似たような言葉に、株は安く買って高く売れば儲かる、がありますね。それだけ知っていてもどうにもなりません。
変数名には単位を含めて欲しいのです。byteだと思ったらbitなのは不具合の元です。それにusがμ秒だということはなんとなく分かりますが、usecと書かないと我々とか米国と読めてしまうのです。
PageRankの名称は発明者の名前に由来しますが、web pageという一般名詞と思っている方もいらっしゃるかもしれません(掛詞だとは思いますが)。Bloom Filterも考案者の名前に由来しますね。
すごーい! NVI idiom は、公開インタフェースのmutexを基底クラスで一元的に行って、派生クラスでmutexし忘れるのを防いでくれるんだね!
ファンクションキーの使い道で真っ先に思いつくのは、Visual Studioのステップ実行です。他にはEmacsでファンクションキーを押すと、背景色が変わったり半透明になって、裏にあるウィンドウの画面が見えるように設定できます。半透明化を会議でやると便利ですよ。
関数や型がどこで定義されているかを、いちいちgrepで調べる必要はないのです。etagsでTAGSを作って、emacsからタグジャンプすればよいのですよ。
通信におけるinterleavingとは、書類の全ページの端っこが破れてなくなったときは、書いてあった内容を察することができるかもしれませんが、1ページ丸々紛失したらそこに何が書いてあったかは分からないということです
ソースコードのコメントに書く英語は、下記の通りであってますか?\n- 関数/変数が～するなら三人称単数\n- 関数/変数が～であるなら、can, needed by等\n- プログラマが～するなら命令形 : notice that等\n- いずれでもないときは、主語を置いた文章
thread_localを使いたいという言う前に、本当に必要か考えましょう。特定のスレッドしか参照しない値は、スレッド起動時の引数で渡して参照できます。私見ではthread_localは、errnoをマルチスレッド化するために必要だったと思うのです。
int変数の名前はiで始めるべきだという方は、boost::multi_index_container<Element,boost::multi_index::indexed_by<boost::multi_index::ordered_unique<略はどうするのでしょうか?
仮想関数呼び出しが常にvtableアクセスを伴うとは限りません。具象型がコンパイル時に分かるときは、そのメンバ関数を直接呼び出すことがあります(devirtualization)。
GitHub上の私のレポジトリのドキュメントは一部英文で書いていますが、ネイティブスピーカーが見れば改善すべき点はたくさんあると思います。今どきの高校生は英語の先生と、英文をGitで履歴を残しながらレビューできると思うと、うらましくなります。
enumの要素数をプログラマが数えて定数に打ち込むのは、要素が増えた時にメンテナンスできなくなります。要素の先頭が0で連番なら、enumの最後のメンバにCOUNTを加えればそれが要素数になります。
v <- 1:0x20000001\na <- object.size(v)\nprint(a)\n> 2147483704 bytes\nas.integer(a)\n> [1] NA\nオーバフローしたようですね。\n\nlibrary(bit64)\nas.integer64(as.character(a))\n> as.integer64(as.character(a))\n> integer64\n> [1] 2147483704\nよしっ
私の場合はプログラミングでも小ネタでも、何かを語るにはそれなりの調べが必要なのです。これは一般論ですが、専門外の分野について断片的な情報を元にあれこれ語る度胸がどこから湧いてくるのか、さっぱりわからないのですよ。
PCパーツでノーブランドという表現を、私はあまり聞かなくなりました。たまに飲み屋でメニューに冷酒とか燗酒とだけ書かれていて銘柄が書いてないお酒があるが、他の日本酒は銘柄が書いてある、という状況がそれに近いでしょうか。
C++2aの<=>演算子(spaceship operator, three-way comparison)は、C++がRubyの要素を取り入れたかと思いましたが、元々はPerlで定義されていたのですね。元々qsortに渡す関数は3-wayだったので、それから随分経ちましたね。
メタプログラミングというと何だか難しく聞こえますが、アニメの「メタ発言」というのは割とよく知られているので、メタというのは分かってしまえば怖くないと思います。
プロジェクトでC言語しか使わないのにC++を学ぶのは、C++ではすんなりできるのにCでは別の方法が必要か、もしくはCではできないことが何か認識するためです。同様のことがC++とRustの関係に言えそうです。仕事道具だけ学んでも、仕事のスキルは頭打ちになりますよね。
厄介な客「俺が先にラーメンを注文したのに、隣の客にチャーハンが先に来るのはおかしい」\n接客係「太麺を茹でるのは時間が掛かるのです。注文をout-of-order executionでこなしていますからすぐきますよ。」\n客「お、おぅ(OoO)」\nという夢を見ました。
浮動小数をsprintf("%.0e")して7文字(-1e-308)で収まると決め打ちして、-infinityがバッファオーバフローを起こす orz
石油を精製するときに副産物として出る硫黄で硫黄の需要をまかなえるので、硫黄鉱山が要らなくなってしまったそうです。副産物と言えば、PCサーバの排熱は再利用されているのでしょうか。例えばこたつとか。
組み込み32bit CPU向けコードのテストをGoogle Testで書くのに、x86_64コンパイラは要らないです。size_tの違いを吸収するのは大変なのです。target=i686でインストールするのがよいでしょう。
様々な分野で～派と～派に分かれるというのはよくある話です。コンピュータではEmacsとVimとかいろいろありますが、ところでx86アセンブリを書くとき皆さんはIntel SyntaxとAT&T Syntaxのどちらが好みですか? 私はIntel 64 manual通りIntel Syntaxで書いています。
ソースコードを読んだ人が、演算子の優先度を完全に理解していると期待してはいけませんね。expr ? 2 : 3 + 4; 4 + expr ? 2 : 3; 4 + (expr ? 2 : 3); の結果を即答できますか?
計算量的安全性を持つ暗号とは、暗号を破る膨大なPCを運用するお金があれば、美味しい物が食べられるので暗号を解く気が失せるということですね。もちろん数学的好奇心は、お腹が膨れることより大事だという人はいますが。
コレクションの最大要素と最小要素を別々に求めるのは二度手間です。std::minmax_elementを使いましょう。
stderrにメッセージが出力されるかどうかテストするのに、流れるコンソール画面を凝視するのは論外ですね。Pythonなら出力先を実行時に渡すようにして、本番はwarnings.warn, テストはwarnか__call__でメッセージを受け取るモックを渡すのがよいでしょうか。
Rのvarは不偏分散なのです。\nv <- c(-3,-1,-1,-1,1,1,1,1,1,1)\nlength(v)\n[1] 10\nsum(v)\n[1] 0\nsum(v*v)\n[1] 18\nmean(v)\n[1] 0\nvar(v)\n[1] 2  # 1.8ではないです
Rのdplyr::distinctの説明に、"considerably faster"と書いてあります。この表現を覚えておいて、いざ速いアルゴリズムを書いたときに言ってみたいですね。\nhttps://dplyr.tidyverse.org/reference/distinct.html
std::atomic<int>は明示的に初期化する必要があります。初期化を忘れてもコンパイラは教えてくれないのです。教えて欲しいのです。
全/半二重通信はあまり聞かなくなりましたが、鉄道の世界では全二重の容量は半二重の二倍ではないのです。単線の容量は閉塞区間を往復する時間で決まりますが、複線の容量は続行運転の間隔で決まるので二倍よりはるかに多いのです。量の違いが質の違いを生むのです。
割り込みやシグナルやcondition variableは、それらの待ちに入る前に通知される場合に対処する必要があります。そうでないと無限待ちになってしまうことがあるのです。
カフェでトーストを注文したら番号札を渡され、トーストが届いたときに私の番号札は回収されました。店を出るときにその番号の札で待っている別の客がいるのを見て、レジスタリネーミングだと思いました。
プログラミング言語が英語だと思うのは、短絡評価の||は「または」ではなく「さもなくば」と読み、&&は「だったら」「なので」と読むことです。
Pythonistaはパイソニスタ、Rubyistはルビイスト、Smalltalkerはスモールトーカーと読むはずですが、C++erはそもそも何と発音するのでしょうか? シープラスプラサー、でしょうか。
コンピューターのbootは、ブーツの紐を引っ張り上げて自分自身を持ち上げることに由来すると言われます(諸説あり)。その逆は、高層ビルを建てるためのタワークレーンを、大きなクレーンを解体して小さなクレーンで下ろすことです。\nhttps://www.kajima.co.jp/news/digest/jul_2013/feature/question1/index-j.html
コンテナの末尾の要素や、末尾の要素を指すものをendと名付けるのは誤解の元です。STLのend()は末尾の次を指すからです。lastとかに変えて欲しいのです。
Rって一文字の関数や定数が多いですね\nc : ベクトルを作る\nq : quit\nt : 行列を転置する\nT : TRUE\nF : FALSE\n他にもI, stats::C,Dがあります。
ソースコードのcodeは単数形で、codesにすると符号という意味になるようです。しかし野菜はvegetablesで果物はfruitなのはまだわかるのですが、sportとsportsの使い分けが未だにわからないです...
メール破産(email bankruptcy)という言葉があります。要するに長期休暇明けに処理不能なほど大量なメールがあったら、すべて消して再送されるのを待つのです。ITSとワークフローシステムが正しく運用されている組織なら大丈夫ですよね。
決まり字とは少し違うのかもしれませんが、ディレクトリがファイルと下位ディレクトリをあわせて一つしか含まないときは、bashでtabを連打するとその唯一のファイルか下位ディレクトリが補間されます。
C++のautoは便利だが万能ではありません。上手く行かない例の一つはproxy classです。他には std::atomic<int> aから値を取り出すのに、auto v=aと書けないことです。atomicをコピーしようとして失敗するので、型かload()が必要です。
External fragmentationとは、回転寿司で一人分の席が複数空いているが隣接していないので、二人連れの客が席が空くのを待っている状態です。なおラーメン屋とバーでは既に座っている客が隣に移って空けてくれますが、これをcompactionと言います。
Python 3.8にセイウチ演算子:=が入ったそうですね。Rで、data frameの列名を変更するときに、変更後の列名を変数で渡す場合は:=が必要です(=だとエラーになる)\nlibrary(dplyr)\ndf <- data.frame(x=c('A','B'))\ns <- 'z'\ndf %>% dplyr::rename(UQ(s):=x)\nz\n1 A\n2 B
配列の要素数を #define arraySizeof(a) (sizeof(a)/sizeof(a[0])) で数えるのは、Cなら仕方ありませんが、C++ではやめるましょう。aにポインタを渡すと、変な値が返ってきます。constexprテンプレートを使いましょう。
テキストファイルの数行だけ数字を,で区切るのに、スクリプトを書く必要はないのだ! Emacsのキーボードマクロで書けるのだ!\nC-x ( M-f , C-a C-n C-x ) C-u C-x e\nアライさんにお任せなのだ!
古いC言語の習慣からか、未だに変な略語を発明する人がいます。CではなくC++は、シンボルを31文字以内に収める必要はありませんよ。ソースコードはコンパイラではなく人間が読めるように書くのです。
Rのheadとtailは、個数に負の数を与えることができます。つまりhead(v, -1)でvの末尾だけを、tail(v, -1)でvの先頭だけを除くことができます。Rubyのv[-1]が末尾の要素を返すのも同様に、気が利きますね。
Zipでダウンロードしたソースコードを展開してそのままコピーすると、時差のせいで、現在時刻より古いためにmakeでリコンパイルされないことがあります。make rebuildすれば確実ですが、リビルドは時間が掛かって嫌ならtouchして必要なファイルだけコンパイルされることを願いましょう。
Whereを「ただし」と訳すとしっくりくることがある、というとびっくりすると思いますが、数式で「ただしX=exprである」というのを"where X=expr"と書きますよね。あるいはHaskellでおなじみでしょう。
プログラミングと株取引は似ています。サッカーや将棋のようなレベル分けされたリーグはなく、プロとアマチュア、商品、製品とそうでないソフトウェアが全力で勝負している世界です。
関数の返り値型をautoにしたら、return vec[i]でベクタの要素への参照は返せず、要素のコピーが値渡しされるのです。そこはdecltype(auto)が必要なのです。
Daniel Jackson 著 "抽象によるソフトウェア設計 Alloyではじめる形式手法"という本に、"僕は僕のおじいちゃん (I'm my own grandpa)"とはどういう状況かを求める例が載っています。画像検索で答えを見る前に、自力で解いてみると面白いでしょう。
可逆圧縮を、布団圧縮袋に例えるのを読んだことがあります。その例えで言えば、フリーズドライのインスタントコーヒーも、濃縮還元ジュースも、乾燥わかめを水に浸して戻すのも、可逆圧縮と伸長ですね。あるいはsparse fileですね。
「服を買いに行く服がない」という言葉があります。PCもスマホもないと、各社料金プランの比較も、店までの地図を入手するのも大変なので、「スマホを買いに行くスマホがない」のではないかと思いました。
電話機やキーボードについている#はシャープではないのです。Poundとかhashとかnumberとか読むのです。シャープはU+266Fという別の文字です。
曽野綾子著 "無名碑" に、ダム建設について「僕の仕事は一生どんなにいい仕事をしても個人の名前は残らない」とあります。だからこそプログラマにとって、G. Pascal Zachary著 "Showstopper!"(山岡洋一訳 "闘うプログラマー") は重要だと思うのです。
製品コードの中に直接#ifdef UNITTEST ... #endifと書くのは極力避けたいのです。そこはdependency injectionを使いたいのです。
Embedded systemを「埋め込み」システムと訳すのは止めましょう。組み込みシステムと訳して欲しいのです。
最適化と言えば、私はC++コンパイラのようなコードの最適化を思い浮かべましたが、今検索すると数理最適化の話が結構出ます。今までもずっとそうだったのでしょうか。
「符号付きと符号無しの整数式の間での比較です」という警告は文字通りの意味ではありません。同じデータ構造を、異なるファイルで、異なる基本型で扱っている良くない設計とか、typedef, using, decltypeなどを使うべきところをものぐさして基本型を使ったときに、ツケを払わさせられることです。
NULLというと何も指さないポインタか参照を思い出しますが、帰無仮説のことをnull hypothesisというのですね。
ダブルバッファリングとは、トイレットペーパーが2ロールセットされているのを両方少しずつ使うと危機が訪れるのでそういうことは止めましょう、という意味です。
日本語には何でもカナ4文字に略すという習慣があります。50の4乗は6250000しかありませんから、国内の全Twitterユーザがそれぞれランダムに思い浮かべた4文字略語に、その略語の意味を与えてツイートすると、一日経たずに略語集が網羅できるかもしれません。
goto廃止論は、元の論文を読まないまま語られることが多いです(私も読んでいません)。Cは関数のリソースクリーンアップのためにgotoが必要、C++はではRAIIを使わないと例外安全にならないのでgotoは使用しない、以上、ではありませんか?
「プログラミングRust」に、生成するものが尽きたジェネレータはNoneを返し続けるとありましたが、これはべき乗則の一種でしょうか?
「卵が先か鶏が先か」の答えは分かりませんが、旨いものと辛口の日本酒の相互再帰は、旨いものが先の場合があります。それは客が席につくと、おしぼりとお通しを持ってくる店があるからです。この場合、文脈自由文法の開始記号は旨いものです。
思いついたことは実装することができる、の対偶は、実装できないことは思いつかない、です。思いついた解答を制限時間内に実装できるプログラマって強いですよね。 (元の言葉は"If you can dream it, you can do it." by Walt Disney)
メンバ変数を増やしたとき、複数あるコンストラクタすべてに、そのメンバ変数の初期化を加えるのを忘れるというのはよくあることです。予防とDRYを兼ねて、メンバ変数の定義に初期化を置くのです。
仮想アドレス: Virtual address\n仮装アドレス: IP Masquerade\n下層アドレス: MAC address\n貸そうアドレス: DHCP server\n過走アドレス: Buffer overrun
テンプレートマッチングをstd::is_pointerだけで済まようとして、配列T(&)[SIZE]とstd::is_null_pointerに対するマッチングを忘れる ><
ピギーバックという用語がありますが、これは朝食を\n「トーストとブラックコーヒーを2階で(と言ってSuicaをみせる)」\nと注文することで、店員の「ミルクと砂糖はお付けしますか」「1階ですか2階ですか」「支払方法は」という質問を省略して、注文のスループットを上げることです。
C++でifとかforとか無いただの{}を、無駄だからといって削除してはいけません。それはブロックスコープで、変数の有効範囲とデストラクタ呼び出しを規定しているのです。一々do-whileで囲ったりしないのですよ。
RStudioで複数のスクリプトを連続実行すると、前のスクリプトでlibrary()したのがそのまま残るので、後のスクリプトで必要なlibrary()を忘れていても実行できてしまうことがあります。リリース前にスクリプトをRscriptで単独実行して動作確認するのは重要ですね。
メモ帳からUTF-8で保存したテキストファイルやRのreadr::write_excel_csvで書いたCSVファイルにはbyte order mark (BOM)がつきますが、std::regexはBOMを3文字として扱うので/^Word/は先頭行だけ一致しないです。他のプログラミング言語の正規表現でも起こるかもしれません。
「やはり俺の青春ラブコメはまちがっている。」は「はまち」と略すらしいですが、catコマンドはconcatenateの略なので、古今東西考えることは同じだと思いました。
ヘッダファイルをインクルードする順番が入れ替わるとエラーになるのは、不親切な設計ですね。宣言と定義を適切にヘッダファイル群に分割して、依存関係を一方向にそろえるのです。
RGuiで"その他->全てのオブジェクトの消去"を実行すると、ダイアログが出て「本気ですか」と訊かれます。メニューを英語にしたら、"Remove all objects"->"Are you sure?" だったので、「本当によろしいですか」という意味だったのですね。
ディレクトリへのシンボリックリンクを作成しようとして、ln -sの引数を逆にしてしまう。\n$ ln -s TaraiMawashi dir/\n$ cd dir\n$ ls -l\nlrwxrwxrwx TaraiMawashi -> TaraiMawashi
0以上1以下(1未満ではない)の乱数を作ろうとしてrand(1)したら、0しか返ってこなかったことはありませんか?
【教科書に書いていないプレゼン術】\nプレゼンテーションの最中に、新着メールのタイトルがポップアップ表示されて、聴衆に丸見えになる。
月を指す指は月ではない、という言葉があります。C言語で自分自身を指すポインタというのは作れるのでしょうか。もちろんポインタをアドレスとみなしてreinterpret_castするのは無しです。
Prettyはかわいいというより見た目がきれいという意味です。従って、__PRETTY_FUNCTION__ はかわいい関数名ではなく、見た目がきれいな関数名です。
C++の乱数エンジン(std::mt19937など)にseedを設定することはできますが、設定したseedを読み出すことはできません。それならseedを設定したか忘れたかどうかをパステストするには、seedを設定した後に最初に生成する乱数が一致するかどうか比較すればよいと気づきました。
C++17の新機能にstd::hardware_{destructive|constructive}_interference_sizeがあります。マルチスレッドで極限の性能を追い求めるC++erは待っていたのではないでしょうか。
キーボート言えば今どきPCのキーボードを意味しますが、元々は鍵盤だったのでしょう。キーボードは大きさがまちまちですが、もしピアノの大きさがいつもと違ったら、ピアノを弾く人にとってどうなのでしょうね。\nhttp://littlehands782.blog.fc2.com/blog-entry-67.html?sp
テンプレート周りで数百行のエラーメッセージを出すC++コンパイラ「私が何で怒っているか分かる?」
プレゼンテーションの練習では、スライドを最後列から読めることと、聴衆の方を向くことを指導されます。ですが実際には、読めないほど細かい字で作った資料を朗読する人がいます。スライドを禁止したら、聴衆の方を向いて、伝える価値のあることを理解させることに注力して頂けるでしょうか?
ビットフィールドのアラインメントに、隙間のビット数を指定したダミーのメンバを加えると、他のメンバのビット数が変わった時にダミーを変え忘れてメンバのレイアウトがずれてしまうです。無名でサイズ0のフィールドを使うのです。
ディレクトリトラバーサルという攻撃手法があります。ところでCのコードに、 #include "../detail/foo.h"と、横断するパスを書かないで欲しいのです。それは実装部のヘッダだから他モジュールには公開したくないのです。インクルードパスはヘッダファイルの公開範囲を規定しているのですよ。
静的解析ツールの指摘が、意図的、誤検出だったときに、意図的、誤検出を選択するだけでは何のための静的解析か分からないのです。第三者に分かるよう理由を書いてレビュアーの確認をもらうのですよ。
文字列をキーとした連想配列を作る\n→数字を格納したいので、文字列表現で格納しよう\n→99999まではテスト通るのに、100000は通らない、なぜ?\n→変数を表示してみる\n[1] "1e+05"\nあ゛
「printfを入れたらなぜか動いた」\n説明しよう! それはprintfをまたぐ最適化が抑止されたから、volatileではない変数を読みに行くようになっただけなのだ! 忘れずにvolatileをつけるのだ!
読むのが難しい文章をそもそも読める必要があるのか、という方は一度特許明細書と、特に請求項を読んでみたらいかがでしょうか。特許に比べれば、学術論文は理解して引用して頂くように、はるかに読みやすく書かれていると思います。
Rでlog(1/2)を計算すると-0.6931472が返ってくるので、ついC++でstd::log(1/2)と書いたら-infが返ってきました。
C++の#defineとテンプレートの違いはいろいろありますが、テンプレートにしかできないことに再帰呼び出しがあります。
C/C++の罠の一つに、long longからIEEE 754 doubleへの変換が暗黙に行われることがあります。仮数部は52ビットしかないから64ビットの整数はまるまる収まらないのです。
全加算器はcarry look-aheadを用いることで遅延を減らせます。ちなみに自宅で配達を待っているときに、車のドアを開閉する音が聞こえてきたらドアに向かうと、荷物を受け取るまでの遅延を減らせます。
決まり字の応用例は、地名の絞り込みです。カーナビやJRの券売機から地名や駅名を入力すると、最初の数文字を入力した時点で、残りは入力しなくても画面に全候補を表示してくれます。
専門用語を英語で正しく言えるかどうかは、ネットで検索するときの効率に影響します。例えば任意精度実数の「任意」に相当する形容詞は、anyではなく、arbitraryなのです。
Pythonのselfと異なり、C++のthisはたいていの場合省略できますが、メンバ関数へのポインタが指している関数を、自インスタンスに対して呼び出す (this->*func)() ときは省略できないのですね。
私がMOESI(Modified, Owned, Exclusive, Shared and Invalid)プロトコルを知ったとき、まだ萌えという言葉は一般的ではありませんでした。
セマフォ(semaphore)は鉄道由来の用語です。Mutexの可視化なら、高知の路面電車(とさでん交通伊野線)でタブレット交換をみることができます。
.cppから.dファイルを作るときに、自動生成する予定のファイルが見つからない、とエラーが出るのは困るのです。-MGオプションが必要なのです。
I18n is an abbreviation for the word internationalization. In this manner, Llanfairpwllgwyngyllgogerychwyrndrobwllllantysiliogogogoch Railway Station in Wales becomes L56h and Chojagahamashiosaihamanasukoenmae Railway Station in Japan becomes C31e.
CVといえば、声優さんでも履歴書(curriculum vitae)でもなく、cv-qualifierを思い出すのがC++erです。
プログラミング環境を快適にするために、テキストエディタのフォントをデフォルトではなく、{I,l,1,|}, {0,O}の区別がつきやすいフォントを使うのがよいでしょう。例えば、Consolas + Migu 1M です。
技術文書で主語を明確にするのは当たり前ですが、特許の請求項というものは権利化可能な範囲で請求範囲を広げるので、どれだけ一般化するかということを自覚して書くのです。世の中主語が大きすぎる文章を頻繁に見ますが、おそらくそういう訓練が足りないのでしょう。
単にMNISTというと、手書き数字の画像とその画像がどの数字か、というデータセット(the MNIST database of handwritten digits)を指すようですが、MNISTのNISTは実は団体名です。USBメモリをUSBと略すようなものでしょうか。
R以外のプログラミング言語を知っていて、Rを使うとつまづくのは、Rでスカラー変数にみえるものは要素が1個のベクトルだということです。ですがスカラーが無くてベクトルであるという作法は、慣れると大変便利です。
複数行マクロを入れる do {...} while(0); の;は余計なのです。マクロを展開する場所で、直後にelseを置くとコンパイルエラーになるから ; を取り除くのですよ。
randと言えば(昔の実装はあまり質が良くないかもしれない)乱数生成器ですが、RANDライセンスはreasonable and non-discriminatoryの略です。
コンストラクタでうっかりm_(m_)と書くと、メンバ変数をメンバ変数で初期化しているから初期化していないのと同じことです。ですがm_がstd::vectorへの参照だと、コンパイラは教えてくれないことがあります。こういうことは警告して教えて欲しいのです。
C言語でありがちですが、長さNの配列を、for(int i=0; i<N; ++i)で回すと、配列の長さを増やしたときにfor文を変え忘れるのです。C++でiが不要なら、range-based forかstd::for_eachを使うですよ。
C++で明示的にthisと書くことはあまりありませんが、例えば\nstd::bind(&T::MemberFunction, this, std::placeholders::_1)\nとかがありますね。
std::mapのvalue_typeはstd::pair<Key, T>ではなく、std::pair<const Key, T>です。
std::min(set.begin(), set.end()) が返すのは、setの最小要素を指すイテレータではありません。set.begin()とset.end()を比較して、set.begin()を返すのです。だってsetが空の時に、要素は返せないでしょう?
関数型プログラミングはこうでなくっちゃ!\nf <- functional::Compose(lubridate::hms, lubridate::seconds)\nf('01:00:04')\n[1] "3604S"
extern "C"はC「リンケージ」を指定しているのであって、C言語としてコンパイルしろとは言っていないのです。CとC++の両方でコンパイルされるヘッダファイルなら、両方で通用するコードを書く必要があります。
std::swapは例外を投げずに変数を交換できるフレンズなんだね。おもしろーい!
C++のclass Outerの中でT型を定義したとき、メンバ関数定義 T Outer::Foo(T&) {...} の引数はOuter::Tを指しますが、返り値はOuterの外で定義されたTを指すのは不思議ですね。
IEEE doubleの指数部は、1023が0を意味するように下駄を履かせています。「下駄を履かせる」の元の英語は、biased exponentらしいです。ちなみにある数のdoubleがどういうビット列になっているか見るには、gdbでx/8bxするのがお手軽です。
コンテナの要素の型をソースコードにべた書きしたら、型を変えた時に修正が大変なのです。 std::vector::value_typeとautoとdecltypeを使うのです。
Pythonで関数スコープの外にある変数を変更するには、変更する変数をnonlocalと指定する必要があります。Rで同じことをするときは、<<-という演算子かassignを使うのですね。
.hppからモックなどを作るときに、自動生成する予定のファイルがインクルードできないのは困ります。インクルード可否を#ifdefで切ってMakefileから注入すればよいですが、C++17以降は__has_includeが使えそうですね。
IEEE doubleの指数部は、1023が0を意味するように下駄を履かせています。「下駄を履かせる」の元の英語は、biased exponentらしいです。ちなみにある数のdoubleがどういうビット列になっているか見るには、gdbでx/8bxするのがお手軽です。
コンテナの要素の型をソースコードにべた書きしたら、型を変えた時に修正が大変なのです。std::vector::value_typeとautoとdecltypeを使うのですよ。
Pythonで関数スコープの外にある変数を変更するには、変更する変数をnonlocalと指定する必要があります。Rで同じことをするときは、<<-という演算子かassignを使うのですね。
CとC++で共用するヘッダファイルで空の構造体を定義するとどうなるでしょうか。gccは0 byteでg++は1 byteですが、そもそもCで空の構造体は作れないのです。
ポインタの差をintに入れるのはよろしくありませんね。ptrdiff_tを使うのです。符号ありだから、printf書式は"%td"です。
出力ファイルストリームのcloseをデストラクタ任せにすると、noexceptだからcloseで書き出しに失敗したことを検出できないのです。ファイルが閉じないよりましかどうかは、議論が分かれるところでしょうけど。
if constexprは、condが成立してもしなくてもコンパイル可能でなければならないです。つまりPEXCEPTION_POINTERS->ContextRecord->{Rip|Eip} はコンパイルエラーになるので、#ifdefにする必要があります。
公開するヘッダファイルに、実装にだけ必要な宣言や定義も書いて「全部入り」にすると、他のプログラマがドキュメントに無い「隠し機能」だと思って使ってしまいます。ヘッダファイルは公開度に応じて適切に分けましょう。
複数行のコードをとりあえずコメントアウトするのに/* */を使うと、/* */が入れ子になっておかしくなることがあります。そういうときは #if 0 - #endif にして欲しいのです。
シンボル名やコメントを一括置換するときは、置換元を狭く限定して、過剰に置換していないかちゃんと確認しましょう。バをヴァに置き換えるだけだと、カヴァンになってしまうのです。
時刻表記のテストケースには、うるう秒も要ります。std::get_timeは"2017-01-01 08:59:60"をちゃんと解析してくれるのです。
RGuiで無関係なスクリプトを連続実行すると、後のスクリプトで未定義変数を使ってエラーになるはずが、前のスクリプトで定義した値を拾ってしまいます。動作が不可解なときは、rm(list=ls())できれいにするのがいいですね。
C++で変数がintなら、変数名の先頭にiをつけてiVarにするのがよいという主張があります。では後で64ビット化したときにlong longに変えたら、保守プログラマはllVarにしてくれるとお思いですか?
バージョン管理システムにソースコード以外入れたら怒られが発生するの、さすがに2020年にはありませんよね。え、バージョン管理システムを使ってない、そんなあ。
C++で整数に対するlog2はライブラリにC++17にありませんが、ループを回すのはイケてないので、BSR命令か__builtin_clz()を使いたいところです。が、ついに、C++20にはstd::log2p1が入ります。やった!
二つのオブジェクトが「同じ」と言われても、同値(same)なのか同一(identical)なのか曖昧なのです。それとequalityとequivalenceという単語の違いもややこしい...
volatileはstd::atomicではありません、本当にそこはvolatileでいいのですか、と指摘する静的解析ツールが欲しいです。
テストの成功をOKと書くのはよいですが、失敗をNGと報告しないするのはよくない習慣です。Failedと書かないと通じませんよ。
新しく雇ったプログラマに対する教育というものが、一般的にどういうものかという事情は知らないのですが、知的財産権に対する教育というのはどれくらいされているのでしょうか。オープンソースライセンスとか特許権について、最近は大学でどれくらい教えているのでしょうか?
「0は何進数ですか」\n「8進数です」
SFINAEとは、「へーき、へーき! テンプレートによってマッチングできる型違うから!」
Google Testなどサードパーティーのヘッダファイルは、-Iではなく-isystemでインクルードしましょう。そうしないと対処不能な警告が出て、-Werrorだとビルドが止まってしまうことがあります。
三項演算子(cond ? t : f)がconditional moveへの直訳なら、++もALUを使わずにレジスタをインクリメントする命令の直訳ですし、+=はアキュムレータレジスタへの足し算です。ですが++や+=は可読性が低いという話はあまり聞かないのはなぜでしょう?
std::is_floating_point<boost::multiprecision::number<boost::multiprecision::cpp_dec_float<200>>>::valueがfalseになるので、代わりにboost::multiprecision::number_categoryを使う必要があると知って、C++を完全に理解する日は遠いと思いました。
C/C++ポインタ\n「参照」\n「Nullable(optional)」\n「イテレータ」\n「指定サイズのメモリ確保」\n「Memory mapped I/Oアクセス」\n「Reinterpret cast」\n「引数が指すものが不変」\nもう全部あいつ一人でいいんじゃないかな
檀ふみ著"ありがとうございません"から重引しますが、曾野綾子さんが"ワープロで書く原稿は「油絵」だ、言葉を幾重にも重ねて仕上げていく"とおっしゃったそうです。確かにウォータフォールではなく、テスト駆動でインクリメンタルにソフトウェアを開発するのはこういうことだと思います。
私がアルゴリズムという言葉を知ったのは大学に行ってからですが、最初に出会ったアルゴリズムらしきものは大判時刻表です。列車の乗り換えを決めるのは、目的地の到着時刻を決め打ちして出発地に向かう方が、出発地からたどるよりずっと簡単だ、というのは何という名前のアルゴリズムでしょうか?
大学で教わったこととして、普段から何かしら書き留めておくと長文を書く時の種になる、ということがあります。確かに特許の明細書や図面を再利用すると、書く時間を節約できますので、文章はたくさん書くともっと書けるようになるようです。Rで図を描くコード片を作っておくのもよいでしょう。
元素記号を並べると、一文字の記号が二文字の記号の先頭になりうる(H/He, C/Cu)ので、瞬時復号可能ではありませんよね。
最尤推定は最も尤もらしい推定ですが、英語ではmaximum likelihoodですね
Dataがdatumの複数形なら、複数のデータは何と書くのか悩みますが、data setsと書けばよさそうです。
プログラマがツイートの誤字を直すのに、\ns/pattern/replacement/g\nとツイートするので、この正規表現にマッチングする正規表現で検索すれば、プログラマが見つかるのではないかと思いました。
x86 CPUでも64ビットアプリと32ビットアプリで、浮動小数が同じ計算結果を返すとは限りません。SSEは内部64ビットだが、x87は内部80ビットで計算しているからです。
__PRETTY_FUNCTION__の長さを決め打ちすると、引数にboost::multiprecisionとか取るテンプレートが数百文字になってあふれることがあります。
コンパイラを壊す方法\nC++テンプレートメタプログラミングでアッカーマン関数を計算する。テンプレートの再帰深度の限度に達してエラーになってくれるとよいのですが...
Googleの看板"{first 10-digit prime found in consecutive digits of e}.com"は、eをイタリックにして、連続する10桁と訳さないと意味が通じないのです。
C++のクラスにoffsetofを取ると警告が出ますが、non standard layout型に対してoffsetofを取る意味はありませんよね。
256-bit YMMレジスタに読み込む値を確保するのに、malloc()だと32 bytesアラインメントが保証されない可能性があります。こういうときは std::aligned_storage の出番です。
Null object pattern は、if (pointer) を省いて見通しをよくするパターンなんだね! /dev/null のフレンズなんだね!
WindowsのUIはある時期から「フォルダー」のようにーが付くようになりましたが、コマンド(command)とコマンドー(commando)は別の単語だということを、辞書を引くまで知りませんでした。そういえばロボコップはcommand.comを実行していますよね。
std::anyオブジェクトにint*型の値を入れたとき、 std::any_cast<const int*> で取り出すと std::bad_any_cast が飛んできます。C++20以降でもこうなのでしょうか?
sizeof(4)は、"size_t型の4"という定数ではなく、"int型の4"のbyte数なのですが、偶然一致すればコードとして動いてしまいます。alignof(4)とalignas(4)も区別しましょう。
よく知られたアルゴリズムをそのまま使うときは出典を明記して欲しいのです。そのコードがXorshiftだということは、保守する人には分からないでしょう?
BOMがあるかもしれないし、ないかもしれないUTF-8なCSVファイルをRで読んで、Excelで読めるようにBOMをつけるのは、readrが幸せな気がします。readr::write_excel_csvがありますので。
2の160乗通りのGit commit IDを使い果たすことはできない、と言われても今一つピンとこないと思いますが、アボガドロ定数(2の79乗)より大きいことなら、なんとなく分かっていただけるのではないでしょうか?
何かがランダムに発生するなら粗密があるのです。等間隔ならランダムとは言わないのです(対偶)。よってしばしば待たされるのは当然なのです。
ソフトウェアの規模を測る方法は、ISO/IEC標準に複数あります。何かを測ることの身近な一例として、アメリカの株式指標には、DJIA, NASDAQ Composite, S&P 500の少なくとも三種類があります。何かを一つの指標で測ることはしばしば困難です。
固定長配列同士のmemmove/memcmpは、サイズが合っているかどうかstatic_assertを書きましょう。配列のsizeofは配列全体のbyte単位サイズを返してくれますので。
「他分野」と入力するためにtabunnyaとキーボードを打って、nが一個抜けたので、「たぶにゃ」と変換されました。なんかカワイイですが、nを「ん」にするか後続のカナと関連付けるかは、辞書を引いて自動判定するのではないのですか? 本厚木もnが抜けるとダメみたいですし。
Emacsの凄さを見せつけるのは、手作業で段落を整形して一行の長さをそろえる代わりに、M-q 一発で済ませることです。人を呼んで目の前でやってみせましょう。(setq-default fill-column 70)で一行の長さを変えられます。
std::remove「おまえは要素を削除して、俺は要素を取り除く。そこになんの違いもありゃしねぇだろうが!」\nstd::erase「違うのだ!!」
ABA問題と言えば、ロックフリーアルゴリズムにまつわる厄介な問題です。ところで、ルービックキューブを解くときの手順で、A-B-Aの逆とひねることをABA'と表記するようですね。'をprimeと読むかdashと読むかは以下にあります。\nhttps://english.stackexchange.com/questions/26530/how-is-a-in-mathematics-pronounced
シングルスレッドのアプリはSetProcessAffinityMaskを1に設定すると速くなるかもしれませんが、マルチスレッドのときもうっかり1に設定すると1コアしか使ってくれないのでスレッドが並列実行されません。小細工はほどほどにしましょう。
「おトクーポン」や「オトクーポン」がお得なクーポンだと気がつくのに数秒掛かりましたが、つまり瞬時復号可能ではないということですね。
1 == 2の証明というのがありますが、slim chanceもfat chanceも起きる可能性がほとんどないことを指すので、 slim == fat なのだと思います。
ベストエフォートとはいわば「状況次第、成り行き」です。成り行きと訳さなかったのは、一見高度な技術に見えないと思ったからかもしれませんが、成り行きには安くて便利という長所があります。お抱えシェフを雇うより、ランチを好きな時間に好きな店で食べられる方が多くの人にとって幸せでしょう。
非協力ゲーム理論で個人合理的な行動を、人は必ずしも取らないことは、最後通牒ゲームが示しています。並盛と大盛の値段が同じでも並盛を頼む人は多いでしょう。行きつけの店で大盛を頼んで食べ残すのはバツが悪いですが、もう一度くるかどうか分からない店でも食べられそうな量を注文しますよね。
0/1-basedといえば、午前12時と午後12時がいつか分からなくなるのですが、分かりやすい覚え方はないでしょうか? 00分ちょうどなら正午(noon)、midnightと書けば済むのですが...
オブジェクトをコンストラクタの引数nで初期化する、というユニットテストを書くときにnを二通り以上用意することで、本当に指定したnで初期化したのか、実は引数は反映されていないがたまたまn(特に0や1)で初期化していたのか区別する、というのは大事だと思うのです。
配列や構造体はどんなに大きくしてもいいという訳ではありません。ARMコンパイラは4GBまでできても、MinGW-32bit GCCは0x7fffffffBより大きくできません。ユニットテストの妨げになることを「俺の環境では動く」と主張するのはやめましょう。
「昔は～がなかったんだから我慢しろ」的な物言いを、たまにTLで見かけますが、強いプログラマからは聞きません。料理をする人に対して、電子レンジとオーブンとガスコンロと冷蔵庫は無いけど薪ならあるよ、とは言いませんからね。
何かを習得するのに、徐々に(linear)ではなくある日突然まとめていっぺんに(by stages)分かる、ということがあります。語学の学習曲線はそのようだと聞きます。C++も言語なのですが、どうだったでしょうか。
分類問題において、標本の数だけカテゴリがあるのは、単に標本を数え上げるだけで意味のない過学習です。しかし社会を語るときに人それぞれ違う、の一言で済ませるのは、なぜか受け入れられるようです。社会とは人の集合とその関係性であり、社会を語るとは部分集合の共通点と違いではありませんか?
size_tのビット数が分からないからといって、printfの書式指定に%luと書くのはやめましょう。%zuと書くのです。
uint8_tの値をstd::cout にそのまま<<でデバッグ出力して、数が表示されると思ったら文字が出てしまった、というか空白だったとき、strong typedef (opaque alias)が欲しくなりませんか?
std::ios_base::ate は「食べた」ではなく、at endの略です。食べないでくださーい!
boost::optional は、返り値が得られないことを例外なしで教えてくれるフレンズなんだね
組み込み系だからって、即値アドレスをreinterpret_castしてレジスタやメモリにアクセスすると、PC上でユニットテストできなくなります。アクセサ関数を経由するのです。こういうことはテスト技法の本に書いてありますよ。
std::dequeは「デキュー」ではなく「デック」と呼んで欲しいですし、SYN flood attackは「フラッド」攻撃と呼んで欲しいのです。
C++のstd::vectorにargmin(最小値を取る要素のインデックス)はあったかなと思ったのですが、std::min_elementで取得したイテレータiから、要素番号をstd::distance(v.begin(), i)で取得すればいいのですね。
C++とCで共用するヘッダファイルで、構造体の内部構造体名はすべての構造体で一意でなければならないです。そうでないとCでは構造体を再定義しましたとエラーになります。そもそもCで内部構造体を使う必要が、本当にありますか?
Rは変数名に.(dot, period)を使えるのですね。Unixのファイル名に含まれる.(dot)には特別な意味はない、つまりファイルシステム自体には拡張子という概念がない、というのを思い出しました。
Hyper-Threadingとは、「パイプライン資源の狩りごっこだね! 負けないんだから!」
C++キャストは確かに字面が長いですが、だからって横着してCキャストにすると、ポインタのconstが剥がれても気がつかないです。プログラマの三大美徳は怠惰、短気、傲慢ですが、横着は歓迎されません。
一万時間の法則の真偽は私には分かりません。ところで、学生時代に一万時間費やせることの延長が職業になり、なおかつ多くの雇用があるという点で、プログラミング以外にはどのようなものがあるのでしょうね。
うちにある洗濯乾燥機のボタンは、洗濯乾燥が終わった時に一度押すとドアロックが解除され、もう一度押しても何も起こらないのですが、これを冪等性というのでしょうか。
プログラムで変数の代入先をy=f(x)と左側に書くのは、英語でlet y be f(x)と読めるからでしょうか。HaskellやMLにはletがありますね。
5000兆は53ビットあるのでdoubleの仮数部(52ビット)に収まらない、と思いきや、実は仮数部の最上位bitは1であることが暗黙に仮定されているので収まるのでした。9007199254740993円欲しいと言えば精度が足りなくなります。
グローバル変数の初期化順序に依存して動かなくなるコードは、*.oをリンクする順序が変わることで発覚することがあります。Makefileで$(sort *.o)することで問題を回避できますが、逆に*.oの順序をランダマイズして問題をあぶり出すことはできないでしょうか。
午後21時という表現は変なのですが、言いたいことは分かります。Rubyなら以下の意味ですね。timestamp.sub(/(\D*)(\d+)/){t=$2.to_i;(t+((!$1.include?("午後")||(t>12))?0:12)).to_s}.to_i
SQLiteの発音は、エス-キュー-エ-ライト、と、シーカライトと両方あるみたいですね。"SQLite pronounce"で動画検索すると両方出てきます。
C++でキャストしたらSEGVした、という事例の一つはreinterpret_cast<T*>したらアラインメント違反ですが、もう一つはread-onlyなページ(.textセクション)をconst_cast<T&>で書き換えようとした、です。他には何があるでしょうか。
仕事が速いことの定義はいろいろありそうですが、与えられた時間の2割で仕事を8割まで仕上げて他の方に見せたら、自分では8割だと思ってた出来が他人から見ると10割を超えていたのでその場で合格してしまった、というのもあると思います。
C言語の同一配列の各要素(最終要素の一つ先を含む)について、それらを指すポインタの差を定義できる(ptrdiff_t)。しかしNULLであるかどうかは比較できてもNULLとの前後関係は定義しえない、というのは意味として妥当でしょう。\nhttp://en.cppreference.com/w/cpp/language/operator_comparison
自分の分野外の文章を読むと分からないことがあって、その分からない用語の説明を読むとまた分からないことがあって、こうして分からないことが増殖するが、ある点を境に減っていく、という現象を何と呼ぶのか分からないのですが、要するに不具合曲線またはシグモイド曲線ですよね。
負の整数を2で割るのに、算術右シフト一回だけでは済まないです。-1を2で割っても-1になってしまうからです。正解は、コンパイラがどんなコードを出力するか確認すると分かります。
昼休みに食事に行くためにエレベーターに乗ろうとすると、上層階の人ですでに一杯なので乗れないことがあります。上層階まで行かないで途中で折り返すと中層階の人も乗れますが、その分上層階で待つ人が増えます。上手いstarvation-freeアルゴリズムはあるでしょうか?
Python 3.7でasyncがキーワードになったそうです。C++11のfinalとoverrideは特定の場所でしかキーワードにならないので、(メンバ)変数名や関数名に使えます。ですのでauto override = final.override();をコンパイルできます。
C/C++でint64_t v = 1 << 32; は、実はint64_tではなくintをシフトしています。x86では0x100000000ではなく0が入るかもしれません。int64_tの変数に1を代入してから<<=でシフトするのが正しいやり方です。
ソースコードの関数にコメントをたっぷりつける、というのは、"comment a function profusely"というようです。そういう言い回しがあるのですね。
C++のコメントに「この変数は符号なしのはず」とか書いて済ませるのではなく、static_assert(std::is_unsigned)を書きましょう。
Stanは、公式ドキュメントによるとmodeling languageであり、probabilistic programming languageとも書いてあります。非公式キャラができたら「すたんたん」と呼ばれるのでしょうか。\nhttp://mc-stan.org/users/documentation/
T時間当たり1回起きる不具合を、T時間起きなかったといって、直ったと断言するのはちょっと早いです。T時間経っても起きない確率は{1/自然対数の底=37%}あります。もっと長時間再現試験をしましょう。
GCC6は標準でC++14としてコンパイルするので、C++98で書かれたコードは-std=gnu++98と明示する必要があります。製品コードをユニットテストするときは要注意ですね。\nhttps://gcc.gnu.org/gcc-6/changes.html
「プログラミングを学ぶならどの言語から学ぶべきですか」「母語か英語」というのは定番のやり取りです。「プレゼンテーションを上手く乗り切るにはどうしたらよいですか」「聴衆よりも自信をもって語れるネタを用意する」も定番に加えたいです。
とある会社では、車のエンジンを分解させて組み立てさせ、モノづくりの苦労を学ばせると聞きます。私の場合は、わざと不具合が混入した疑似コードを渡されてコードを書いたことがあります。仕込まれた問題点をすべて指摘した上で、出題者が意図しない改善点まで挙げればしめたものでしょう。
フランス語のアクサン記号を含む単語を、PDFからEmacsにコピペすると、記号とアクサン記号が一体になったものと、別々に分かれたものと、二通りになるようです。UnicodeのNFCとNFDの違いからきているようですね。
Rをシェルスクリプトから自動実行しようとして、"Rscript foo.R args" と書くはずがうっかり"script foo.R args"と書いてしまったために、foo.Rを実行できなかったばかりかscriptコマンドの出力でfoo.Rを上書きしてしまって、後続の処理が壊れて泣いてしまったのです。
メンバ関数にYieldという名前は使えません。winbase.hでYieldを「何もしない」マクロと定義しているので、理解不能なエラーメッセージに見舞われます。
C/C++で固定アドレスの格納先を、uint32_tとかuint64_tとか書くのはやめましょう。uintptr_t を使うのですよ。
C/C++コンパイラの-Wallオプションは、すべての種類の警告を出してくれる訳ではないと知って、怖くて泣いてしまったことはありますか?
プログラマの三大美徳にlazinessがあり、これは怠惰と訳すようですが、無精とは訳さないようです。既存ライブラリを探す手間を無精して省いたために車輪の再発明をしてしまう、というのは確かに避けたいですね。
コマンドラインがすっごーい! ことを見せるには、find -type f -print0 | xargs -0 renameがよいと思います。ちなみに-print0と-0がないとファイル名が空白を含むときにうまく動きませんし、xargsに-L 1が要るコマンドもあるでしょう。
テンプレートメタプログラミングは「Haskellてき」だと思うのです。似たような関数は、いくつかヘッダファイルで目撃されているのです。まずはそれを探すのです。ちゃんと引数が適用可能かどうか、よくみるのですよ。
プログラミングと株取引は似ています。自分の行動は相手が何をしているか(いくらで売り買いしたいか)で決まり、どうしてか(今すぐ現金が欲しい)は考慮されません。プログラマがデバッグにどれだけ苦労しても、ユーザがそのソフトを使うかどうかには影響しないのです。
Google Testのユニットテストに共通の初期化は、setupでもsetUpでもなくSetUpです。こういうのを暗記するのは辛いので、overrideをつければコンパイラが間違いを見つけてもらいましょう。
x64 ABIで、asmコードからCの関数を呼び出すときは、rspレジスタを16 bytes境界にあわせる必要があります。そうしないと、C++ライブラリの中で突然異常終了することがあります。私はこれで随分時間を溶かしました ><
破壊的技術の破壊的をdestructive technologyと思っている方はいませんか? ここでの破壊的はdisruptiveです。要するに、初期のデジカメの解像度は銀塩フィルムよりはるかに低かったが、今銀塩フィルムの現像店(DPE)は何軒残っていますか、という意味です。
相互再帰の最も有名な例は、「旨い物を食べると辛口の菊正宗を飲みたくなる、菊正宗を飲むと旨い物が食べたくなる」だと思います。
diffコマンドは-uprNオプションをつけて起動しましょう。Working copyがbranchから一行でもずれたらパッチが当たらないのでは困ってしまいます。git diffに形式を併せましょう。
Oxymoronとは矛盾する単語を並べる語法のことで、例えばact naturallyがあります。Oxymoronの例を挙げよと言われたら、"UD2(0Fh 0Bh)という未定義命令"と答えればよいのですね。
テストはソフトウェアの完全性を保証するものではありません。ソフトウェアの品質が十分でないという帰無仮説をテストで支持しようとして、テストが全部通ったので、帰無仮説を棄却して品質が十分高いとみなすことです。
TCPで受信ポートを開いて受信した文字列を表示する、というプログラミングの練習で、動作確認にクライアントが必要なので何にしようかと思いましたが、Webブラウザから、http://localhost:port/ にアクセスするのが一番簡単だと気がつきました。
既存のAPIに機能を足したものをExとしたり、既存のパッケージを改良したものを2とするのはよくあることです(2のないggplotってあったのでしょうか)。ですが、std::tgammaのように真(true)を接頭辞につけるのは珍しくありませんか?
統計でCovarianceと言えば共分散ですが、C++にはCovarianceだけでなくContravarianceもあります。
空の構造体がたくさんあるけどよく分からないからって、typedefで全部まとめて一つにしてはいけません。それらはBoost.MultiIndexのタグなのです。
正規表現は、reluctantな評価が必要になることがときどきあります。C++の//に続くコメントを、正規表現/^(.*)\/\/\s*(.*)/で探すと、//が複数あるときに後ろの//にマッチしてしまうで、reluctantな評価/^(.*?)\/\/\s*(.*)/ にします。
横浜駅が完成する前にC++標準が完成することはありえますが、横浜駅が完成する前に私がC++を完全に理解することはなさそうな気がします。ところでJR横浜タワーが完成しても横浜駅は完成ではありませんよね。
分身の術は残像なので見えているものはすべてが本物、と読んだことがあります。そういえばラインバッファスプライトの表示能力が足りなくてキャラを一度に表示できないときに、フレームごとに表示する異なるキャラを表示するのでキャラがちらついて見える、というのは懐かしいですね。
ドキュメントがなくてもソースコード見れば分かるという人が居たら、スレッドセーフとか再入不可とか計算量とか性能についてソースコードから読み取れるのか質問してみましょう。そういうことは気にしないと言われたら(
Register renamingとは、「そのレジスタのデータはこれ以上使わないのです。おかわりをよこすのです。」
あなた、動的型付けあんまり好きじゃないけものなんだね!
長さが等しい横三本棒(三みたいなもの)のアイコンを何と呼ぶのか分からなかったのですが、ハンバーガーアイコンと呼ぶそうです。GitHubのPinned repositoriesも、このアイコンを使って並べ替えられます。
std::vector<T>.data()で得られるポインタは、ベクタの要素を増減すると無効になることがあります。ポインタがいつまで有効なのか意識しましょう。関数の返り値にするのは、悪い予感しかしません。
仕様設計書の書き方の例というのは、どうにも味気ないものになりがちなので、もっと実用的な例として、家事の段取りを書かせてはいかがでしょうか。例えば掃除しながら洗濯機を回し、洗濯が終わったら掃除を中断して干す、というはイベントドリブンですよね。
V&Vとはビクトリーバイビクトリーの略、ではなくて、Verification: 作った料理が不味かった、Validation: 料理が美味しいかどうかはさておき注文されたものではなかった、ということであってますか。
C++の無名名前空間は、unnamed namespaceであってanonymous namespaceではなさそうですが、ときどき間違えそうになりますね。
Rubyスクリプトをユニットテストするとき、オープンクラスを使ってテスト対象のクラスの振る舞いを望み通り変えると、テストが書きやすいです。これはC++では簡単にはできないことですね。
C++のムーブセマンティクスという言葉から連想するのは、WindowsのExplorer間でファイルをドラッグ&ドロップすると、異なるドライブまたはネットワークドライブへはコピーに、同じドライブではムーブになることでしょうか。
プログラムのタスク切り替えは一瞬でも、プログラマのタスク切り替えは20分掛かります。プログラマに頻繁に割り込むと、あっという間に生産性がゼロになります。もうやめて、とっくにプログラマの生産性はゼロよ!\nhttps://www.bbc.com/worklife/article/20170105-open-offices-are-damaging-our-memories
Windowsファイルサーバに、名前が#で始まったり~で終わったりするファイルがあると、編集した人が使っているテキストエディタがうかがい知れますね。それよりGitでバージョン管理して、.gitignoreを適切に書く方が幸せになれるでしょう。
オークションを2nd price auctionにすることの考察は興味深いです。試しに、給湯室のポットに水をいっぱい入れて沸かすのを、最初に出社した人ではなく二番目に出社した人にさせると、皆早起きを嫌がらなくなるのではないかと思いました。
ユニットテストを書くときは、いきなりテストを成功させてはいけません。まずテストを失敗させないと、テストに成功したのか、そのテストを実行していないのか、区別がつかないからです。
素の乱数を作るのにXorshiftを引用するのはいいとしても、std::uniform_int_distributionを自作するのはやめた方がよいでしょう。うまく作らないと結果に偏りが出ますがが、乱数が変なことは簡単には気づかないのです。
文字列を結合する方法としては、\n+ Pythonなど\n. Perl\n* Julia\n~ D\n## Cプリプロセッサ\n記号はなくpaste関数 R\nと、いろいろあるようです。
技術レビューとは、書いてある内容が正しいことを確認するより、書いていないことに対してその場合はどうなる(what if)と指摘することに意味があるので、他人が明言していないことに過剰反応するのはむしろ適性があるのですが、日常生活では生きづらくはありますね。
C言語のコーディング規約で、C++キーワードを禁止する、というのを私は見たことがありません。ですが、CUnitではなくC++のユニットテストを使うなら、C++キーワードを禁止しないとテストをコンパイルできなくて困ると思います。
手元の開発作業とGitHubへのリリース作業の両方の画面を開くと、どれがどれだか分からなくなりませんか? VirtuaWinとか使って作業画面を分けるとよいでしょう。
Pythonのlist comprehensionを見たときにHaskell的だなあと思いましたが、実際そのようです(下記)。普段使っているのと異なるプログラミング言語を使うと、思わぬ出会いがあります。\nhttps://docs.python.jp/3/whatsnew/2.0.html
グローバル変数のコンストラクタから、別のグローバル変数のインスタンス関数を安易に呼び出してはいけません。グローバル変数の初期化順序はコンパイラが決めるから、呼び出し先は未初期化かもしれないのです。Construct on first use idiom イディオムが必要です。
かな漢字の予測変換は、ある単語/文節に対して後続する確率の高い単語を挙げることです。ところで画竜点睛に「を欠く」以外が続くことはまずありませんし、枕詞には続く単語が限定されるのですが、皆さんの環境ではどうなっていますか?
#include文のファイル名で大文字と小文字を間違えると、Windowsでは問題なくても、Linuxではファイルがインクルードできないと言われてしまうのです。
std::vector<double> v;\nstd::accumulate(v.begin(),v.end(),0,[](const auto&a,const auto&e){return a+e;});\nはvの要素が確率(0以上1未満)のときに和が0になってしまいます。0をdecltype(v)::value_type{0}と明示するのです。
映画のオープニングやスタッフロールに出てくる、役と俳優の名前は、"役 俳優"と"俳優 as 役"の両方の表記方法があるのですね。変数宣言と同じですね。
フランス語ではHを発音しませんが、そのことに初めて気づいたのは、エルメス(Hermès)ですか? それともエルミート行列(Hermitian matrix: Charles Hermiteに由来)ですか?
うるう年の規則が、400年周期より長い周期(細い精度)になったらプログラミングが大変だと思いましたが、そもそもそれだけの精度は出せないようです。そもそもうるう秒を気にしているか、というのもありますし。\nhttp://eco.mtk.nao.ac.jp/koyomi/wiki/B5A8C0E12FB5A8C0E1A4CEA4E1A4B0A4EAA4CEBCFEB4FC.html
Static寿司: 板に乗っている回らない寿司\nDynamic寿司: ベルトコンベアに乗って流れてくる寿司\nConst寿司: 定額で食べ放題の寿司\nReinterpret寿司: プリンなど(寿司が回るのではなく回っている物が寿司と考えれば)
x86のFMULが浮動小数乗算でIMULが符号あり整数乗算なら、符号無し整数乗算はUMULと思いきやMUL/MULXなのです。しかもMULは掛ける数と結果のレジスタが固定[A,(D:)A]、MULXは掛ける数がR(E)DX固定、IMULはいろいろだったりします。
コレクションの先頭要素が0か1かは、仕様書に書いて欲しいのです。0時はあっても、0日や0月や令和0年はありませんから。
大学では何を専攻するにしても、統計学を学ぶことになると思います。私の頃はRをインストールしたノートPCを持ち歩く、ということはなかったので、電卓を使って課題を解いていました。今はPCが無いと課題を解くのが大変な気がしますが、実際どうなのでしょうか。
すごーい! 長篠の戦いの三段撃ちは、戦国時代の並列化なんだね! (史実として正しいかどうかは知りませんが、物量で並列化して勝つといえばそれはそう)
引数としてconst T* pを渡すと、ポインタpが指すオブジェクトはimmutableとして扱われますが、deleteはできます。Deleteされたくなければ、デストラクタを非publicにする必要があります。
C++で長さNの配列をfor(int i=0; i<N; ++i)で回すコードを見て、Nがハードコーディングされていると要素数が変わった時変更し忘れないか、intが32ビットでsize_tが64ビットでも動くのか、ということを指摘するのが、レビューのお仕事です。
Rのpurrr::reduceは最後の累積結果を返しますが、purrr::accumulateは途中の累積結果も返します。しかしC++のstd::accumulateは最後の累積結果を返し、途中の累積結果も返すのはstd::partial_sumです。他のプログラミング言語はどうでしょう。
二つのファイル名が違っているからと言って、異なるファイルとは限りません。それらはシンボリックリンクやハードリンクかもしれませんよ。boost::filesystem::equivalentで確認しましょう。
8086のinc命令はハードウェアで直接実装できるので用意されたのでしょう。しかし一部のフラグしか書き換えないためにその結果を分岐に使うとペナルティが発生するので、今はadd等を使う方がよいと書いてあります(下記16.2.2.9)。\nhttps://software.intel.com/sites/default/files/managed/9e/bc/64-ia-32-architectures-optimization-manual.pdf
.sファイルのアセンブリ言語マクロはテストできない、そんなはずないでしょう。単にマクロを展開して、C++のインラインアセンブリからcallすればテストできますよ。
仮想8086モード(というか80286)は、16-bit セグメント << 4 + 16-bit オフセット = 20bits = 1 Mbytesと見せかけて実は1M + 64K -16 bytes使える、という知識は今でも役に立つのでしょうか。
社会で微分が何の役に立つのかと訊かれたら、「独占企業はその立場を利用していくらでも値段を吊り上げる」ことはしない、なぜなら利潤が最大化する点で生産量と価格は均衡するから、と答えるのがよろしいでしょうか。要するに利潤を微分しろということです。
文字列処理あるあるに、単語を空白で区切ることを暗黙に仮定していることがあります。例えば文字列の集合を連結する処理を自作して、boost::algorithm::join(lines, " ") と書くと、「弁慶がな ぎなたを振り回し」になってしまいます。
ベストエフォートというと通信でよく使われる用語ですが、郵便でもsurface air lifted (SAL)といって、似たような仕組みがあるのですね。
MLからMeta Languageというプログラミング言語を思い浮かべる人は少ないかと思いますが、Standard MLはメーリングリストより早くからありますよね。
100種類の元素の無限の組み合わせはアセンブリ言語のようなもので、化学の諸法則はデザインパターンに似ていると思いませんか?
CPUへの割り込みは、古典的な教科書では電話に出ること例えられます。なるほどそれはそうですが、ITSとVCSの時代にプログラマが電話で何か訊かれることもないと思うので、もっと現代的なたとえはないでしょうか。
C++でabs(INT_MIN)は間違った値 INT_MIN を返しますが、INT_MIN / -1 はintに収まらないのでCPUがDivide Error例外を出します。ところでRだと、integerで-2^31はNAが割り当てられていますね。
301 Moved Permanently 「あそこにあります」\n503 Service Unavailable 「売り切れです」\n404 Not Found 「そこになければないですね」
結果という意味の英語は、resultの他にoutcomeがあります。Outcomeにぴったり当てはまる日本語を思いつかないのですが、良い会議とは、outcomeを見据えて運営するものだと思っています。
ユニットテストが書きにくいからって、#defineでprivateをpublicに置き換えるのはいけませんよ。アクセス指定子を超えたメンバ変数の順序は入れ替わることがあります。
メッセージという単語はmsgsnd()のようにしばしばmsgと略しますが、大文字のMSGはグルタミン酸ナトリウム(monosodium glutamate)ですね。
成果物のビルドはmake一発でできて欲しいのです。それより複雑な手順は、間違った成果物をリリースする元凶なのです。テストも併せて実行して結果を報告し、ドキュメントも整形できればばっちりでしょう。
パラレルATAは、シリアルATAに対するretronymです。Snow skiingという言葉はまず聞きませんが、waterやgrassに対するretronymでしょう。ちなみにそりはsledと言いますが、プログラマにとってスレッドにはthreadとNOP sledがあります。
grep -v pat は「patに合わない行がある」であって「patに合う行がない」ではないのです。後者は grep pat ; test $? -eq 1 で終了コードが1であることを確認するのです。
エラーメッセージが出るのが怖いと聞きますが、Cのメモリ周りのバグのように、データを壊したときとその影響が出るときが離れている上に一見無関係なので、エラーメッセージは出ないけど動かない原因がさっぱり分からない方がはるかに怖いと思います。
pylintで未定義変数を使用していることを見つけられるなら、pythonで if __name__ == "__main__" を実行する前に未定義変数を使用しそうなことを見つけてくれてもよさそうですが、メタプログラミングができるとそうはいかないのでしょうか。
吊橋は昔からあったが、斜長橋はコンピュータで構造解析ができるようになって実現した、と読んだことがあります。アイデアを形にするには計算機のパワーとアルゴリズムが必要だった、ということはたくさんありそうですね。
コンパイラに限らず、警告は何とと同じくらいなぜが重要です。「変数が使われていない」という警告が出たからと言って、その変数定義を消す前に、似たような変数と取り違えていないかを確認しましょう。
AMD/Intel 64の64-bit modeモードではBCD命令(decimal arithmetic instructions)が使えません。8086が出た頃にBCD命令をどう使っていたのか知らないのですが、当時は重宝したのでしょうか。
switch-caseが多段if-elsifになるか、ルックアップテーブルを作ってジャンプするかは、逆アセンブルすると分かるのです。思い込みより、事実を確認しましょう。
「effectiveの意味は何ですか」と訊いて、「新しくプログラミング言語などを勉強しようと思ったときに、入門書の次に読む本についている冠です」と返ってきたら、会話が弾みそうですね。
マルチモーダルという言葉から、multimodal interfaceつまり視覚や聴覚など複数の感覚に訴えるユーザインタフェースと、multimodal distributionすなわち多峰性(山が複数ある)分布と、どちらを思い浮かべますか?
sizeofに型名を入れてはいけませんよ。変数の型が変わった時オーバランしますが、ヒープが壊れたときのデバッグは大変なのです。sizeof(*pObject)とすれば、ポインタpObjectが指すもののサイズが得られます。
Tracing GCはメモリリークを防いでくれるといいますが、リークするのはメモリだけでありません。TCP/UDP受信ポートがリークしたら、プロセス終了まで同じ番号のポートが開けなくなります。
ETCが普及した理由は、料金所渋滞を無くすことで有料道路の利用者が得をしたからでしょう。私の行きつけの店は電子マネーを導入していないところが多数ありますが、そのような店にとって「導入すると明らかにいいこと」は何でしょうか。\nhttps://www.e-nexco.co.jp/activity/safety/detail_07.html
Windows付属の電卓は、整数の除算を有理数で行っているようです。1を49で割って0.02040816...になったのを49倍すると1に戻ります。同じものを作ろうとすると、Boostで有理数を扱う必要があり、doubleで済ますよりもなかなか大変そうです。
ダブルバッファリングというと難しく聞こえますが、鉄道の相互発着(交互発着)と言えば分かりやすいでしょう。片方向2面のプラットフォームで、一方で発車しながら他方に到着させることです。東海道新幹線は16両と長いので、新横浜などでみることができます。
ソフトウェアの世界でvanillaは追加機能の無いソフトウェアという意味ですが、もしこの概念に日本語が採用されたのであれば、かけ(そば)、もり(そば)、素(うどん)と呼ばれたのでしょう。なおvanillaのアクセントはヴァ↑二↓ラです。
変数名をtimeと書いて時間と読ませると、点(時刻)なのか幅(狭義の時間)なのか分からないのです。timestampかdurationと書いて欲しいです。
プログラミングでboxingとは、プリミティブ型の値をクラスのインスタンスに収めることです。国によってはboxing dayという休日があり、これは箱(box)にギフトを詰めて送ることに由来するそうです。
再現性の低い不具合の一つに、割り込みハンドラで自動変数のオブジェクトを生成するとき、コンストラクタがうっかりnewしてしまった、というのがあります。おそらくmallocは再入可能でないのでたまにヒープ構造が壊れると思いますが、狙って再現させるのは大変です。
スクリプト言語の複数行を、#if 0 ... #endif みたいに、一時的に無効化したくなることはありませんか?
32bitレジスタマシンで、64bitリアルタイムクロックを読むのに、単に下位32bit-上位32bitと読むと、時刻が逆転することがあります。これが起きると滅多に再現しないので厄介でしょう。対策は、上位bitが一致するまで読み直せばよいです。
512-bits ZMMレジスタは、これ1本でZ80の全レジスタ(裏レジスタ含む)よりビット数が多いなあと思ってしまいました。
短時間で終わる処理の時間測定に、外れ値があったら気を付けるのです。WindowsやLinuxはマルチタスクOSだから、測定対象以外のプロセスに時間を取られることがあります。もしかしてツイッターを見ながら、音楽を聴きながら性能測定してます?
新人プログラマにメンター(mentor)をつける企業はたくさんあると思いますが、メンターに指導される人を何と呼ぶかは、日本語ではあまり聞きません。私は「めんたいこ」だと聞きました。後でわかったことですがこれは冗談で、本当はmenteeです。
仕事中のプログラマが、ハシビロコウみたく目つきが鋭くて近づき難いのは、そっとしてあげて欲しいのです。じっと動かないのは、複雑なマルチスレッド処理を考えているところなのです。
小さなコードでは許容されても大規模プロジェクトで許容されないことに、「みんながインクルードしているヘッダファイルの定義を書き足したらフルビルド」があります。宣言と定義を分離することを計画的に行わないと、プロジェクトに危機が訪れます。
template <typename T> T f() {return T();}は、Tがvoidならvoidを返します。返り値が無いことをvoidを返すというと何となく妙ですが、「事なきを得る」というのは普通のいい方ですよね。
配列の要素を0から数えるのは、プログラマに固有の習慣ではありません。イギリスでは、日本やアメリカの1階が0階(ground floor)なので、エレベーターに0とかGとか表示します。ちなみに映画「ゼロ・グラビティ」の原題は Gravity ですので、0 == 1ですね。
