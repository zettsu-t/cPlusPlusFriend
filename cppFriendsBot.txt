プログラマの三大美徳は、怠惰(ライオン)、短気(アライグマ)、傲慢(アフリカオオコノハズク)なのだ! #けものフレンズ
Singletonで検索するとデザインパターンが出ますが、Singletonで画像検索するとウィスキーが出ます。美味しいですよ。
やめるのだフェネック! コレクションの最大要素と最小要素を別々に求めるのは二度手間なのだ! std::minmax_elementを使うのだ! #やめるのだフェネックで学ぶC++
スループットとレイテンシがトレードオフになっている例は、ラッシュ時に急行が走らない、ということです。急行に人が集まり過ぎると乗り降りに時間が掛かりますし、各駅停車を急行から逃がすのは加減速とポイント切り替えに時間が掛かると思われます。
やめるのだフェネック! デバッグで行き詰ったからといって、いきなり人を捕まえて、何が起きているか分からないと言わないで欲しいのだ! コノハ博士とミミちゃん助手のポストカードに話しかけて、状況を整理してから持ってきて欲しいのだ! #やめるのだフェネックで学ぶC++
私がアルゴリズムという言葉を知ったのは大学に行ってからですが、最初に出会ったアルゴリズムらしきものは大判時刻表です。列車の乗り換えを決めるのは、目的地の到着時刻を決め打ちして出発地に向かう方が、出発地からたどるよりずっと簡単だ、というのは何という名前のアルゴリズムでしょうか?
やめるのだフェネック! std::atomic<int>は明示的に初期化する必要があるのだ! 初期化を忘れてもコンパイラは教えてくれないのだ! #やめるのだフェネックで学ぶC++
仕様設計書の書き方の例というのは、どうにも味気ないものになりがちなので、もっと実用的な例として、家事の段取りを書かせてはいかがでしょうか。例えば掃除しながら洗濯機を回し、洗濯が終わったら掃除を中断して干す、というはイベントドリブンですよね。
やめるのだフェネック! Google Testなどサードパーティーのヘッダファイルは、-Iではなく-isystemでインクルードするのだ! そうしないと対処不能な警告が出て、-Werrorだとビルドが止まってしまうことがあるのだ! #やめるのだフェネックで学ぶC++
日本語には何でもカナ4文字に略すという習慣があります。50の4乗は6250000しかありませんから、国内の全Twitterユーザがそれぞれランダムに思い浮かべた4文字略語に、その略語の意味を与えてツイートすると、一日経たずに略語集が網羅できるかもしれません。
やめるのだフェネック! T時間当たり1回起きる不具合を、T時間起きなかったといって、直ったと断言するのはやめるのだ! T時間経っても起きない確率は{1/自然対数の底=37%}あるのだ! #やめるのだフェネックで学ぶC++
ソースコードのcodeは単数形で、codesにすると符号という意味になるようです。しかし野菜はvegetablesで果物はfruitなのはまだわかるのですが、sportとsportsの使い分けが未だにわからないです...
やめるのだフェネック! Embedded systemを「埋め込み」システムと訳すのは嫌なのだ! 組み込みシステムと訳して欲しいのだ! #やめるのだフェネックで学ぶC++
プロレスのカウントは1,2,3という整数だけではなく、2.9, 2.99という小数があると聞きます。TeXのバージョンが、小数点以下が伸びて円周率に近づいていくのと似たようなものかもしれません。
やめるのだフェネック! テストの成功をOKと書くのはよいが、失敗をNGと報告しないで欲しいのだ! Failedと書かないと通じないのだ! #やめるのだフェネックで学ぶC++
"Everything but the kitchen sink"とは一切合切という意味のイディオムです。一切合切が入っているC++を理解できれば、そこからの類推で他のプログラミング言語は学習できそうな気がします。問題は、C++を理解できる日が、私には来そうもないことです。
やめるのだフェネック! diffコマンドは-uprNオプションをつけて起動して欲しいのだ! Working copyがbranchから一行でもずれたらパッチが当たらないのは困るのだ! git diffに形式をあわせるのだ! #やめるのだフェネックで学ぶC++
簡潔なコミットログの書き方は、BBC Newsのヘッダラインから学ぶとよいと思います。50文字以内で言いたいことが伝わるのです。
やめるのだフェネック! インラインアセンブリのシフト命令でCLレジスタを使ったら、破壊レジスタに書かないとダメなのだ! RCXレジスタに第一引数のポインタが入っていると、Segmentation faultの危機なのだ! #やめるのだフェネックで学ぶC++
snprintfを知らなかったためにsprintfを使い、返り値=格納先に書き込まれた文字数を見てバッファオーバフローに気づいたときのCPUの気分、というのは、実社会でどう例えればよいでしょうか。
やめるのだフェネック! シーケンス図で複合フラグメントを駆使して、いろんな状態を一つの図にまとめるのはやめるのだ! 状態遷移図とアクションを使えばすっきり描けるかもしれないのだ! #やめるのだフェネックで学ぶC++
RFC 793 (TCP)の"2.10. Robustness Principle"に、いわゆるポステルの法則があります。レジスタやファイル形式の予約ビットは、読むときは無視し書くときは0にする、という約束事が一般化されたのでしょう。
やめるのだフェネック! コレクションの最小要素を求める関数を下手に自作すると、要素が空の時INT_MAXが返ってしまうのだ! std::min_elementはイテレータを返すので、空なら第二引数=vector.end()などが返るのだ! #やめるのだフェネックで学ぶC++
プログラマの面接を行うことになった面接官が、Rubyプログラマに尋ねた。{\n}「2+2はいくつになりますか?」{\n}Rubyプログラマは小声で尋ねた。{\n}「2+2をいくつにしたいんです?」{\n}面接官は答えた。{\n}「5です」{\n}class Fixnum{\n}  def +(x) 5 end{\n}end
やめるのだフェネック! 自分で理解できないイディオムを、可読性が低いといちゃもんをつけないで欲しいのだ! 使っている人が理由を正しく説明できるなら、これを機にメンバで知識を共有すればよいのだ! #やめるのだフェネックで学ぶC++
gitにファイルを追加してcommitしたら、100644という数字が出ました。通常ファイルにパーミッションを設定した、という意味だと思いますが、すごく久しぶりに8進数を見た気がします。
やめるのだフェネック! 何もしないデストラクタを{}と定義するのは嫌なのだ! =defaultを使うのだ! 理由はEffective Modern C++ 項目17に書いてあるのだ! #やめるのだフェネックで学ぶC++
8086でNOPという命令は明示的にはなくxchg ax,ax(90h)の別名だったのを、SSE2でrepeat prefix(F3h)をつけたPAUSEを追加し、x64でRAXの上位32ビットを変えないNOPを再定義したというのは、互換性を保って拡張する面白い例です。
やめるのだフェネック! VLAがスタックに置かれるとは限らないのだ! ヒープに確保するコンパイラ(ARM Compiler)もあるのだ! 割り込みハンドラからmallocは呼べないことを思い出して欲しいのだ! #やめるのだフェネックで学ぶC++
Expressionとstatementの違いは、stackoverflow.comでJoel Spolsky氏自らが答えています。私が敢えて日本語に訳すとすれば、「である」と「する」の違いでしょうか。
やめるのだフェネック! unionを使ってstructをuint8_t[]に読み替えるのは、実行時にはできても、constexprでコンパイル時にできるとは限らないのだ! #やめるのだフェネックで学ぶC++
boost::optional は、返り値が得られないことを例外なしで教えてくれるフレンズなんだね
やめるのだフェネック! std::vector<T>.data()で得られるポインタは、ベクタの要素を増減すると無効になることがあるのだ! 関数の返り値にするなんてもってのほかなのだ! Segmentation faultの危機なのだ! #やめるのだフェネックで学ぶC++
ソフトウェア開発の最初の一歩として、旅に出てホテルで館詰になって全体像を考える、というのを過去やってみたのですが、私にはあっているようです。この場合の「かんづめ」は、缶詰ではなく館詰が正しいそうです。もちろん一日頭を使ったら、美味しいものを食べるのです。
やめるのだフェネック! コンテナの末尾の要素や、末尾の要素を指すものをendと名付けるのはまずいのだ! STLのend()は末尾の次を指すのだ! lastとかに変えて欲しいのだ! #やめるのだフェネックで学ぶC++
よい要求(requirement)が満たす性質として、correct, consistent, complete などがありますが、資料によって挙がっている項目が異なるようです。いずれにせよ、これらは要求に限らず、一般的によい技術文書が満たす性質だと思います。
やめるのだフェネック! 関数名を付けるときは辞書をひいて欲しいのだ! 間違った英単語も困るが、ローマ字はもっと困るのだ! #やめるのだフェネックで学ぶC++
あなた、動的型付けあんまり好きじゃないけものなんだね! #けものフレンズ
C言語のコーディング規約で、C++キーワードを禁止する、というのを私は見たことがありません。ですが、CUnitではなくC++のユニットテストを使うなら、C++キーワードを禁止しないとテストをコンパイルできなくて困ると思います。
テキストエディタで、Pythonのコードを複数行切り取ってループの中に移動したり、Redmineにはり付けるためにインデントを減らすときに、インデントの深さが元と変わってしまって、コードの意味が変わったことはありませんか?
ソースコードのコメントに書く英語は、下記の通りであってますか?{\n}- 関数/変数が～するなら三人称単数{\n}- 関数/変数が～であるなら、can, needed by等{\n}- プログラマが～するなら命令形 : notice that等{\n}- いずれでもないときは、主語を置いた文章
やめるのだフェネック! .cppから.dファイルを作るときに、自動生成する予定のファイルが見つからない、とエラーが出るのは困るのだ! -MGオプションが必要なのだ! #やめるのだフェネックで学ぶC++
GitHub上の私のレポジトリのドキュメントは一部英文で書いていますが、ネイティブスピーカーが見れば改善すべき点はたくさんあると思います。今どきの高校生は、英語の先生と英作文のオンラインレビューができると思うと、うらましくなります。
やめるのだフェネック! 「変数が使われていない」という警告が出たからと言って、その変数定義を消すのはちょっと待つのだ! コンパイラは似たような変数と取り違えていないかを、指摘しているのかもしれないのだ! #やめるのだフェネックで学ぶC++
クラステンプレートのインスタンスを作るfactoryメソッドに、いちいち型引数<T>を書きたくないですか? 自由関数テンプレートにすれば、型引数を省略してもコンパイラが推論します。楽をするためにはどんな苦労も厭わないのがプログラマなのです。
やめるのだフェネック! 行の先頭の//に続くコメントを、正規表現/^(.*)\/\/\s*(.*)/で探すと、//が複数あるときに後ろの//にマッチしてしまうのだ。Reluctantな評価/^(.*?)\/\/\s*(.*)/にするのだ! #やめるのだフェネックで学ぶC++
"Fluent Python"という言葉から鰻を思い出しましたが、よく考えたら鰻は魚類で蛇は爬虫類でした。
やめるのだフェネック! クイックソートの素朴な実装は、要素数Nに対して再帰呼び出しがO(N)回になってしまうのだ! スタックオーバフローの危機なのだ! #やめるのだフェネックで学ぶC++
燃えるごみの収集日の朝に掃除して、掃除が終わったらそのままゴミを出しに行けば、集めたゴミと使い終わったクイックルワイパーと台所の臭いものをすぐ捨てられます。プロセスの実行は結果が正しいことと同じくらい、いつ終わって、そのためにはいつから始めるかが重要です。
やめるのだフェネック! 配列や構造体はどんなに大きくしてもいいという訳ではないのだ! ARMコンパイラは4GBまでできても、MinGW-32bit GCCは0x7fffffffBより大きくできないのだ! ユニットテストの妨げになるのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! Gitの公式ガイドラインに従うなら、コミットメッセージは命令形(imperative mood)で書いて欲しいのだ! 他のプロジェクトもこうしておけば、英語で迷うことは減るのだ! #やめるのだフェネックで学ぶC++
技術レビューとは、書いてある内容が正しいことを確認するより、書いていないことに対してその場合はどうなる(what if)と指摘することに意味があるので、他人が明言していないことに過剰反応するのはむしろ適性があるのですが、日常生活では生きづらくはありますね。
やめるのだフェネック! free(p);をif(p){}で囲む必要はないのだ! freeにNULLを渡しても無害なのだ! こういうインタフェースはnull object patternにして欲しいのだ! アライさんはその辺ばっちりなのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! switch-caseがいつも多段if-elsifになるとは限らないのだ! clangはcaseが多いときにルックアップテーブルを作ってジャンプするのだ! #やめるのだフェネックで学ぶC++
256-bits YMMレジスタは、これ一本でZ80の全レジスタよりビット数が多いなあと思ってしまいました。
やめるのだフェネック! 素の乱数を作るのにXorshiftを引用するのはいいとしても、std::uniform_int_distributionを自作するのはやめるのだ! うまく作らないと結果に偏りが出てしまうが、簡単には気づかないのだ! #やめるのだフェネックで学ぶC++
メタプログラミングというと何だか難しく聞こえますが、アニメの「メタ発言」というのは割とよく知られているので、メタというのは分かってしまえば怖くないと思います。
やめるのだフェネック! そのエラーメッセージ"has incomplete type T"は、T型が不完全型だと言ってる訳じゃないのだ! インクルードしているヘッダファイルが足りないから、T型の定義が見つからなくて困ると言っているのだ! #やめるのだフェネックで学ぶC++
g++ -E -H foo.cpp{\n}「この#include連鎖はいつまで続くのですか」{\n}「二百、三百、な、何ファイル入ってくるのですか、博士」{\n}「お、多いのです、C++とはこんなにたくさんのヘッダファイルで行動するのですか、助手」{\n}「ここで何が始まるのですか」{\n}#けものフレンズ
プログラマの三大美徳にlazinessがあり、これは怠惰と訳すようですが、無精とは訳さないようです。既存ライブラリを探す手間を無精して省いたために車輪の再発明をしてしまう、というのは確かに避けたいですね。
やめるのだフェネック! 全角半角と半角空白を文章に混ぜてステガノグラフィを名乗るのはよくないのだ! 見た目からして怪しいのだ! #やめるのだフェネックで学ぶC++
C言語の同一配列の各要素(最終要素の一つ先を含む)について、それらを指すポインタの差を定義できる(ptrdiff_t)。しかしNULLであるかどうかは比較できてもNULLとの前後関係は定義しえない、というのは意味として妥当でしょう。{\n}http://en.cppreference.com/w/cpp/language/operator_comparison
やめるのだフェネック! ROT13はとても暗号とは呼べないのだ! 一文字の単語がaで三文字の単語がtheなのはバレバレなのだ!
わざと不具合が混入した疑似コードを渡されて問題点を指摘する、という練習問題の攻略法は、非機能です。計算量が多すぎる、保守フェーズで一貫性のある変更が大変、あるコンパイラではたまたま動くが移植すると動かない、などは出題者が気づいていないかもしれません。
やめるのだフェネック! /usr/binのgccが古いと、新しいLLVMをビルドできないのだ! #やめるのだフェネックで学ぶC++
Rose-crowned fruit dove (Ptili‐nopus regina)は、Effective Modern C++が得意なフレンズなんだね #やめるのだフェネックで学ぶC++
やめるのだフェネック! 長さNの配列を、for(int i=0; i<N; ++i)で回すのはやめるのだ! 配列の長さを増やしたとき、for文を変え忘れるのだ! iが不要ならrange-based forかstd::for_eachを使うのだ! #やめるのだフェネックで学ぶC++
なるっち「srcの最右のビット1を取り出す? "ハッカーのたのしみ"にあったわ! src & -src; ね」{\n}ねねっち「ASMならもっと短くなるんじゃない?」{\n}blsi dst, src{\n}なるっち「・・・!」
やめるのだフェネック! ポインタの差を、intに入れるのは嫌なのだ! ptrdiff_tを使うのだ! 符号ありだから、printf書式は"%td"を使うのだ! #やめるのだフェネックで学ぶC++
PythonらしいコードがPythonicで、RらしいコードがR-likeなら、C++らしいコードは何と呼べばよいのでしょうか? Modern、でしょうか?
やめるのだフェネック! コンパイラの警告を無視した箇所を、静的解析ツールに指摘されるのはやめるのだ! コンパイラが数秒で教えてくれることを、翌朝に教わるのは開発効率が低すぎるのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! vtableを実行時に書き換えて「オープンクラス」みたいにはできないのだ! vtableはread-onlyセクションに置かれているのだ! 書き換えようとするとSegmentation faultで落ちてしまうのだ! #やめるのだフェネックで学ぶC++
専門書に記載されている用語が、日本語だけでなく英語でも書いてあると、変数名を考えるときに悩まなくていいですね。
やめるのだフェネック! CとC++で共用するヘッダファイルで、空の構造体のサイズが異なることがあるのだ! gccは0 byteでg++は1 byteなのだ! そもそもCで空の構造体は作れないのだ! #やめるのだフェネックで学ぶC++
米子空港の愛称が米子鬼太郎空港で、出雲空港の愛称が出雲縁結び空港なら、島根県松江市美保関町にある七類港の愛称は七類Ruby港になるのでは、とふと思いました。
やめるのだフェネック! 区間演算を自作すると、両端を区間に含めるかどうかで不具合が起きやすいのだ! 素直にBoost.ICLを使うのだ! 計算量のオーダーも低くて済むのだ! #やめるのだフェネックで学ぶC++
ベストエフォートというと通信でよく使われる用語ですが、郵便でもsurface air lifted (SAL)といって、似たような仕組みがあるのですね。
やめるのだフェネック! メモ帳からUTF-8で保存したテキストファイルにはbyte order mark (BOM)がつくが、std::regexはBOMを3文字として扱うのだ! /^Word/は先頭行だけ一致しないのだ! #やめるのだフェネックで学ぶC++
新しく物を買ったばかりなのに傷がついた、とがっかりすることがあります。しかし指数分布の下で何かが初めて起きる確率はλe^-(λt)、つまりt=0のときが最大なので、よく考えたら当たり前のことでした。
やめるのだフェネック! 成果物のビルドはmake一発でできて欲しいのだ! それより複雑な手順は、間違った成果物をリリースする元凶なのだ! スモークテストも併せて実行して、結果を報告して欲しいのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! コンパイラの最適化を甘く見てはいけないのだ! Tail recursionをiterationにできるなら、tail callもjmpにできるのだ! 自作のassemblyよりかしこいのだ! #やめるのだフェネックで学ぶC++
新人プログラマにメンター(mentor)をつける企業はたくさんあると思いますが、メンターに指導される人を何と呼ぶかは、日本語ではあまり聞きません。私は「めんたいこ」だと聞きました。後でわかったことですがこれは冗談で、本当はmenteeです。
やめるのだフェネック! 任意精度実数の「任意」に相当する形容詞は、anyではないのだ! arbitraryなのだ! 単語を間違えると、検索で引っかからないのだ! #やめるのだフェネックで学ぶC++
C++17ってまだ"Modern C++"なのですね。MPEG-4 Part 10: Advanced Video Coding (AVC)や、新幹線N700Aみたいに、Advancedになるのかと思っていました。C++23で新しい名前が付くのでしょうか。
やめるのだフェネック! 仮想関数呼び出しが常にvtableアクセスを伴うとは限らないのだ! 具象型がコンパイル時に分かるときはそのメンバ関数を直接呼び出すのだ(devirtualization)! #やめるのだフェネックで学ぶC++
#はハッシュタグですが、#の後はコメントだから突っ込まないで、という意味で使う人がいるようです。これはニュースグループのジョークに由来するような気がしますが、正確なことを思い出せません。「#の後は実行されない」ことは、スクリプトを書かない人には見当がつきませんよね。
やめるのだフェネック! 長さNの配列を、for(int i=0; i<N; ++i)で回すのはやめるのだ! 配列の長さを増やしたとき、for文を変え忘れるのだ! インデックスiが必要なら、Nをsize()かconstexpr式とかで調べるのだ! #やめるのだフェネックで学ぶC++
「いいね」ボタンは英語で"like"なのだそうです。ところでイギリス英語には"lovely"という表現があり、「いいね」の意味を含めてとてもよく使われるそうです。こういうことを少し知っていると、海外旅行や海外出張が楽しくなりそうですね。
やめるのだフェネック! Makefileはデバッグ不能と諦めないのだ! make --dry-runとか、Makefileに$(foreach v, $(.VARIABLES), $(info $(v) = $($(v)))) とか書くのだ! #やめるのだフェネックで学ぶC++
Rのベクトルの、先頭要素は1番、つまりインデックスは1始まりです。C言語の影響か否か、配列は0番から始まるというのに慣れていましたが、そうでない言語もあるのですね。
やめるのだフェネック! アセンブリの細かい処理を高速化するときは、何マイクロ秒経ったかだけでなく、何クロック掛かったも測るのだ! 今どきのCPUは可変クロック周波数なのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! バージョン管理システムにはソースコード以外入れてはならない、という規則はないのだ! テストやドキュメントも登録してタグを打てばよいのだ! #やめるのだフェネックで学ぶC++
かつて浮動小数と言えば、floatかdoubleか迷ったらとりあえずdouble、という感じでしたが、今は半精度浮動小数点数(Half-precision floating-point format)もあるようです。計算機の応用が広がるとこういう状況も変わるのですね。
やめるのだフェネック! ラムダ式の型をtypeid().name()で取得しようとするのは無駄なのだ! それはコンパイラが一意なものを決めるのだ! #やめるのだフェネックで学ぶC++
コマンドラインからPCの設定を行い、その手順をまとめるとき、正しいコマンドと要らないコマンドを後から整理するのは意外と大変です。作業しながらメモを取るのも、シェルのhistoryから拾うのも手間が掛かります。ペアを組んで、一人は作業一人はメモに徹するのがよいのでしょうか。
とある会社では、車のエンジンを分解させて組み立てさせ、モノづくりの苦労を学ばせると聞きます。私の場合は、わざと不具合が混入した疑似コードを渡されてコードを書いたことがあります。仕込まれた問題点をすべて指摘した上で、出題者が意図しない改善点まで挙げればしめたものでしょう。
やめるのだフェネック! "the dragon book"はドラゴンのフレンズじゃないのだ! "Compilers: Principles, Techniques, and Tools"の通称なのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! そこはvolatileをつけないと、最適化されてメモリとレジスタに書きにいかないのだ! デバッグビルドでは動作してもリリースビルドでは正しく動かないのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! ソースコードのファイルの最後は改行で終わって欲しいのだ! #やめるのだフェネックで学ぶC++
国鉄時代のダイヤグラム作成は、温泉旅館で全国規模の会議を開いていたそうです(富井規雄著 "鉄道ダイヤのつくりかた" オーム社)。ソフトウェアの上流設計も、温泉旅館に館詰にして行った方が、作業に割り込みがないので、いいものができるのではないでしょうか。
やめるのだフェネック! ifとかforとか無いただの{}を、無駄だからといって削除してはならないのだ! それはブロックスコープで、変数の有効範囲とデストラクタ呼び出しを規定しているのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 変数をどこで使っているかgrepして目視するのは見落としが多いのだ! 変数名を変えてコンパイルして、エラーをあぶり出すのだ! でも変数名をお試しで変えたコードをcommitしちゃ嫌なのだ! #やめるのだフェネックで学ぶC++
MLからMeta Languageというプログラミング言語を思い浮かべる人は少ないかと思いますが、Standard MLはメーリングリストより早くからありますよね。
やめるのだフェネック! タイピングが大変だからって、using namespace std って書いちゃいけないのだ! C++17でstd::anyとstd::optionalがきたら名前がかぶるのだ! #やめるのだフェネックで学ぶC++
5000兆は53ビットあるのでdoubleの仮数部(52ビット)に収まらない、と思いきや、実は仮数部の最上位bitは1であることが暗黙に仮定されているので収まるのでした。9007199254740993円欲しいと言えば精度が足りなくなります。
「正解を見て正しそうだと分かる」ことと、「無数の選択肢の中から正解を突き止めること」の大変さがどう違うかを示す四字熟語は"NP困難"でしょうか。
プログラミングと株取引は似ています。自分の行動は相手が何をしているか(いくらで売り買いしたいか)で決まり、どうしてか(今すぐ現金が欲しい)は考慮されません。プログラマがデバッグにどれだけ苦労しても、ユーザがそのソフトを使うかどうかには影響しないのです。
プログラミングや設計、テストに掛かる時間は、一つ一つの作業については予想より長かったり短かったりするが、週単位でみれば大数の法則に基づいて予想に近くなるのだと思います。だとすれば毎日の労働時間を固定すると、却って作業効率が下がるのではないでしょうか。
旧製品から引き継いだコードに対して、コンパイラのバージョンを上げると警告が増えるので上げたくない、という話を聞いたことがあります。それはコードの警告の出る箇所を直すべきではないでしょうか。それに最近のコンパイラは、コンソール上で警告に色がつくので見やすいですよ。
やめるのだフェネック! C++で「関数っぽいマクロ」を作ったらダメなのだ! function_traitsで返り値や引数の型を取得できないのだ! #やめるのだフェネックで学ぶC++
Boost MultiIndexのタグは、struct id{};と書いてありますが、{}なしでも動くのですね。{}を省かなければならない理由は特に思いつきませんが、宣言は複数あってもよいというは何かに使えるのでしょうか。{\n}http://www.boost.org/doc/libs/1_66_0/libs/multi_index/example/basic.cpp
やめるのだフェネック! 非同期処理をシーケンス図で表現するのは大変なのだ! アクティビティ図を使って並行性を表現して欲しいのだ! #やめるのだフェネックで学ぶC++
プログラマにとって怠惰、短気、傲慢は美徳なので、「あなたのコードは正しく動くのですか」と訊かれたら、その場でmake test(改行)と入力するのです。
やめるのだフェネック! pthread_t型の変数を、pthread_createを呼び出す前に初期化はできないのだ! pthread_tの型はopaqueだから、ユーザが設定できる初期値などないのだ! #やめるのだフェネックで学ぶC++
何かがランダムに発生するなら粗密があるのです。等間隔ならランダムとは言わないのです(対偶)。よってしばしば待たされるのは当然なのです。
やめるのだフェネック! sizeofに型名を入れてはいけないのだ! 変数の型が変わった時オーバランするのだ! sizeof(*pObject)とすれば、ポインタpObjectが指すもののサイズが得られるのだ! #やめるのだフェネックで学ぶC++
よいソフトウェアテストと何か、というのはそれだけで本1冊分になりますが、スクリプト言語だと実行して初めて変数が未定義だと分かる(たいていは変数名が間違っている)ことがあるので、C0カバレッジは必須だと思います。少なくとも「テストは何物理行当たり1件作る」ではありませんよね。
ソースコードを書くのが速いと何がうれしいかというと、短時間でコードを書ければユニットテストを書く時間が生まれて、ユニットテストもテスト対象と同様に速く書けるので、コードの品質が上がるのです。これは相乗効果ですので、生産性が桁違いになるのでしょう。
『「アナログは曖昧で、デジタルは0か1か明確だ」というのは一面的で、例えば文字集合は離散的だ』的なことを読んだことがあります。この意味するところは深く、私にはうまく説明できないです。ところで私は久しく楽器を演奏したことがないのですが、楽譜は離散的な記号の集まりだったでしょうか。
やめるのだフェネック! コメントに「この変数は符号なしのはず」とか書いて済ませてはいけないのだ! static_assert(std::is_unsigned)を書くのだ! #やめるのだフェネックで学ぶC++
プログラミング言語C++ → こんなに刺激が強いなんて → Effectiveシリーズ → おかわりをよこすのです → Modern C++ Design → テンプレートメタプログラミングを駆使してこそのC++なのです #けものフレンズ
書店に行くと、Pythonの本がたくさん並んでいます。一つの言語でこれだけ盛り上がるのは、HTML以来でしょうか。どなたか「やめるのだフェネックで学ぶPython」botを作って、pythonicなプログラミングを教えていただけるとありがたいです。
やめるのだフェネック! enumを何でもintにキャストしてはいけないのだ! std::underlying_typeを使うのだ! intで収まらないことだってあるのだ! #やめるのだフェネックで学ぶC++
プロジェクトとは独特(unique)で期限があり(temporary)始めてみないと細かいことは分からない(progressive elaboration)と言います。そう思ってデレアニの「シンデレラプロジェクト」を見ると、確かにそうだと納得できるでしょう。 #imas_cg
やめるのだフェネック! 負の整数を2で割るのに、算術右シフト一回だけでは済まないのだ! -1を2で割っても-1になってしまうのだ! コンパイラがどんなコードを出力するか確認するのだ! #やめるのだフェネックで学ぶC++
SFINAEとは、「へーき、へーき! テンプレートによってマッチングできる型違うから!」 #けものフレンズ
プログラマならmockは当然ユニットテストで使うのですが、mockを辞書で引くとあまりいい意味ではないようです。技術用語として使うなら悪くない、というのがプログラマの文化なのでしょう。gitも然りです。
やめるのだフェネック! 関数名のtoを2と書いたり、forを4と書いたりするのはやめるのだ! コーディング規約は守ってほしいのだ! ソースコードをgrepする人のことも考えて欲しいのだ! #やめるのだフェネックで学ぶC++
Makefileに "$(RM) $(OUTPUT)/*" と書くと、変数OUTPUTが未定義のときにルートディレクトリ直下の*が消されて怖いことになります。 "$(RM) ./$(OUTPUT)/*" などと書く方が安全でしょうか?
やめるのだフェネック! 2/3/2018は二月三日だか三月二日だか分からないのだ! Feb. 3, 2018と表示して欲しいのだ! それと、JuneとJulyは略さなくてよいのだ! #やめるのだフェネックで学ぶC++
相互再帰の最も有名な例は、「旨い物を食べると辛口の菊正宗を飲みたくなる、菊正宗を飲むと旨い物が食べたくなる」だと思います。{\n}http://www.kikumasamune.co.jp/profile/
やめるのだフェネック! コンストラクタでm_(m_)としているのは、メンバ変数をメンバ変数で初期化しているから、初期化していないのと同じなのだ! m_がstd::vectorへの参照だと、コンパイラは教えてくれないことがあるのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 変数がintだからといって、変数名の先頭にiをつけてiVarにするのはやめるのだ! 後で64ビット化したときにlong longに変えても、保守プログラマはllVarにはしてくれないのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 確かにC99の機能はC++でも使えることがあるが、restrictはコンパイルエラーになることがあるのだ! 本当にrestrictが必要か考えるのだ! #やめるのだフェネックで学ぶC++
オークションを2nd price auctionにすることの考察は興味深いです。試しに、給湯室のポットに水をいっぱい入れて沸かすのを、最初に出社した人ではなく二番目に出社した人にさせると、皆早起きを嫌がらなくなるのではないかと思いました。
やめるのだフェネック! グローバル変数のコンストラクタから、別のグローバル変数のインスタンス関数を安易に呼び出してはいけないのだ! グローバル変数の初期化順序はコンパイラが決めるから、呼び出し先は未初期化かもしれないのだ! #やめるのだフェネックで学ぶC++
「服を買いに行く服がない」という言葉があります。PCもスマホもないと、各社料金プランの比較も、店までの地図を入手するのも大変なので、「スマホを買いに行くスマホがない」のではないかと思いました。
やめるのだフェネック! __PRETTY_FUNCTION__ を「かわいい」関数名と訳さないのだ! それは「見た目がきれい」な関数名なのだ! #やめるのだフェネックで学ぶC++
ユースケースが単純なことと設計が単純なことは異なる、「自動販売機にお金を入れてボタンを押したら、商品とお釣りが出る」という情報だけで自動販売機は作れない、と以前聞きました。似たような言葉に、株は安く買って高く売れば儲かる、がありますね。それだけ知っていてもどうにもなりません。
やめるのだフェネック! (a) ? b/a : c; をasmで書くのに、b/aとcを求めてからcmovで選ぶのはまずいのだ! cを選ぶ前に0除算例外が発生することがあるのだ! コンパイラはこういうときcmovではなく分岐にしてくれるのだ! #やめるのだフェネックで学ぶC++
初期パスワードに「0やOとなど間違えやすい文字の入力にご注意ください」と、時々書いてあるような気がします。間違えやすい文字を初期パスワードに含めないようにする方が、適切ではないでしょうか。
やめるのだフェネック! パラメータをちょっといじりたいからって、.cppの定数を手で書き換えるのはイケてないのだ。一貫性の無いパラメータが設定されて事故の元なのだ! 設定ファイルからRubyで.hを自動生成してインクルードするのだ! #やめるのだフェネックで学ぶC++
テキストファイルの数行だけ数字を,で区切るのに、スクリプトを書く必要はないのだ! Emacsのキーボードマクロで書けるのだ!{\n}C-x ( M-f , C-a C-n C-x ) C-u C-x e{\n}アライさんにお任せなのだ! #けものフレンズ
やめるのだフェネック! たとえ英語が嫌いでも、プログラマに英語は必要なのだ! 英語が読み書きできて、語彙が十分でないと、stackoverflow.com で解決策を調べられないのだ! #やめるのだフェネックで学ぶC++
フェネックにやめて欲しいことは原則として検証コードを書いているのですが、意図的に発生させようとしてなかなか発生しないのが、スレッド間でデータを共有するときにメモリフェンスが抜けていると意図しない動作をすることです。これは起きてしまうと再現が難しいので厄介です。
サポートベクトルの話を読んでいて、アメリカ大統領選挙の選挙活動や結果予想に重要なのは、選挙ごとに結果が入れ替わる激戦州(swing states)であって(選挙人が多ければさらに重要)、現職(党)が圧勝しそうな州の結果は分かり切っていることを思い出しました。
タスクスケジューラは何をしているのか、というのは料理をすれば分かります。ご飯を炊いて、味噌汁を煮て、総菜と果物を盛り付けつつ、魚が黒焦げにならなければ、タスクが時間制約を満たしたと言えるでしょう。中の人は久しく料理をしてないようですが。
やめるのだフェネック! 短時間で終わる処理の時間測定に、外れ値を入れちゃ嫌なのだ! WindowsやLinuxはマルチタスクOSだから、測定対象以外のプロセスに時間を取られることがあるのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! abi::__cxa_demangleが返したオブジェクトは捨てちゃいけないのだ! freeしないとメモリリークするのだ! 誰がメモリを解放するか、仕様を確認するのだ! #やめるのだフェネックで学ぶC++
手戻りなく掃除するには、部屋掃除は高いところから順に低いところを拭きますし、その後水回りを、台所、トイレ、風呂の順に掃除し、そのまま体を洗うとすっきりします。レイテンシを減らすためには実行順序は重要ですよね。
やめるのだフェネック! プロジェクトの、暦年第一週をてきとーに決めないで欲しいのだ! 例えばISO 8601(一週間は月曜始まり、暦年の第一週=第一木曜日を含む週)にして欲しいのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 手元の開発作業とGitHubへのリリース作業の両方の画面を開くと、どれがどれだか分からなくなるのだ! VirtuaWinとか使って作業画面を分けるのだ! #やめるのだフェネックで学ぶC++
結果という意味の英語は、resultの他にoutcomeがあります。Outcomeにぴったり当てはまる日本語を思いつかないのですが、良い会議とは、outcomeを見据えて運営するものだと思っています。
やめるのだフェネック! putcというメンバ関数を作るのはダメなのだ! putcは関数ではなくマクロで実装されていることがあるから、そのときは意味不明なエラーメッセージが出るのだ! #やめるのだフェネックで学ぶC++
自分の分野外の文章を読むと分からないことがあって、その分からない用語の説明を読むとまた分からないことがあって、こうして分からないことが増殖するが、ある点を境に減っていく、という現象を何と呼ぶのか分からないのですが、要するに不具合曲線ですよね。
やめるのだフェネック! ビットフィールドを設定/取得するのに、マスクしてシフトするのは唯一の方法ではないのだ! 最近のx86はPEXT/PDEP命令が使えるのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! コーディング規約には、ソースコードのファイル名の命名規則を含めるのだ! さもないと、同名の*.oが二つできてリンクエラーになってしまうのだ! #やめるのだフェネックで学ぶC++
例外は、コンストラクタが失敗したことを教えてくれるフレンズなんだね
やめるのだフェネック! sizeofにリテラルを渡すのはやめるのだ! sizeof('a')はCとC++で違うのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 参照とポインタは「どっちも間接アドレッシング」ではないのだ。ポインタはnullable(optional)とかiteratorとか、もっと多義的なのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 変数名をtimeと書いて時間と読ませるのは、点(時刻)なのか幅(狭義の時間)なのか分からないのだ! timestampかdurationと書いてほしいのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 浮動小数をprintf("%.0e")して7文字(-1e-308)で収まると、決め打ちするのはやめるのだ! -infinityと表示するときは9文字なのだ! #やめるのだフェネックで学ぶC++
プログラミングに数学は必要ですか、という質問には競プロの方々が答えてくれると思いますが、個人的には大学初等レベルまでの化学が役に立っています。100種類の元素の無限の組み合わせはアセンブリ言語のようなもので、化学の諸法則はデザインパターンに似ていると思いませんか?
やめるのだフェネック! 「どんな型の関数へのポインタでも入る物」として、void*を使うのはやめるのだ! データへのポインタとコードへのポインタは互換ではないのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 公開するヘッダファイルに、実装にだけ必要な宣言や定義も書いて「全部入り」にしちゃいけないのだ! 他のプログラマがドキュメントに無い「隠し機能」だと思って使ってしまうのだ! 保守の危機なのだ! #やめるのだフェネックで学ぶC++
pylintで未定義変数を使用していることを見つけられるなら、pythonで if __name__ == "__main__" を実行する前に未定義変数を使用しそうなことを見つけてくれてもよさそうですが、メタプログラミングができるとそうはいかないのでしょうか。
やめるのだフェネック! クラス図のメンバにintとかstringとか書かないで欲しいのだ! ～というデータという抽象を保ってほしいのだ! intやstringで実装するかどうかは後で決めればよいのだ! #やめるのだフェネックで学ぶC++
ソートにおいて、e,éの順序をどう扱うか、というのはフランス語を読めない私には分かりません。さて日本語で名前や単語を並べるとき、"た"と"だ"の順序はどう扱うのでしょうか。以下が一つの回答のようです。{\n}http://pj.ninjal.ac.jp/QandA/etc/post-40/
やめるのだフェネック! size_tのビット数が分からないからといって、printfの書式指定に%luと書くのは嫌なのだ! %zuと書くのだ! #やめるのだフェネックで学ぶC++
マルチタスクで仕事をこなすのが出来る人と断言する前に、stop the world GCよりconcurrent GCの方がスループットが低いことを思い出して欲しいのです。スループット(速さ)とレイテンシ(早さ)は別の尺度であり、しばしばトレードオフなのです。
やめるのだフェネック! constメンバ関数からメンバ変数を書き換えたくなったからといって、いきなりmutableとかconst_cast<T*>(this)とかしちゃいけないのだ! 呼び出し側はスレッドセーフを期待しているのだ! #やめるのだフェネックで学ぶC++
読むのが難しい文章をそもそも読める必要があるのか、という方は一度特許明細書と、特に請求項を読んでみたらいかがでしょうか。特許に比べれば、学術論文は理解して引用して頂くように、はるかに読みやすく書かれていると思います。
やめるのだフェネック! 実行ファイルのバイナリサイズを削減するのに、使ってなさそうな関数を探して #if 0 ... #endif を試すのはまわりくどいのだ! LTO(Link Time Optimization)を使うのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 手作業で、段落を整形して一行の長さをそろえるのは大変なのだ! EmacsならM-q一発なのだ! (setq-default fill-column 70)で長さを変えられるのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! snprintf(dst,N,"%s")でdstにN文字ちょうど書き込もうとすると最後はNUL終端されるが、strncpy(dst,,N)のときはdstがNUL終端されないのだ! バッファオーバランの危機なのだ! #やめるのだフェネックで学ぶC++
ロンドンの飲食店でミネラルウォーターを頼んだら、"Still or sparkling?"と聞き返されました。「炭酸なしですか、炭酸ありですか」という質問ですが、自動翻訳には厳しそうです。
やめるのだフェネック! enumの要素数をプログラマが数えて定数に打ち込むのは、要素が増えた時にメンテナンスできなくなるのだ! 要素の先頭が0で連番なら、enumの最後のメンバにCOUNTを加えればそれが要素数になるのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! C++とCで共用するヘッダファイルで、構造体の内部構造体名はすべての構造体で一意でなければならないのだ! そうでないとCでは構造体を再定義しましたとエラーになるのだ! そもそも内部構造体をやめれば済むのだ! #やめるのだフェネックで学ぶC++
C++のテンプレート周りで数百行のエラーメッセージを見たときの感想「え? かばんちゃん、急に何言い出すの」。私のコードのどこが悪いのか全く見当がつかないことがある。 #けものフレンズ
やめるのだフェネック! キーボードについている#はシャープじゃないのだ! Poundとかhashとかnumberとか読んで欲しいのだ! シャープはU+266Fという別の文字なのだ! #やめるのだフェネックで学ぶC++
思いついたことをテキストファイルに書き留めたが、どのファイルだか忘れてしまったので探そう、というときはコマンドラインが使えると便利ですね。{\n}find . -type f -name "*.txt" -mtime -14 | xargs grep regex
ソフトウェアの規模を測る方法は、ISO/IEC標準に複数あります。何かを測ることの身近な一例として、アメリカの株式指標には、DJIA, NASDAQ Composite, S&P 500の少なくとも三種類があります。何かを一つの指標で測ることはしばしば困難です。
ファンクションキーの使い道で真っ先に思いつくのは、Visual Studioでステップ実行することです。他の使い道ですが、Emacsでファンクションキーを押すと、背景色が変わったり、半透明になってブラウザの画面が読めるように設定しています。
やめるのだフェネック! 乱数の種は関数の外から与えるようにしないと、ユニットテストで結果を再現できないのだ!
エンディアンの違いは確かに厄介ですが、社会にも統一されないことはあるのです。株価が上がったときの色は、日経が赤でロイターが緑、下がった時はそれぞれ逆(緑と赤)なのです。遠目には株価が上がったのか下がったのか分からないのです。
やめるのだフェネック! do {...} while(0)はループ実行のオーバヘッドが掛かるから無駄とか言っちゃいけないのだ! 今どきのコンパイラは最適化でこのループを取り除くのだ! アセンブリコードを出力して確認するのだ! #やめるのだフェネックで学ぶC++
ドキュメントをサーバの共有フォルダで管理すると、うっかり手が滑ってエクスプローラーの操作を誤ったとき、ファイルを意図せずどこかのフォルダに移動して行方不明になりませんか。プログラマ以外も、ドキュメント管理をgitに移行した方がよいと思います。
やめるのだフェネック! ビルド中のエラーメッセージを英語で出したいからといって、シェルでexport LC_ALL=Cとすると、svnで日本語ファイル名が扱えなくてエラーになるのだ! LC_ALLはMakefileの中で設定するのだ!  #やめるのだフェネックで学ぶC++
「卵が先か鶏が先か」の答えは分かりませんが、旨いものと辛口の日本酒の相互再帰は、旨いものが先の場合があります。それは客が席につくと、おしぼりとお通しを持ってくる店があるからです。この場合、文脈自由文法の開始記号は旨いものです。
やめるのだフェネック! 配列の要素数を #define arraySizeof(a) (sizeof(a)/sizeof(a[0])) で数えるのはやめるのだ! aにポインタを渡すと、変な値が返ってくるのだ! テンプレートを使うのだ! #やめるのだフェネックで学ぶC++
C++17の新機能にstd::hardware_{destructive|constructive}_interference_sizeがあります。マルチスレッドで極限の性能を追い求めるC++erは待っていたのではないでしょうか。
やめるのだフェネック! 空の構造体がたくさんあるからって、typedefで全部まとめて一つにするのはやめるのだ! それらはBoost.MultiIndexのタグなのだ! #やめるのだフェネックで学ぶC++
計算量的安全性を持つ暗号とは、暗号を破る膨大なPCを運用するお金があれば、美味しい物が食べられるので暗号を解く気が失せるということですね。もちろん数学的好奇心は、お腹が膨れることより大事だという人はいますが。
コマンドプロンプトのディレクトリの区切り記号(0x5c)がバックスラッシュではなく円記号だと、別にお金の話をしている訳でもないのになぜ円記号なのだろうと思いますが、bashのプロンプトが$が終わっていても金額を入れる気にはならないのは不思議ですね。
曲名のソートって大小文字と先頭の冠詞は無視しますよね{\n}ruby -e "puts STDIN.each_line.sort_by { |s| s.downcase.gsub(/\\A\s*(((a)|(an)|(the))?\s+)/,'') }"
やめるのだフェネック! キーボードに落ちた髪の毛を取るときはスクリーンロックを掛けるのだ。髪の毛を追いまわしている間に、変な文字列がターミナルに入力されているのだ!
swapの使い方として、std::ostringstreamの中身を空にして内部状態を消すというのがあります。例外も投げません。代わりに空のものを=でmoveしてもよいです。{\n}https://stackoverflow.com/questions/20731/how-do-you-clear-a-stringstream-variable
やめるのだフェネック! 割り込みハンドラで自動変数のオブジェクトを生成するとき、コンストラクタがnewするのは困るのだ! メンバ変数と他のメンバ関数についても確認するのだ! #やめるのだフェネックで学ぶC++
uint64_tが10進数19桁であることは、std::numeric_limits<uint64_t>::digits10で分かるのです。われわれはかしこいので。constexprで自作して再発明しなくてもよいのです。 #けものフレンズ
C11と聞いて、static_assertが使えるようになったと答える人が情報科学科に、半減期が20分で崩壊モードが二種類あると答える人が化学科に進むのだと思います。
やめるのだフェネック! テキストエディタのフォントはデフォルトではなく、{I,l,1,|}, {0,O}の区別がつきやすいフォントを使うのだ! NTEmacsなら、Consolas + Migu 1Mとか使うのだ!  #やめるのだフェネックで学ぶC++
Pythonistaはパイソニスタ、Rubyistはルビイスト、Smalltalkerはスモールトーカーと読むはずですが、C++erはそもそも何と発音するのでしょうか? シープラスプラサー、でしょうか。
Windows 10のIMEがいつの間にか固有名詞に強くなっていませんか? "い"で始まる単語の入力中に、"いきなりステーキ"や"井上喜久子"さんが候補に出るのはなぜでしょうか? いきなりステーキは美味しいですし、サイバドール・マミも好きですが最近入力した覚えがないのです。
Hard disk driveをカタカナで表記するときはハードディスクとし、ハードドライブと書く人は少数派だと思います。ですのでC:ドライブがSSDでもローカルディスクなのは、分かりやすさを重視した結果でしょう。電話をダイヤルするのと同じような表現でしょうか。
職場の傘立てに傘が多数ありますが、部署の引っ越しや異動で居なくなった人が忘れていった傘を処分したいと考えています。{\n}Mark and sweep GC: 所有者が自分の傘にポストイットを貼る{\n}Copying GC: 傘立てをもう一つ用意して、所有者がそちらに傘を移動する
プログラマにとって古くからある機械分類問題といえば、日本語テキストがShift_JIS, EUC-JP, ISO-2022-JP, UTF-8.jpのどれかを判定することです。文字化けを文字化けと認識できるのは、実はすごいことですよね。
東海道新幹線に乗った時、Donna Burke氏の英語アナウンスが一通り聞き取れると、私はちょっとうれしくなります。軽く聞き流さずに、冠詞と複数形までしっかり聞き取るのが重要です。
やめるのだフェネック! 自由関数のシグネチャをgrepで集めると、複数行にわたる宣言と定義が途中で切れてしまうのだ! indentとctagsを使うのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! autoは便利だが万能ではないのだ! std::atomic<int> aから値を取り出すのに、auto v=aとは書けないのだ! atomicをコピーしようとして失敗するのだ! 型かload()が必要なのだ! #やめるのだフェネックで学ぶC++
プロジェクトのクリティカルパスがどこかは、よく考えないと分からないことがあります。東海道新幹線が開通するためのクリティカルパスは、おそらくは時速200キロで走る列車を開発することではなく、新丹那トンネルを掘ることだったでしょう。
やめるのだフェネック! 配列の要素を0から数えるのは、C言語が初めてじゃないのだ! イギリスやフランスでは、日本やアメリカの1階が0階(ground floor)なのだ! エレベーターに0とかGとか表示するのだ! #やめるのだフェネックで学ぶC++
RGuiでbinom.confintが実行できないのでなぜだろうと思いましたが、単にlibrary(binom)を実行するのを忘れていました。こういううっかりは気がつかないですね。
長文を書くときの問題は一貫性の確保です。何日も掛けて文章を書いていると、同じ概念を異なる言葉で書いてしまって、校閲中に後から統一しなければならないことがあります。ですので連続して文章を書く時間を確保して、集中力をぶつけることが重要だと思います。つまり集中工事ですね。
TCPで受信ポートを開いて受信した文字列を表示する、というプログラミングの練習で、動作確認にクライアントが必要なので何にしようかと思いましたが、Webブラウザから、http://localhost:port/ にアクセスするのが一番簡単だと気がつきました。
やめるのだフェネック! 二つのファイル名が違っているからと言って、異なるファイルとは限らないのだ! それらはシンボリックリンクやハードリンクかもしれないのだ! boost::filesystem::equivalentで確認するのだ! #やめるのだフェネックで学ぶC++
ACIDに対するBASEは酸に対する塩基というシャレですが、世の中にはatomicでない商取引があります。ホテルの予約は、複数の予約サイト、電話、受付で直接とさまざまな方法がありますが、結局(Eventually)泊まれるか断られるかに落ち着きますよね。
プログラマに「effectiveの意味は何ですか」と訊いて、「新しくプログラミング言語などを勉強しようと思ったときに、入門書の次に読む本についている冠です」と返ってきたら楽しそうですね。
やめるのだフェネック! ユニットテストを書くときは、いきなりテストを成功させてはいけないのだ! まず失敗させないと、テストに成功したのか、そのテストを実行していないのか、区別がつかないのだ! #やめるのだフェネックで学ぶC++
あるとき名古屋に向かっている新幹線が定刻より数分遅れていたのですが、名古屋で快速みえに乗り換える客を、走行中に車掌が11号車に集めていました。名古屋駅で1号車を降りてから階段まで歩く時間を省いて、快速みえが遅れないようにしたようです。レイテンシはこのように隠せるのです。
やめるのだフェネック! 引数としてconst T* pを渡すと、ポインタpが指すオブジェクトはimmutableとして扱われるが、deleteはできるのだ! deleteされたくなければ、デストラクタを非publicにするのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! #defineで再帰呼び出しはできないのだ! テンプレートメタプログラミングを使うのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! std::min(set.begin(), set.end()) はsetの最小要素を指すイテレータを返さないのだ! set.begin()とset.end()を比較して、set.begin()を返してくるのだ! #やめるのだフェネックで学ぶC++
録音が高精細度/高忠実度であることをhigh-resやhigh-defと言いますが、それ以前からhi-fiという言葉があります。Hi-fiのfiがfidelityの略だと知ったのは、Fidelityという証券会社があることを知ってからです。
やめるのだフェネック! 再帰による探索だけでは計算量が多すぎて解が求まらないことがあるのだ! そこは動的計画法を使うのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 時間には単位を書いてほしいのだ! usがμ秒だということはなんとなく分かるのだが、usecと書かないと我々とか米国と読めてしまうのだ! #やめるのだフェネックで学ぶC++
External fragmentationとは、回転寿司で一人分の席が複数空いているが隣接していないので、二人連れの客が席が空くのを待っている状態です。なおラーメン屋とバーでは既に座っている客が隣に移って空けてくれますが、これをcompactionと言います。
やめるのだフェネック! if constexprはコンパイル可能でなければならないのだ! PEXCEPTION_POINTERS->ContextRecord->{Rip|Eip} はコンパイルエラーを避けるために#ifdefにするのだ! #やめるのだフェネックで学ぶC++
"move forward"というのは文字通り前進という意味ですが、std::move std::forward と言えば、個人的には Effective Modern C++ で一番理解が大変な部分だと思います。
やめるのだフェネック! オブジェクト指向を「もの指向」と呼ぶのは嫌なのだ! 「目的語指向」と呼んで欲しいのだ! #やめるのだフェネックで学ぶC++
アライさーん、cppファイルを変更したのにコンパイルエラーが取れないとあわててるけど、Emacsでファイル名の横に**-がついているから、単にファイルを保存してないだけだよー #けものフレンズ
バグ発生曲線のパターンには( http://forza.cocolog-nifty.com/blog/2010/02/post-003a.html )があります。基本機能が動かないためテストを進められない状況は、あるジョーク( http://labaq.com/archives/51884072.html )を思い出します。こうではなく、「真正高品質型」でありたいですね。
やめるのだフェネック! メンバ変数名の目印のアンダースコアは、名前の先頭につけちゃいけないのだ! _で始まり次が英大文字の名前はC++処理系の予約語なのだ! #やめるのだフェネックで学ぶC++
行動経済学は今や必須科目だと思うのですが、同じ事実に対する印象の違いを端的に表す例に「朝三暮四」があります。四週間でできそうなことを三週間でやれと命令したが、一週間遅れたので結局四週間掛かった、というのはまさにこういうことではないでしょうか。
やめるのだフェネック! 出力ファイルストリームのcloseを、いつでもデストラクタ任せにすると、noexceptだからcloseで書き出しに失敗したことを検出できないのだ! ファイルの保存に失敗したことは知りたいのだ! #やめるのだフェネックで学ぶC++
operator==() =defaultはまだありませんが、相応の理由があることをBjarne Stroustrup氏自らが述べています。性能という視点は確かにC++では重要ですね。{\n}https://isocpp.org/blog/2016/02/a-bit-of-background-for-the-default-comparison-proposal-bjarne-stroustrup
やめるのだフェネック! 製品コードの中に直接#ifdef UNITTEST ... #endifと書くのは極力避けたいのだ! そこはdependency injectionを使いたいのだ! #やめるのだフェネックで学ぶC++
エラーメッセージや静的解析ツールの指摘事項には、該当箇所の行番号がついています。しかし指摘事項を直すとそれより下の行番号がずれてしまうので、どこを指摘しているのか分からなくなります。pylintなど、スクリプト言語の場合はどうするのがよいのでしょう。
やめるのだフェネック! デバッグprintfを#ifdef - #endifすると、うっかりリリースビルドで消し忘れて変なコンソール出力が出てしまうのだ! プロジェクト規定のDEBUG_PRINTFマクロを使って、デバッグ時だけ出力するのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! ビットフィールドを上から下に並べても、MSBから順に並ぶとは限らないのだ! エンディアンとコンパイラの仕様を確認するのだ! IPv4ヘッダの構造体をみて欲しいのだ! #やめるのだフェネックで学ぶC++
「私はこのことの真に驚くべき○○を発見したが、それを記すには余白が小さすぎる」というツイートを、私はまだTLで見たことがありません。
やめるのだフェネック! 配列をループで回すときのインデックスを何でもintにしてはいけないのだ! sizeof(size_t) > sizeof(int)だと4Gあたりで動作がおかしくなることがあるのだ! #やめるのだフェネックで学ぶC++
std::dequeは「デキュー」ではなく「デック」と呼んで欲しいのです～
やめるのだフェネック! 短絡評価の||を「または」と読むのは嫌なのだ! 「さもなくば」と読んで欲しいのだ! &&は「だったら」「なので」と読むのだ! #やめるのだフェネックで学ぶC++
プレゼンテーションの練習では、スライドを最後列から読めることと、聴衆の方を向くことを指導されます。ですが実際には、読めないほど細かい字で作った資料を朗読する人がいます。スライドを禁止したら、聴衆の方を向いて、伝える価値のあることを理解させることに注力して頂けるでしょうか?
やめるのだフェネック! 組み込み系だからって、即値アドレスをreinterpret_castしてレジスタやメモリにアクセスすると、PC上でユニットテストできないのだ! アクセサ関数を経由するのだ! #やめるのだフェネックで学ぶC++
CRTPは静的ポリモーフィズムを実現するフレンズなんだね!
やめるのだフェネック! volatile T*へのキャストをどう書く分からないからって、Cキャストを使っちゃいけないのだ! const_castを使うのだ! #やめるのだフェネックで学ぶC++
日本語には「うなぎ文」と呼ばれる語法があります。それはさておき、遠からずコンピュータが「俺カフェオレ」とダジャレを生成する日がくるのでしょうか。
やめるのだフェネック! int64_t v = 1 << 32; はint64_tではなくintをシフトしているのだ! 0x100000000ではなく0が入るかもしれないのだ! int64_tの変数に代入してから<<=でシフトするのだ! #やめるのだフェネックで学ぶC++
ソフトウェア業界でトランザクションと言えば不可分な一連の処理を意味しますが、transactionsと複数形にするとIEEEやACMの論文誌を意味します。
やめるのだフェネック! long longからIEEE 754 doubleへの変換は暗黙に行われるが、精度が落ちることがあるのだ! 仮数部は52ビットしかないから足りないのだ! #やめるのだフェネックで学ぶC++
ソフトウェア業界ではInternationalizationをi18nと略すことがあります。その要領なら、日本一長い駅名の元祖である長者ヶ浜潮騒はまなす公園前駅は、"長11前"とか"ち20え"とか"C31E"と呼ばれているのでしょうか。
やめるのだフェネック! thread_localを使う前によく考えるのだ! 特定のスレッドしか参照しない値は、スレッド起動時の引数で渡して参照できるのだ! アライさんはその辺ばっちりなのだ! #やめるのだフェネックで学ぶC++
ソースコードの関数にコメントをたっぷりつける、というのは、"comment a function profusely"というようです。そういう言い回しがあるのですね。
やめるのだフェネック! マクロに複数の文を入れるときは、do { ... } while(0) で囲むのだ! そうしないと、if文の直後でそのマクロを使ったときに、予想外の動作をすることがあるのだ! #やめるのだフェネックで学ぶC++
ネットの検索で記号は無視されることがありますが(単にStar!!と入れても先頭にデレマスの曲は出ない)、C++とim@sは理解してもらえるようです。検索頻度と使用頻度の高い単語は、記号が含まれていても記号込みで単語として認識する、という検索システムの柔軟性があるのですね。
やめるのだフェネック! 非PODのオブジェクトをmemcpyしてはいけないのだ! vtableへのポインタもコピーされてしまうのだ! 派生クラスのメンバが切り捨てられて不定値に置き換わってしまうのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! メンバ関数にYieldという名前は使えないのだ! winbase.hでYieldを「何もしない」マクロと定義しているのだ! 理解不能なエラーメッセージの危機なのだ! #やめるのだフェネックで学ぶC++
NASAの研修では、映画「アルマゲドン」にある168個の間違いを見つけるそうです。プログラマにもこういう研修があってもよさそうですが、実在のプロジェクトを俎上に載せると角が立つので、ちょうどいい映画はありませんか?{\n}http://dailynewsagency.com/2013/04/02/did-you-know-archive-nasa-7vb/
やめるのだフェネック! 関数定義をヘッダに移したら動かなくなったとか言っちゃダメなのだ! 定義がみえる関数呼び出しをまたぐ最適化が適用されたから、volatileでない変数を読みに行かなくなったのだ! volatileをつけるのだ! #やめるのだフェネックで学ぶC++
テンプレートメタプログラミングは「Haskellてき」だと思うのです。似たような関数は、いくつかヘッダファイルで目撃されているのです。まずはそれを探すのです。ちゃんと引数が適用可能かどうか、よくみるのですよ。 #けものフレンズ
ソースコードを変更するより一から書き直すという誘惑は強いですが、書き直すと新たな不具合が混入するので、一から書き直すのは避けたいですね。この状況を一語で示す表現はないでしょうか。
やめるのだフェネック! 「符号付きと符号無しの整数式の間での比較です」という警告は、文字通りの意味とは限らないのだ! 同じデータ構造を、異なるファイルで、異なる基本型で扱っているのが原因かもしれないのだ! #やめるのだフェネックで学ぶC++
プログラマの仕事しているところを他人が見ることはまずありませんので、美容院や飲食店のカウンターで仕事振りを眺めるというのはなかなか興味深いものがあります。その手際のよい仕事ぶりを見ていると、こちらもいい仕事しようと、なんだかやる気が湧いてきます。
やめるのだフェネック! デバッガ上で実行していることはバレているのだ! わざとint3を踏んで、SEHでハンドリングしたかどうか確認しているのだ! #やめるのだフェネックで学ぶC++
Rは変数名に.(dot, period)を使えるのですね。Un*xのファイル名に含まれる.(dot)には特別な意味はない、つまりファイルシステム自体には拡張子という概念がない、というのを思い出しました。
やめるのだフェネック! memsetが常にmemset関数呼び出しになるとは限らないのだ! clangは短い固定長領域については、mov命令で済ませることがあるのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! pragmaで警告を抑止してよいのは、コードレビューで承認されてからなのだ! -Wall -Werror は必須なのだ! #やめるのだフェネックで学ぶC++
std::ios_base::ate は「食べた」ではなく、at endの略です。食べないでくださーい! #けものフレンズ
仕事中のプログラマが、ハシビロコウみたく目つきが鋭くて近づき難いのは、そっとしてあげて欲しいのです。じっと動かないのは、複雑なマルチスレッド処理を考えているところなのです。
やめるのだフェネック! メンバ変数を一括クリアするのに、memset(this, 0, sizeof(*this))はまずいのだ! vtableへのポインタもクリアしてしまうのだ! #やめるのだフェネックで学ぶC++
信号で0と1が連続し過ぎないようにすることをスクランブルと言います。要するに、卵にその他もろもろ加えた後、黄身と白身を混ぜてから熱で凝固させるようなものです。
やめるのだフェネック! .sファイルのアセンブリマクロをテストできないと諦めないのだ! 単にマクロを展開して、C++のインラインアセンブリからcallすればテストできるのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! Zipでダウンロードしたソースコードを展開してそのままコピーすると、時差のせいで、現在時刻より古いためにmakeでリコンパイルされないことがあるのだ! そのときはmake rebuildかtouchするのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 自分の.cから他人の.cにある変数を使いたいからといって、自分の.cにexternを足さないで欲しいのだ! 宣言がint* aで、定義がint[] aだと、a[0]が落ちるのだ! ODR違反とカプセル化の危機なのだ! #やめるのだフェネックで学ぶC++
std::swapは例外を投げずに変数を交換できるフレンズなんだね。おもしろーい!
やめるのだフェネック! #if (sizeof(uintptr_t) > 4) とは書けないのだ! if constexpr (sizeof(uintptr_t) > 4)が使えるようになるのを待つのだ! #やめるのだフェネックで学ぶC++
プログラミングに熱中していると、食べるのがめんどくさいことってありませんか? われわれはジャパリまんのような、調理せずに食べられる完全食が欲しいのです。われわれはかしこいので。 #けものフレンズ
+演算子はオブジェクトを加算できるフレンズなんだね
やめるのだフェネック! .hppからモックなどを作るときに、自動生成する予定のファイルがインクルードできないのは困るのだ! インクルード可否をMakefileから注入して欲しいのだ! __has_includeはまだ早いのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! uint32_t = 1を一度に35回シフトして0になったのは、LTOが有効だからだ! LTOがないと8なのだ! Nビット整数を一度にN回以上シフトするのは未定義動作だから直すのだ! #やめるのだフェネックで学ぶC++
決まり字の応用例は、地名の絞り込みです。カーナビやJRの券売機から地名や駅名を入力すると、最初の数文字を入力した時点で、残りは入力しなくても画面に全候補を表示してくれます。駅探の電車の時刻表もそうなっています。{\n}http://ekitan.com/
やめるのだフェネック! C++98の自作STATIC_ASSERTマクロは、C++11では公式static_assertに置き換えて欲しいのだ! どこでエラーが起きたかは分かっても、なぜ起きたか分かりにくいのだ! #やめるのだフェネックで学ぶC++
Dataがdatumの複数形なら、複数のデータは何と書くのか悩みますが、data setsと書けばよさそうです。
やめるのだフェネック! make cleanするときに、.dを作ってすぐ消すのは時間の無駄なのだ! ifneq ($(MAKECMDGOALS),clean) で.dを作らないようにするのだ! #やめるのだフェネックで学ぶC++{\n}https://www.gnu.org/software/make/manual/html_node/Goals.html
今のx64プロセッサは内部48bitでアドレスを扱っているようですが、SIZE_MAXは2^64-1と定義されています。コンパイル時定数なのは、アドレスが49bit以上有効なプロセッサが将来出るのを期待してのことでしょうが、何か釈然としないのは私だけでしょうか。
やめるのだフェネック! ヘッダファイルで定義した定数を書き換えるたびにフルビルドが走るのは嫌なのだ! 定数伝搬するつもりがなければ、宣言だけ公開して定義は.cppに入れておけば、定数を変えてもその.cppだけリコンパイルすれば済むのだ! #やめるのだフェネックで学ぶC++
すごーい! NVI idiom は、公開インタフェースのmutexを基底クラスで一元的に行って、派生クラスでmutexし忘れるのを防いでくれるんだね!
やめるのだフェネック! ファイルをShift_JISで保存するのはやめるのだ! //コメントが「でゲソ」で終わると、次の行もコメント扱いされて無かったことにされるのだ #やめるのだフェネックで学ぶC++
ロンドンでお店に"If this till is unattended, please pay at the ground floor."と書いてあるのをみました(この文が間違っているならそれは私のせいです)。このtillはレジのことですが、自動翻訳が大変そうです。
やめるのだフェネック! 関数の返り値型をautoにしたら、return vec[i]でベクタの要素への参照は返せないのだ! 要素のコピーが値渡しされるのだ! そこはdecltype(auto)が必要なのだ! #やめるのだフェネックで学ぶC++
BYODはBYOBからきたそうです。日本でホームパーティーはあまり聞きませんが、古くから実践しているBYODは銭湯でしょう。なお私の行きつけのホテルは、客室のタオルを近所の温泉に持ち出してよく、その温泉の割引入場券も売っています。{\n}https://www.otsuka-shokai.co.jp/words/byod.html
やめるのだフェネック! 年齢不詳のときに、0歳を返すのは論外だが、だからって-1歳を返さないで欲しいのだ! boost::optional に入れて欲しいのだ! #やめるのだフェネックで学ぶC++
print "1" + "0";{\n}python2.7だと 10{\n}rubyだと 10{\n}exprだと 1{\n}perlだと 1
やめるのだフェネック! そのboost::regexをstd::regexに置き換えるのはやめるのだ! std::regexは再帰正規表現をまだサポートしていないのだ! #やめるのだフェネックで学ぶC++
~(tilde)というと、C言語の単項演算子が思い浮かぶのですが、~が二項演算子の言語といえば、DとRとKuinを思いつきます。他にもいろいろあるでしょう。{\n}https://stat.ethz.ch/R-manual/R-devel/library/base/html/tilde.html
やめるのだフェネック! 自作assertをマクロでなく関数で書くのに、MyAssert(int cond)にすると、ポインタを渡すとコンパイルエラーになるのだ! boolとかtemplate T&&を検討するのだ! #やめるのだフェネックで学ぶC++
optionalとは値が「ないかもしれない」オブジェクトのことですが、金融の世界にもオプションがあります。以前読んだ本によれば、コールを買う=強奪する権利、プットを買う=押し売りする権利を手に入れることだそうです。権利というのは「行使しなくてもよい」という意味です。
やめるのだフェネック! ポインタが壊れていることを、デバッガでちゃんと見つけて欲しいのだ! gdbでinfo registersと打つのだ! 上位ビットがカーネル領域に入っていたり、下位ビットのアラインメントがとれていないのは疑わしいのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 同じx86 CPUだからって、64ビットアプリと32ビットアプリで、浮動小数が同じ計算結果を返すと仮定してはだめなのだ! SSEは内部64ビットだが、x87は内部80ビットで計算しているのだ! #やめるのだフェネックで学ぶC++
横浜駅が完成する前にC++標準が完成することはありえますが、横浜駅が完成する前に私がC++を完全に理解することはなさそうな気がします。
やめるのだフェネック! ヘッダファイルをインクルードする順番が入れ替わるとエラーになるのは困るのだ! 宣言と定義を適切にヘッダファイル群に分割して、依存関係を一方向にそろえるのだ! #やめるのだフェネックで学ぶC++
Rの<- (assignment operator)は"gets"と読めるそうです。ではC/C++の->は何と読めばいいのでしょうか? 改めて聞かれるとよく分からないですね。
やめるのだフェネック! boost::anyオブジェクトにchar*型の値を入れたとき、 boost::any_cast<const char *> で取り出すのはやめるのだ! boost::bad_any_cast の危機なのだ! #やめるのだフェネックで学ぶC++
これをデッドロックと呼ぶのか矛盾と呼ぶのか分かりませんが、英語に"Catch 22 (situation)"という言葉があります。語源は同名の小説です。
やめるのだフェネック! よく知られたアルゴリズムをそのまま使うときは出典を明記して欲しいのだ! そのコードがXorshiftだということは、保守する人には分からないのだ! #やめるのだフェネックで学ぶC++
Pythonのlist comprehensionを見たときにHaskell的だなあと思いましたが、実際そのようです(下記)。普段使っているのと異なるプログラミング言語を使うと、思わぬ出会いがあります。{\n}https://docs.python.jp/3/whatsnew/2.0.html
やめるのだフェネック! 条件演算子 (expr) ? t : f よりif-elseの方が分かりやすいとか言わないで欲しいのだ! それはconditional move命令に変換することで、分岐予測が外れるペナルティを避ける必要があったのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! シュミレーションはちょっと恥ずかしい誤字なのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! boost::fusion::vectorの番号付き(vectorN)は、C++11で廃止になるのだ! C++03では型引数が同じでも、番号付きと番号なしでは違う型だから注意が必要なのだ! #やめるのだフェネックで学ぶC++
チップのピン配置にI行がないのは1列と混同するのを避けるためだと思われます。さてワシントンDCの通りも南北が番号、東西が文字ですが、J streetはありません。理由は諸説ありますが、昔はIとJが分かれていなかったかららしいです。BVLGARIも同様ですね。
やめるのだフェネック! __attribute__((always_inline)) は常にインライン展開できるとは限らないのだ! 再帰呼び出しはインライン展開できないのだ! そもそもinlineはヒントであって命令ではないのだ! #やめるのだフェネックで学ぶC++
随分前ですが「それは象と鯨とどっちが強いか比べるようなもんだ」と言われたことがあります。例えば、忙しいときにIDEやテキストエディタの優劣について話し掛けられたら、こう言ってさっさと仕事に戻るのがよろしいかと思います。
やめるのだフェネック! /usr/binのツールが古かったり、/usr/libのライブラリが足りなかったりすると、新しいGCCをビルドできないのだ! 服を買いに行く服がないのは困るのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 関数へのポインタにnullptrは確かに使えるが、できれば何もしない関数を設定して欲しいのだ! NULL検査はわずらわしいし忘れやすいのだ! #やめるのだフェネックで学ぶC++
JavaとJavaScriptは○○と～くらい違う、というのはときどき流れてくる定番ネタですが、チェリストとチエリストくらい違う、というのはまだ聞きませんね。JavaScriptにはchopもchompもないそうですが。
やめるのだフェネック! "the dinosaur book"は恐竜のフレンズ図鑑じゃないのだ! "Operating System Concepts"の通称なのだ! #やめるのだフェネックで学ぶC++
最適化と言えば、私はC++コンパイラのようなコードの最適化を思い浮かべましたが、今検索すると数理最適化の話が結構出ます。今までもずっとそうだったのでしょうか。
やめるのだフェネック! XMMレジスタを収める配列を確保するのに、reinterpret_castを使ってアラインメントし直すのはめんどくさいのだ! std::aligned_storageを使えば済むのだ! #やめるのだフェネックで学ぶC++
「野生解放」とは、C++で高速化に行き詰ったので、AVX命令とBMI(Bit Manipulation Instructions)を使ってさらなる高速化を図ること #けものフレンズ
大学で教わったこととして、普段から何かしら書き留めておくと長文を書く時の種になる、ということがあります。確かにコードの断片や特許の明細書図面を再利用すると、書く時間を節約できますので、文章はたくさん書くともっと書けるようになるようです。
やめるのだフェネック! コンテナの中身をfor文でなめているときに、呼び出し先の関数でコンテナの中身を増減したらイテレータが無効になることがあるのだ! 無効なイテレータにアクセスするのはまずいのだ! プロセスの危機なのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! thisと引数が同じオブジェクトかどうか(二つの引数が同じオブジェクトかどうか)確かめずに、片方から他方にメンバをコピーするのは危ないのだ! memcpyのように要素が消失することがあるのだ! #やめるのだフェネックで学ぶC++
かつて数学の時間に、組み合わせ爆発の例として「人類が俳句を作りきることはない、いろは48文字の17乗は膨大だ」とありました。さてランダムな17文字が日本語として意味をなす確率はどれくらいでしょうか。ちなみに天和を親があがる確率は33万分の1だそうです。
やめるのだフェネック! 演算子の優先度を覚えるのは無理なのだ! expr ? 2 : 3 + 4; 4 + expr ? 2 : 3; 4 + (expr ? 2 : 3); は違うのだ! 括弧をつけるのだ! #やめるのだフェネックで学ぶC++
C++14では、整数の桁区切り記号として、'を使えるようになりました。C++14以前との互換性を考慮して選ばれた記号ですが、スイスでは似たような記号(U+2396)で桁を区切るので、実社会と無縁でもないのです。
やめるのだフェネック! x86で、intを一度に32ビット以上シフトするのはやめるのだ! REX.Wがないときのシフト回数は有効桁数が5ビットしかないのだ! そもそもC++でNビット整数を一度にNビット以上シフトした結果は未定義なのだ! #やめるのだフェネックで学ぶC++
よく言われることですが、勉強会とは、「発表者が他人に何かを上手く説明できるまでとことん勉強する」会ですよね。
やめるのだフェネック! シングルスレッドのアプリはSetProcessAffinityMaskを1に設定すると速くなるかもしれないが、マルチスレッドのときもうっかり1に設定すると1コアしか使ってくれないのでスレッドが並列実行されないのだ。 #やめるのだフェネックで学ぶC++
やめるのだフェネック! コードにstd::cinを直書きしてはいけないのだ! ユニットテストでキー入力するのは大変なのだ! テストケースではistringstreamを作って、std::istreamへの参照を渡すのだ! #やめるのだフェネックで学ぶC++
グローバル変数の初期化順序に依存して動かなくなるコードは、*.oをリンクする順序が変わることで発覚することがあります。Makefileで$(sort *.o)することで問題を回避できますが、逆に*.oの順序をランダマイズして問題をあぶり出すことはできないでしょうか。
やめるのだフェネック! std::wstring_convertによるUTF-8/16/32変換は、ちゃんと例外を捕捉するのだ! わざと冗長にUTF-8エンコードした文字列を入力すると、std::range_errorが飛ぶことがあるのだ! #やめるのだフェネックで学ぶC++
ソフトウェアは形が無いから把握するのが難しい、という言葉は最近聞かなくなりました。よくよく考えたら、高校の理科や社会で習うことで「目に見えるもの」はそれほどなくて、ほとんどは「概念を理解すること」ですよね。
やめるのだフェネック! そこにconstをつけると、テンプレート周りで770行のエラーメッセージが出るのだ! #やめるのだフェネックで学ぶC++
「ではお前たち、定義を見つけてくるのです。不完全型でないのを見つけてくるのですよ。」「宣言だけでコンパイルするのはだめなのか? とりあえず参照はできるって聞いたよ」「メモリを確保するときにサイズが必要なのです。頭を使うのです。」 #けものフレンズ
曽野綾子著 "無名碑" に、ダム建設について「僕の仕事は一生どんなにいい仕事をしても個人の名前は残らない」とあります。だからこそプログラマにとって、G. Pascal Zachary著 "Showstopper!"(山岡洋一訳 "闘うプログラマー") は重要だと思うのです。
やめるのだフェネック! -flto オプションはすべてのソースコードのコンパイルとリンカにつけるのだ! -fltoをつけたりつけなかったりすると、リンクエラーになることがあるのだ! #やめるのだフェネックで学ぶC++
US-ASCIIコードで、制御文字のうちDEL(1111111b)だけが離れているのは、パンチテープ上の削除したいデータを、1行分穴を開けることで削除するためです。この現代版は馬券を購入するためのマークカードで、"取消"をマークすると、消しゴムを使わずに取り消せます。
やめるのだフェネック! 関数や型がどこで定義されているかを、いちいちgrepで調べるのは嫌なのだ! etagsでTAGSを作って、emacsからタグジャンプすればよいのだ! #やめるのだフェネックで学ぶC++
Null object pattern は、if (pointer) を省いて見通しをよくするパターンなんだね! /dev/null のフレンズなんだね!
やめるのだフェネック! #include "../detail/foo.h"と、横断するパスを書かないで欲しいのだ! それは実装部のヘッダだから他モジュールには公開しないのだ! インクルードパスはヘッダファイルの公開範囲を規定しているのだ! #やめるのだフェネックで学ぶC++
あなたこそ、Tracing GCとリフレクションのないフレンズ? めずらしーね! #けものフレンズ
やめるのだフェネック! テストはソフトウェアの完全性を保証するものではないのだ! ソフトウェアの品質が十分でないという帰無仮説をテストで支持しようとして、テストが全部通ったので、帰無仮説を棄却して品質が十分高いとみなすことなのだ。 #やめるのだフェネックで学ぶC++
やめるのだフェネック! メンバ変数を増やしたとき、複数あるコンストラクタすべてに、そのメンバ変数の初期化を加えるのを忘れちゃ嫌なのだ! 予防とDRYを兼ねて、メンバ変数の定義に初期化を置くのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! Google Testの結果を取り出せるのは、テストが完走したときだけなのだ! 途中でsegmentation faultで落ちたときは、出力が途中で切れているのだ! Exit statusを確認するのだ! #やめるのだフェネックで学ぶC++
「タルムードの破産問題」はなぜそういう分配なのかが長いこと分からず、20世紀になってから、協力ゲーム理論が導く解と一致しました。アルゴリズムでも今後このような発見はあるのでしょうか。
やめるのだフェネック! コンテナの要素の型をソースコードにべた書きしたら、型を変えた時に修正が大変なのだ! std::vector::value_typeとautoとdecltypeを使うのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! C++11なら、解放して欲しいオブジェクトは、生ポインタでなくstd::unique_ptrを返すことを検討するのだ! 生ポインタは所有権を渡さないという意志を示したいのだ! #やめるのだフェネックで学ぶC++
Register renamingとは、「そのレジスタのデータはこれ以上使わないのです。おかわりをよこすのです。」 #けものフレンズ
A/Bテストはウェブサイトの運営などに用いられる手法ですが、プログラマを効率よく働かせるために作業環境を比較対象試験している組織はあるのでしょうか。そろそろ「ピープルウェア」や"Making Software"以後の、データが欲しいです。
やめるのだフェネック! スレッドセーフと再入可能は違うのだ! 複数のスレッドからmallocは呼べるかもしれないが、割り込みハンドラからmallocは呼べないのだ! ヒープ構造の危機なのだ! #やめるのだフェネックで学ぶC++
「WSJで学ぶ経済英語」は実務に役立つ英語の文法用例集です。いまどきの高校生はこういう教材で学んでいるのですから、なんとも頼もしい限りです。ネット以前の優良な教材は、「やさしいビジネス英語」などに限られていましたから。{\n}http://jp.wsj.com/news/types/j-economy-english
やめるのだフェネック! __PRETTY_FUNCTION__の長さを決め打ちするのはやめるのだ! 引数にboost::multiprecisionとか取るテンプレートは、数百文字になることがあるのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! クロスコンパイル環境の開発では、ターゲットでは使えるがホスト(ユニットテスト)では使えないキーワードを、マクロを介して使って欲しいのだ! 直接__forceinlineと書かないで欲しいのだ! #やめるのだフェネックで学ぶC++
人は純粋な乱数を思い浮かべることができないと聞きます。それを確認するために、0-9の数字をたくさん書いてみるのではなく、右手と左手でじゃんけんをした方はいますか?
やめるのだフェネック! 単に速い処理をリアルタイムと呼んじゃ嫌なのだ! リアルタイムシステムとは、結果の正しさが内容だけでなく、締め切りに間に合ったかどうかにも依存するシステムなのだ! #やめるのだフェネックで学ぶC++
コンパイル中にファイルを開こうとして、WindowsのExplorerからEmacsにファイルをドラッグ・アンド・ドロップしたら、その間に.oが増えたので違うファイルを選んで開いてしまったときの気持ちを、280字以内で述べて下さい。
やめるのだフェネック! __builtin_popcountの引数はunsigned intなのだ! long long intを渡すときは__builtin_popcountllなのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! CRC計算を自作する必要はないのだ! Boost CRC Libraryがあるのだ! #やめるのだフェネックで学ぶC++
プログラマの習慣に、部屋片づけや不用品の整理をガベージコレクションと呼ぶことがあります。同様に、家計に占める金額の少ない出費(日用雑貨とか)を気にしなくなることを、正則化と呼ぶようになるのでしょうか。
やめるのだフェネック! #include文のファイル名は、大文字と小文字を間違えちゃ嫌なのだ! Windowsでは問題なくても、Linuxではファイルがインクルードできないと言われてしまうのだ! #やめるのだフェネックで学ぶC++
ビットフィールド構造体の設定を、各メンバを逐次代入するのと構造体まるごとコピーするのとで、生成されるコードに大差ありませんでした。それよりもg++はビットマスクを使って各メンバを設定するが、clang++は全メンバのビットパターンからなる即値を入れるという違いの方が大きいです。
やめるのだフェネック! 引いて負なら0にするという飽和演算は、素直にsaturated sub(traction)と書いてほしいのだ! First grade subtraction(小学一年生の引き算)は正しいけど通じないのだ! #やめるのだフェネックで学ぶC++
講談社ブルーバックスの本を買ったら、しおりが挟まっていて、そこには「シグモイド関数 薬の用量と作用の関係を 表す式」と書いてありました。自分とは異なる分野から学ぶことがたくさんありそうですね。
やめるのだフェネック! XMMレジスタの値を、素のuint64_t[]に保存してはいけないのだ! 16 bytes アライメントが必要なのだ! 単にreinterpret_castするだけじゃダメなのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! テンプレートマッチングをstd::is_pointerだけで済ましてはいけないのだ! 配列T(&)[SIZE]とstd::is_null_pointerに対するマッチングも必要なのだ! #やめるのだフェネックで学ぶC++
Hyper-Threadingとは、「パイプライン資源の狩りごっこだね! 負けないんだから!」 #けものフレンズ
やめるのだフェネック! 関数内で異常が発生したから、それまで確保したメモリやファイルハンドルを解放する処理を、gotoで関数の最後に飛んで行うのはやめるのだ! Cではそれでよいが、C++ではRAIIを使わないと例外安全にならないのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! strict aliasing rule警告の意味が分からないからって無視してはいけないのだ! 正しく直すのだ! #やめるのだフェネックで学ぶC++
C++の掟は、自分の力でメモリ管理すること。自分のオブジェクトは、自分で解放するんですのよ。ガベージコレクタ任せじゃダメよ。 #けものフレンズ
プログラマの初出勤日は、勤務規則を聞いてから社員証と健康保険証を頂いて、二日目にはもう開発に加わっているというのが、涼風青葉みたいでいいと思います。座学よりも、自分で手を動かしたり技術的課題の議論をしたりする方が楽しいですよね。 #newgame
やめるのだフェネック! ビットフィールドのアラインメントに隙間のビット数を指定したダミーのメンバを加えると、他のメンバのビット数が変わった時にダミーを変え忘れてメンバのレイアウトがずれてしまうのだ! 無名でサイズ0のフィールドを使うのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 複数行マクロを入れる do {...} while(0); の;は余計なのだ! マクロを展開する場所で、直後にelseを置くとコンパイルエラーになるから;を取り除くのだ! #やめるのだフェネックで学ぶC++
檀ふみ著"ありがとうございません"から重引しますが、曾野綾子さんが"ワープロで書く原稿は「油絵」だ、言葉を幾重にも重ねて仕上げていく"とおっしゃったそうです。確かにウォータフォールではなく、テスト駆動でインクリメンタルにソフトウェアを開発するのはこういうことだと思います。
やめるのだフェネック! 複数のファイルを結合したとき、改行コードが行ごとにLFだったりCRLFだったり、まちまちなのは気持ち悪いのだ! Emacsで表示すると^Mが見えてしまうのだ! #やめるのだフェネックで学ぶC++
ヒープに置けないオブジェクトの例としては、RAIIを使った割り込み禁止/許可があると思います。解放忘れ=許可し忘れはまずいでしょうし、メンバ用のメモリを確保する必要はありませんので、自動変数にしてブロックスコープと割り込み禁止区間を一致させるのがよいでしょう。
やめるのだフェネック! ユニットテストのassert_equalに、expectedとactualのどちらを先に書くかは、テストを書く前に確認するのだ! Google TestとCppUnitは期待値が先だが、CUnitは後なのだ! #やめるのだフェネックで学ぶC++
人間の脳は20ワットなのでコンピュータよりはるかにエネルギー効率がよいと聞いて、「フーリエ変換は時間が掛かるが、太陽光をプリズムに通せば一瞬で周波数分解できる」と言った人を思い出しました。
やめるのだフェネック! x86でNOP命令を「何クロックか待つ」ためには使えないのだ! Z80とは違うのだ! NOPは命令をアラインメントするために使うのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! C++キャストは確かに字面が長いが、だからって横着してCキャストにすると、ポインタのconstが剥がれても気がつかないのだ! #やめるのだフェネックで学ぶC++
大学初等レベルまでという限定付きで、物理と化学は、CとC++のようなものに感じられます。最小限の文法で何でも作るのがC、たくさん覚えると覚えたことが一気につながるのがC++でしょうか。物理学科と化学科の方なら、もっとよい説明ができると思います。
やめるのだフェネック! ユニットテストが書きにくいからって、#defineでprivateをpublicに置き換えちゃいけないのだ! アクセス指定子を超えたメンバ変数の順序は入れ替わることがあるのだ! friendを使うのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! Googleの看板"{first 10-digit prime found in consecutive digits of e}.com"を解くのに、エラトステネスの篩を自作するのはイケてないのだ! #やめるのだフェネックで学ぶC++
プログラミングでboxingとは、プリミティブ型の値をクラスのインスタンスに収めることです。国によってはboxing dayという休日があり、これは箱(box)にギフトを詰めて送ることに由来するそうです。
やめるのだフェネック! そこはvolatileではなくstd::atomicが必要なのだ! 競合動作の危機なのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! do { ... } while(--i >= 0) は、iが符号なし整数だと永久に終わらないのだ! プロセスの危機なのだ! #やめるのだフェネックで学ぶC++
ねねっち「そうだ、なるっちのHaskellのコードなんだけど、ここポイントフリースタイルを使えばもっと短くなるんじゃない?」{\n}なるっち「・・・!」
やめるのだフェネック! 今プログラマに話しかけてはダメなのだ! プログラムのタスク切り替えは一瞬でも、プログラマのタスク切り替えは20分掛かるのだ! #やめるのだフェネックで学ぶC++{\n}http://www.bbc.com/capital/story/20170105-open-offices-are-damaging-our-memories
Makefileの再帰展開変数と単純展開変数は、例を示されればその違いが分かるのですが、概念としてうまく説明する方法はないでしょうか。関数型言語でいうところの、遅延評価が前者、代入が後者だと思えば合っていそうですが。
やめるのだフェネック! extern "C"はC「リンケージ」を指定しているのであって、C言語としてコンパイルしろとは言っていないのだ! CとC++の両方でコンパイルされるヘッダファイルなら、両方で通用するコードを書く必要があるのだ! #やめるのだフェネックで学ぶC++
0は8進数です。
やめるのだフェネック! 32bitレジスタマシンで、64bitリアルタイムクロックを読むのに、単に下位32bit-上位32bitと読むと、時刻が逆転することがあるのだ! 上位bitが一致するまで読み直すのだ! #やめるのだフェネックで学ぶC++
スマホで音楽を再生していて、再生位置をちょっとだけスライドして早送り/巻戻しするのは大変だが、大きく左右に振るとちょっとだけ早送り/巻戻しできる、という現象は、なんと説明すればよいのでしょうか。
やめるのだフェネック! ヘッダファイルを追加したのに、add-commitし忘れて帰っちゃ嫌なのだ! レポジトリをチェックアウトした他の人に、コンパイルエラーの危機が訪れるのだ! #やめるのだフェネックで学ぶC++
締め切りドリブン=締め切りが最も早い仕事から着手することの問題点は、仕事を仕上げるまでの時間が正確に見積もれていないと締め切りに間に合わないことですね。仕事の総時間が見積れる程度まで軽く進めるのが合理的だと思いますが、これは何ドリブンと言うのでしょうか。
やめるのだフェネック! 関数への参照は、&をつけるのとつけないのと使い分けるのだ! テンプレートマッチングに失敗することがあるのだ! #やめるのだフェネックで学ぶC++
Intel 64 and IA-32 Architectures Software Developer Manuals は4700ページあるので、もはや持ち上げることすらできません。
やめるのだフェネック! コレクションの先頭要素が0か1か区別して欲しいのだ! 0時はあっても、0日や0月や平成0年はないのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! classはstructのsyntactic sugarにすぎないのだ! デフォルトの公開範囲が違うだけで、できることに変わりはないのだ! #やめるのだフェネックで学ぶC++
午後21時という表現は変なのですが、言いたいことは分かります。Rubyなら以下の意味ですね。{\n}timestamp.sub(/(\D*)(\d+)/){t=$2.to_i;(t+((!$1.include?("午後")||(t>12))?0:12)).to_s}.to_i
やめるのだフェネック! インデントとか括弧の字下げとか一行は100文字以内とかいう規則を、プログラマに手作業で守らせるのは無理なのだ! どうしても守らせたければ、IDEやindentにさせるのだ! #やめるのだフェネックで学ぶC++
US-ASCIIしか使わない文章で、～の代わりにtilde(U+007E)を使おうとすると、表示で波が真ん中にあったり(Consolas)、上にあったり(IPAゴシック)します。素直にハイフン(-)を使うか、Ruby風に..と書く方がよさそうです。
やめるのだフェネック! 二つのオブジェクトが「同じ」と言われても、同値(same)なのか同一(identical)なのか曖昧なのだ! はっきり書くのだ! #やめるのだフェネックで学ぶC++
全/半二重通信はあまり聞かなくなりましたが、鉄道の世界では全二重の容量は半二重の二倍ではないのです。単線の容量は閉塞区間を往復する時間で決まりますが、複線の容量は続行運転の間隔で決まるので二倍よりはるかに多いのです。量の違いが質の違いを生むのです。
やめるのだフェネック! XOR r,rは単にレジスタrを0にするだけじゃないんだ! レジスタrとフラグの依存関係を絶って、実行効率を改善するためのイディオムなのだ! フラグを変えたくなければMOV r,0にするのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! switchに書けるのは整数だけで、switchのcaseに書けるのは整数定数だけなのだ! オブジェクトが==で比較できても書けないのだ! 多段if-elseともRubyのcase-whenとも違うのだ! #やめるのだフェネックで学ぶC++
AMラジオをつけっぱなしにしておくと、雷が鳴るとノイズが入るので、雷探知機になるそうです。プログラムが暴走して、CPU負荷が100%に張り付いたり、物理メモリを使いきってスラッシングしたことを検出するのに、音楽再生が途切れることで判断するのは有効でしょうか?
やめるのだフェネック! 固定アドレスの格納先を、uint32_tとかuint64_tとか書くのは嫌なのだ! そこはuintptr_tを使うのだ! #やめるのだフェネックで学ぶC++
プログラマがコンソールやテキストエディタを半透明にしているのは、ウィンドウの裏にある調べ物を見ながら入力するためです。その機能を開発した人は、壁紙をいつでも見られるようにしたかったのだと思いますが。
やめるのだフェネック! トイレットペーパーが2ロールセットされているのを、両方少しずつ使っちゃ嫌なのだ! 両方同時に無くなったら危機なのだ! ダブルバッファリングを思い出すのだ! #やめるのだフェネックで学ぶC++
"Disneyland will never be completed. It will continue to grow (以下略)" by Walt Disney という言葉があります。これをもじって、ソフトウェアは「完成」しない、アップグレードし続けるとも聞きます。
やめるのだフェネック! リークするのはメモリだけじゃないのだ! TCP/UDP受信ポートがリークしたら、プロセス終了まで同じ番号のポートが開けなくなるのだ! #やめるのだフェネックで学ぶC++
すごーい! Boost Serializationはenumをキャストなしで読み書きできるフレンズなんだね
やめるのだフェネック! 日付を甘くみてはいけないのだ! イギリスで2018年10月28日は夏時間から冬時間に切り替わる日なので、午前一時半が二度あるのだ!
すごーい! boost::io::ios_flags_saver は入出力ストリームの設定を後で戻すフレンズなんだね
やめるのだフェネック! 実行時に任意の正規表現を入力として受け取るのはやめるのだ! 複雑な正規表現を食わされて落ちる(ReDoS)ことがあるのだ! #やめるのだフェネックで学ぶC++
GitHubのpull requestがpush requestでないのは、「部屋に入ってもいいですか」が"May I come in?"だと考えれば分かると思います。
やめるのだフェネック! 関数の動作を #ifdef COLOR ～ #endif で切り替えると、COLOURと打ったときに～が除外されてしまうのだ! if (定数式)ならコンパイラが綴りの違いを見つけてくれるのだ! #やめるのだフェネックで学ぶC++
何かを習得するのに、徐々に(linear)ではなくある日突然まとめていっぺんに(by stages)分かる、ということがあります。語学の学習曲線はそのようだと聞きます。C++も言語なのですが、どうだったでしょうか。
やめるのだフェネック! クラスにoffsetofを取ると警告が出るのだ! Non standard layout型に対してoffsetofを取る意味があるのかよく考えるのだ! #やめるのだフェネックで学ぶC++
GCC6は標準でC++14としてコンパイルするので、C++98で書かれたコードは-std=gnu++98と明示する必要があります。製品コードをユニットテストするときは要注意ですね。{\n}https://gcc.gnu.org/gcc-6/changes.html
やめるのだフェネック! 返り値がdecltype(auto)のときにreturn (v);すると、ローカル変数vへの参照を返すのだ! 括弧が余計なのだ! 未定義動作の危機なのだ! #やめるのだフェネックで学ぶC++
ヘラクレイトスは「同じ川に二度踏み入れることはできない」と言ったそうですが、この言葉から「活用と探索のトレードオフ」を思い出しました。
やめるのだフェネック! 割り込みやシグナルやcondition variableは、それらの待ちに入る前に通知される場合に対処する必要があるのだ! そうでないと無限待ちになってしまうことがあるのだ! #やめるのだフェネックで学ぶC++
テンプレートのコンパイルには時間を使うのです。われわれはかしこいので。 #けものフレンズ
美容師に髪を切ってもらっていてすごいと思うのは、髪は切り過ぎたら元に戻せないのに、切り終わったときには髪型が整っているということです。テキストエディタにundoがあり、バージョン管理システムにrevertがあってよかったと思いました。
やめるのだフェネック! 命令の依存関係は、レジスタだけでなくフラグにもあるのだ! INCよりADDを使う理由とか、SHLXをとか調べるのだ! #やめるのだフェネックで学ぶC++
何かまずいことが起きたことの原因を、ヒューマンエラーと分類することがあります。しかし技術や工学は、自然現象を人間にとって都合よく利用することですので、ヒューマンが絡まないということはありえず、従ってヒューマンエラーとは説明を放棄したトートロジーにみえます。
やめるのだフェネック! volatile int value = *p; はpの指すものがvolatileではなく、valueがvolatileなのだ! pの指すものが更新されても、valueは連動して更新されないのだ! #やめるのだフェネックで学ぶC++
すごーい! 百人一首の決まり字は、コンピュータ以前に発明された、multi level indexなんだね!
やめるのだフェネック! メールクライアントにメールが届いたときに、ポップアップを出してはいけないのだ! プレゼンテーションの最中に届いたメールがさらされて恥ずかしいことになるのだ!
やめるのだフェネック! abs(INT_MIN)は間違った値 INT_MIN を返すが、INT_MIN / -1 はintに収まらないのでCPUがDivide Error例外を出すのだ! プロセスの危機なのだ! #やめるのだフェネックで学ぶC++
Claimは文句ではなく主張という意味ですが、claim(s)と聞くとまず特許の請求項を思い浮かべる人もいると思います。
やめるのだフェネック! f(uint8_t)とf(BYTE)とf(unsigned char)を同時には定義できないのだ! 関数を再定義してますと言われてしまうのだ! プログラマには違う型に見えてもコンパイラには区別がつかないのだ! #やめるのだフェネックで学ぶC++
Rubyスクリプトをユニットテストするとき、オープンクラスを使ってテスト対象のクラスの振る舞いを望み通り変えると、テストが書きやすいです。これはC++では簡単にはできないことですね。
やめるのだフェネック! 関数宣言と関数定義の引数名が違うのはまずいのだ! 片方がradiusで他方がdiameterだと、どちらが正しい仕様だか分からないのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 引数の"size"が、個数なのかbyte単位のサイズなのかword単位のサイズなのか分からないのは困るのだ! 区別できるような名前をつけて欲しいのだ! そもそも1 wordって何byteか分からないのだ! #やめるのだフェネックで学ぶC++
メール破産(email bankruptcy)という言葉があります。要するに長期休暇明けに処理不能なほど大量なメールがあったら、すべて消して再送されるのを待つのです。ITSとワークフローシステムが正しく運用されている組織なら大丈夫ですよね。
やめるのだフェネック! 文字列の集合を連結するのに、boost::algorithm::join(lines, " ") で連結しちゃ嫌なのだ! 英語はこれが正しいけど、日本語だと「弁慶がな ぎなたを振り回し」になってしまうのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 海外に渡すコードに、うっかり全角空白みたいな、US-ASCII以外の文字が入るのはまずいのだ! fileコマンドを使うか、ソースコードをRubyで読んでascii_only?で調べるのだ! #やめるのだフェネックで学ぶC++
社会に出るまでOfficeとWordを使ったことがない、と不安になる方がいるかもしれませんが、心配要りません。主要学会はLaTeXが使えます。{\n}http://ieeeauthorcenter.ieee.org/create-your-ieee-article/use-authoring-tools-and-ieee-article-templates/ieee-article-templates/{\n}http://www.acm.org/publications/proceedings-template
やめるのだフェネック! 問題を"problem"と報告したら、相手に「お前のせいで困っている」と言っているようで怒らせてしまうのだ! 取り組むべき課題は"issue"と訳すのだ! #やめるのだフェネックで学ぶC++
文字集合(Unicode)とその符号化(UTF-8など)はしばしば混同されます。これは私がDNAと遺伝子と染色体とゲノムを区別できていないのと、同じようなことだと思います。
やめるのだフェネック! LLVMをビルドするのに、もうconfigureは使えないのだ! cmakeの使い方を覚えるのだ! #やめるのだフェネックで学ぶC++
プロジェクトのクリティカルパスは、期限が守れるかどうかを決めるものであって、難易度とは別の概念です。カレーライスを作るクリティカルパスはご飯を炊くことですが、炊飯器のスイッチを押すのと、玉ねぎの皮をむいて炒めるのと、どちらが難しいかは明らかでしょう。
やめるのだフェネック! std::shared_ptrのダウンキャストは、getしてdynamic_castじゃないのだ! それじゃ何のために共有しているか分からないのだ! std::dynamic_pointer_castを使うのだ! #やめるのだフェネックで学ぶC++
コンピュータにはWDT(Watchdog Timer)を付けられますが、同様な仕組みに鉄道のデッドマンブレーキがあります。どちらも定期的に操作していないなら装置を止めるということですが、映画「スピード」の地下鉄にはついていなかったのでしょうか?
やめるのだフェネック! /* Local Variables: c-file-style: "stroustrup" */ を理解できないからって消さないで欲しいのだ! それはEmacs上でソースコードを整形するのに必要なのだ!  #やめるのだフェネックで学ぶC++
うるう年の規則が、400年周期より長い周期(細い精度)になったらプログラミングが大変だと思いましたが、そもそもそれだけの精度は出せないようです。{\n}http://eco.mtk.nao.ac.jp/koyomi/wiki/B5A8C0E12FB5A8C0E1A4CEA4E1A4B0A4EAA4CEBCFEB4FC.html
やめるのだフェネック! Google Testのユニットテストに共通の初期化は、setupでもsetUpでもなくSetUpなのだ! overrideをつければコンパイラが間違いに気づいてくれるのだ! #やめるのだフェネックで学ぶC++
"Life is a comedy to those who think and a tragedy for those who feel." by Horace Walpole という言葉は、まさにプログラマがプログラミングに熱中する理由なのではないでしょうか
やめるのだフェネック! ドキュメントがなくてもソースコード見れば分かる、ってそんな訳ないのだ! スレッドセーフとか再入不可とか計算量とか性能についてソースコードからは読み取れないのだ! #やめるのだフェネックで学ぶC++
既に公開しているインタフェースに対して、構造体への参照で渡すパラメータを後から増やしたいことがあります。構造体のバージョンをメンバに含めておくのが一つの方法ですが、秀逸な方法はWindows APIのように、構造体の先頭メンバを構造体のサイズにしておくというものです。
やめるのだフェネック! 複数行のコードをとりあえずコメントアウトするのに/* */を使うと、/* */が入れ子になっておかしくなることがあるのだ! #if 0 - #endifにして欲しいのだ! #やめるのだフェネックで学ぶC++
Rでテキストデータがパターンに一致する(TRUE/FALSE)かどうかの列を作ろうとして、lapply(data, func)して、funcの中でgrepを使ったらうまくいかず、grepではなくgreplが必要だったということがありました。同じようにはまった方はいますか。
やめるのだフェネック! 静的解析ツールの指摘が、意図的、誤検出だったときに、意図的、誤検出を選択するだけでは不十分なのだ! 第三者に分かるよう理由を書くのだ! #やめるのだフェネックで学ぶC++
Windows付属の電卓は、整数の除算を有理数で行っているようです。1を49で割って0.02040816...になったのを49倍すると1に戻ります。同じものを作ろうとすると、Boostで有理数を扱う必要があり、doubleで済ますよりもなかなか大変そうです。
やめるのだフェネック! その日はアメリカは祝日なのだ! 一日早くリリースしないと相手は受け取れないのだ!
Macro Fusionとは、「我々がInstructions Per Clockを満足できるまで頑張るのです」 #けものフレンズ
MACと大文字で書いたとき、始めに思いつくのはイーサネットアドレスですか、積和演算器ですか?
やめるのだフェネック! 整数に対するlog2がライブラリにないからって、ループを回すのはイケてないのだ! BSR命令か__builtin_clz()を使うのだ #やめるのだフェネックで学ぶC++
お菓子作りは、作っている途中からは完成形が予想できないのでレシピにきっちり従う、と聞いたことがあります。ですがソフトウェア開発に完璧なレシピを求めてウォータフォールにし、序盤は上手く行っているように見えて後工程で突然壊れたようにみえる、というのは怖いものがあります。
やめるのだフェネック! プロセッサのstore命令は、そのプロセッサの論理スレッドからみた順序は正しくても、バスや他のプロセッサからも同じ書き込み順序に見えるとは限らないのだ! Memory fenceが必要な場合があるのだ! #やめるのだフェネックで学ぶC++
セマフォ(semaphore)は鉄道由来の用語です。Mutexの可視化なら、高知の路面電車(とさでん交通伊野線)でタブレット交換をみることができます。
やめるのだフェネック! シンボル名やコメントを一括置換するときは、置換元を狭く限定して、過剰に置換していないかちゃんと確認するのだ! バをヴァに置き換えるだけだと、カヴァンになってしまうのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 「printfを入れたら動いた」とか言っちゃダメなのだ! それはprintfをまたぐ最適化が抑止されたから、volatileではない変数を読みに行くようになっただけなのだ! 忘れずにvolatileをつけるのだ! #やめるのだフェネックで学ぶC++
今どきメールと言えば電子メールなので、郵送のメールはsnail mailと呼ぶようになりました。私はロンドンから日本にハガキを送ったのですが、air mailと書き忘れたためにsurface mailになり、到着まで数十日掛かりました。本当にカタツムリのように遅かったです。
やめるのだフェネック! x64 ABIで、asmコードからCの関数を呼び出すときは、rspレジスタを16 bytes境界に合わせないといけないのだ! そうしないと、C++ライブラリの中で突然異常終了することがあるのだ! #やめるのだフェネックで学ぶC++
～がうまくいかないのは、やり方が不十分だからで、もっとリソースをつぎ込めばできるはずだ、という誤謬はよくあることです。人が空を飛ぶために必要だったのは、大きな羽根で力強くはばたくことではなく、揚力について知ることではありませんでしたか?
やめるのだフェネック! 組み込み32bit CPU向けコードのテストをGoogle Testで書くのに、x86_64コンパイラは要らないのだ! size_tの違いを吸収するのは大変なのだ! target=i686でインストールするのだ! #やめるのだフェネックで学ぶC++
ダブルバッファリングというと難しく聞こえますが、鉄道の相互発着(交互発着)と言えば分かりやすいでしょう。片方向2面のプラットフォームで、一方で発車しながら他方に到着させることです。東海道新幹線は16両と長いので、新横浜などでみることができます。
やめるのだフェネック!  pthread_cond_waitを直接使うと、spurious wakeup対策が必要なのだ! std::condition_variable::waitを述語付きで使うのだ! #やめるのだフェネックで学ぶC++
「やはり俺の青春ラブコメはまちがっている。」は「はまち」と略すらしいですが、catコマンドはconcatenateの略なので、古今東西考えることは同じだと思いました。
やめるのだフェネック! sizeof(4)は、"size_t型の4"という定数ではなく、"int型の4"のbyte数なのだ! alignof(4)とalignas(4)も区別するのだ! #やめるのだフェネックで学ぶC++
長さが等しい横三本棒(三みたいなもの)のアイコンを何と呼ぶのか分からなかったのですが、ハンバーガーアイコンと呼ぶことを最近知りました。GitHubのPinned repositoriesも、このアイコンを使って並べ替えておきました。
やめるのだフェネック! C++にfinally節やensure節はないのだ! リソースリークの防止にはRAIIを使うのだ! #やめるのだフェネックで学ぶC++
ライブラリを活用するのです。普通のプログラマが再発明したものより、理解容易性や信頼性や性能がはるかにすぐれているのです。美味しいものを食べてこその人生なのです。 #けものフレンズ
V&Vとは、Verification: 作った料理が不味かった、Validation: 料理が美味しいかどうかはさておき注文されたものではなかった、ということであってますか。
やめるのだフェネック! シンボル名を短くしたいからって、変な略語を発明しないで欲しいのだ! Cではないのだから、シンボルを31文字以内に収める必要はないのだ! #やめるのだフェネックで学ぶC++
"Mademoiselle: Coco Chanel Summer 62"という、マドモアゼル シャネルの仕事風景を写した写真集があります。ひたすら仕事に没頭するその姿は、プログラマの理想的な作業環境でもあると思います。
二つの構造体インスタンスが同値か比較するのに、memcmpで比較すると、不定値のパディングも比較するので同値なのに異なると判断することがあります。ところでパディングをmemsetで0埋めしたらどうなるのでしょうか。パディングはインスタンスの代入で伝搬するのでしょうか?
べき乗則の代表例として、地震の規模-頻度、株価の変動率-頻度があります。さてソフトウェアの修正コストは、開発フェーズを経るごとに倍々に増えると言います。もしソフトウェアの修正コスト-頻度がべき乗則だったら、いつ出荷できるかの予想はかなり困難ではないでしょうか。
やめるのだフェネック! memsetを使ってbyte単位以外の値でメモリを埋めるのは無理なのだ! std::fillを使うのだ! #やめるのだフェネックで学ぶC++
符号化につられて復号を「復号化」と書いてしまうのと、連想配列のことを思わずハッシュと呼んでしまうのは、気を付けたいですね。
boost::logic::tribool b = indeterminate;{\n}EXPECT_TRUE(b);{\n}EXPECT_FALSE(b);{\n}は両方とも成立しません。EXPECT_TRUE(!b)がEXPECT_FALSE(b)ですのでそうなりますよね。
Boost MPL (Metaprogramming Library)? フレンズの技だよ! #けものフレンズ
コードジェネレータでenumメンバを生成するときに、join(",")で結合して最後のメンバの後には,をつけないのと、全メンバを"メンバ名,"で結合して最後のメンバの後にも,をつけるのと、どちらにするか聞かれたことはありますか? 実は後者はC99/C++11で合法なのです。
やめるのだフェネック! 「みんながインクルードしているヘッダファイルの定義を書き足したらフルビルド」を避けるのだ! 宣言と定義を分離するのだ! enum classの前方宣言を活用するのだ! #やめるのだフェネックで学ぶC++
"NG"の正しい使い方として、Boeing 737 Next Generation (737NG)があります。ですので日本語におけるNGの正しい使い方は、アイドルマスターシンデレラガールズのニュージェネレーションズ(new generations)の略称ということになります。
やめるのだフェネック! 時刻表記のテストケースには、うるう秒も加えるのだ! std::get_timeは"2017-01-01 08:59:60"をちゃんと解析してくれるのだ! #やめるのだフェネックで学ぶC++
ベストエフォートとはいわば「状況次第、成り行き」です。成り行きと訳さなかったのは、一見高度な技術に見えないと思ったからかもしれませんが、成り行きには安くて便利という長所があります。お抱えシェフを雇うより、ランチを好きな時間に好きな店で食べられる方が多くの人にとって幸せでしょう。
x64 asmだと15 bytesある命令が作れるようです。{\n}lock addl $0xa0a0a0a0, %%fs:0x50505050(%%r8d, %%r9d, 4);{\n}元記事はこちらです。{\n}http://blog.onlinedisassembler.com/blog/?p=23
やめるのだフェネック! BashスクリプトをCRLF改行で保存するのはやめるのだ。"rm foo"すると、"foo(LF改行)"というファイルを削除しようとして失敗するのだ。 #やめるのだフェネックで学ぶC++
プログラミングと株取引は似ています。サッカーや将棋のようなレベル分けされたリーグはなく、プロとアマチュア、商品、製品とそうでないソフトウェアが全力で勝負している世界です。
やめるのだフェネック! std::unique_ptrが持つ素のポインタを渡して所有権を手放したらreleaseするのだ。resetしたり持ったままだと二回解放されてしまうのだ! std::localeにfacetを渡すときは気を付けるのだ! #やめるのだフェネックで学ぶC++
上流設計で館詰になるとき、ホテルやその所在地を選ぶ条件は、あまり熱心に探さなくても美味しいものがみつかりそうだ、ということです。国鉄のダイヤグラム作成が温泉旅館だったのは、一か所に大人数を収容することと、食事の都合だったのでしょう。
2の160乗通りのGit commit IDを使い果たすことはできない、と言われても今一つピンとこないと思いますが、アボガドロ定数(2の79乗)より大きいことなら、なんとなく分かっていただけるのではないでしょうか?
やめるのだフェネック! 固定長配列同士のmemmove/memcmpは、サイズが合っているかどうかstatic_assertを書いて欲しいのだ! 配列のsizeofは配列全体のbyte単位サイズを返してくれるのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! コメントに「このクラスのインスタンスはヒープに置かないでください」と書いて済ますのは嫌なのだ! operator newを=deleteして欲しいのだ! プログラマを誤用から守るのもライブラリの役割なのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 11,12,13番目は、11st, 12nd, 13rdじゃないのだ! 全部thなのだ! 発音すればわかるのだ! #やめるのだフェネックで学ぶC++
CPUへの割り込みは、古典的な教科書では電話に出ること例えられます。なるほどそれはそうですが、ITSとVCSの時代にプログラマが電話で何か訊かれることもないと思うので、もっと現代的なたとえはないでしょうか。
やめるのだフェネック! RDTSC命令で取得したクロックをそのまま乱数に使うのはやめるのだ! 偶数しか出ないとか、4で割った余りがいつも同じとかいう偏りがあるのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 入力ファイルと出力ファイルが同一ではないことを、確認するのを忘れちゃ嫌なのだ! cat < foo.txt > foo.txt すると、foo.txt が空になってしまうのだ!
やめるのだフェネック! UML図の各要素の名前は、統一性のあるきちんとした英語でつけて欲しいのだ! 統一性のない用語や、間違った英単語を使うと、それがそのままコードになってしまうのだ! コーディングを始めてから語彙を統一するのは無理なのだ! #やめるのだフェネックで学ぶC++
0/1-basedといえば、午前12時と午後12時がいつか分からなくなるのですが、分かりやすい覚え方はないでしょうか? 00分ちょうどなら正午(noon)、midnightと書けば済むのですが...
やめるのだフェネック! grep -v pat は「patに合わない行がある」であって「patに合う行がない」ではないのだ! 後者は grep pat ; test $? -eq 1 で終了コードが1であることを確認するのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 立っているビット数をfor文で数えるのは遅いのだ! 畳み込み演算を自作する前に、コンパイラのマニュアルから __builtin_popcount* とかを探すのだ! #やめるのだフェネックで学ぶC++
